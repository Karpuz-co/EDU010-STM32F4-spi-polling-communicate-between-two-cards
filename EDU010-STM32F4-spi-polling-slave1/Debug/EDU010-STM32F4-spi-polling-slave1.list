
EDU010-STM32F4-spi-polling-slave1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008468  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080085f0  080085f0  000185f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800860c  0800860c  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800860c  0800860c  0001860c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008614  08008614  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008614  08008614  00018614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800861c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020098  2**0
                  CONTENTS
 10 .bss          00000868  20000098  20000098  00020098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000900  20000900  00020098  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016ada  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003988  00000000  00000000  00036ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c0  00000000  00000000  0003a530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001040  00000000  00000000  0003b6f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238a5  00000000  00000000  0003c730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000181f9  00000000  00000000  0005ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb8eb  00000000  00000000  000781ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00143ab9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b9c  00000000  00000000  00143b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000098 	.word	0x20000098
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085d8 	.word	0x080085d8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000009c 	.word	0x2000009c
 80001c4:	080085d8 	.word	0x080085d8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 fd11 	bl	8000ef8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f895 	bl	8000604 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f9c3 	bl	8000864 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004de:	f000 f8fb 	bl	80006d8 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004e2:	f000 f927 	bl	8000734 <MX_I2S3_Init>
  MX_SPI1_Init();
 80004e6:	f000 f955 	bl	8000794 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004ea:	f007 fc2d 	bl	8007d48 <MX_USB_HOST_Init>
  MX_SPI2_Init();
 80004ee:	f000 f987 	bl	8000800 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_SPI_ENABLE(&hspi2);
 80004f2:	4b3b      	ldr	r3, [pc, #236]	; (80005e0 <main+0x114>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	681a      	ldr	r2, [r3, #0]
 80004f8:	4b39      	ldr	r3, [pc, #228]	; (80005e0 <main+0x114>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000500:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000502:	f007 fc47 	bl	8007d94 <MX_USB_HOST_Process>
    			break;

    		}
        }
        */
		if(HAL_SPI_GetState(&hspi2)== HAL_SPI_STATE_READY){
 8000506:	4836      	ldr	r0, [pc, #216]	; (80005e0 <main+0x114>)
 8000508:	f004 fb5e 	bl	8004bc8 <HAL_SPI_GetState>
 800050c:	4603      	mov	r3, r0
 800050e:	2b01      	cmp	r3, #1
 8000510:	d132      	bne.n	8000578 <main+0xac>
					switch (HAL_SPI_TransmitReceive(&hspi2,t_buf,spi_buf, 4, 1000)){
 8000512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000516:	9300      	str	r3, [sp, #0]
 8000518:	2304      	movs	r3, #4
 800051a:	4a32      	ldr	r2, [pc, #200]	; (80005e4 <main+0x118>)
 800051c:	4932      	ldr	r1, [pc, #200]	; (80005e8 <main+0x11c>)
 800051e:	4830      	ldr	r0, [pc, #192]	; (80005e0 <main+0x114>)
 8000520:	f004 f8a5 	bl	800466e <HAL_SPI_TransmitReceive>
 8000524:	4603      	mov	r3, r0
 8000526:	2b03      	cmp	r3, #3
 8000528:	d828      	bhi.n	800057c <main+0xb0>
 800052a:	a201      	add	r2, pc, #4	; (adr r2, 8000530 <main+0x64>)
 800052c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000530:	08000541 	.word	0x08000541
 8000534:	0800055d 	.word	0x0800055d
 8000538:	0800054f 	.word	0x0800054f
 800053c:	0800056b 	.word	0x0800056b
					case HAL_OK:
						hal_ok_counterrx++;
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <main+0x120>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	3301      	adds	r3, #1
 8000546:	b2da      	uxtb	r2, r3
 8000548:	4b28      	ldr	r3, [pc, #160]	; (80005ec <main+0x120>)
 800054a:	701a      	strb	r2, [r3, #0]

						break;
 800054c:	e017      	b.n	800057e <main+0xb2>
					case HAL_BUSY :
						hal_busy_counterrx++;
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <main+0x124>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <main+0x124>)
 8000558:	701a      	strb	r2, [r3, #0]
						break;
 800055a:	e010      	b.n	800057e <main+0xb2>
					case HAL_ERROR :
						hal_error_counterrx++;
 800055c:	4b25      	ldr	r3, [pc, #148]	; (80005f4 <main+0x128>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	3301      	adds	r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b23      	ldr	r3, [pc, #140]	; (80005f4 <main+0x128>)
 8000566:	701a      	strb	r2, [r3, #0]
						break;
 8000568:	e009      	b.n	800057e <main+0xb2>
					case HAL_TIMEOUT :
						hal_timeout_counterrx++;
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <main+0x12c>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	3301      	adds	r3, #1
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b21      	ldr	r3, [pc, #132]	; (80005f8 <main+0x12c>)
 8000574:	701a      	strb	r2, [r3, #0]
						break;
 8000576:	e002      	b.n	800057e <main+0xb2>

					default:
						break;

					}
				}
 8000578:	bf00      	nop
 800057a:	e000      	b.n	800057e <main+0xb2>
						break;
 800057c:	bf00      	nop
	if (spi_buf[0] == control_buf[0] || spi_buf[1] == control_buf[1] || spi_buf[2] == control_buf[2] ||spi_buf[3] == control_buf[3]  ) {
 800057e:	4b19      	ldr	r3, [pc, #100]	; (80005e4 <main+0x118>)
 8000580:	781a      	ldrb	r2, [r3, #0]
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <main+0x130>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	429a      	cmp	r2, r3
 8000588:	d011      	beq.n	80005ae <main+0xe2>
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <main+0x118>)
 800058c:	785a      	ldrb	r2, [r3, #1]
 800058e:	4b1b      	ldr	r3, [pc, #108]	; (80005fc <main+0x130>)
 8000590:	785b      	ldrb	r3, [r3, #1]
 8000592:	429a      	cmp	r2, r3
 8000594:	d00b      	beq.n	80005ae <main+0xe2>
 8000596:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <main+0x118>)
 8000598:	789a      	ldrb	r2, [r3, #2]
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <main+0x130>)
 800059c:	789b      	ldrb	r3, [r3, #2]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d005      	beq.n	80005ae <main+0xe2>
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <main+0x118>)
 80005a4:	78da      	ldrb	r2, [r3, #3]
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <main+0x130>)
 80005a8:	78db      	ldrb	r3, [r3, #3]
 80005aa:	429a      	cmp	r2, r3
 80005ac:	d103      	bne.n	80005b6 <main+0xea>
		t_buf[3] = 40 ;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <main+0x11c>)
 80005b0:	2228      	movs	r2, #40	; 0x28
 80005b2:	70da      	strb	r2, [r3, #3]
 80005b4:	e002      	b.n	80005bc <main+0xf0>
	}else {
		t_buf[3] = 80 ;
 80005b6:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <main+0x11c>)
 80005b8:	2250      	movs	r2, #80	; 0x50
 80005ba:	70da      	strb	r2, [r3, #3]
	}
      //HAL_Delay(10);
      //HAL_GPIO_WritePin (GPIOB, GPIO_PIN_12, GPIO_PIN_SET);
      if (spi_buf[0] == 85 ) {
 80005bc:	4b09      	ldr	r3, [pc, #36]	; (80005e4 <main+0x118>)
 80005be:	781b      	ldrb	r3, [r3, #0]
 80005c0:	2b55      	cmp	r3, #85	; 0x55
 80005c2:	d106      	bne.n	80005d2 <main+0x106>
    	  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ca:	480d      	ldr	r0, [pc, #52]	; (8000600 <main+0x134>)
 80005cc:	f000 fffa 	bl	80015c4 <HAL_GPIO_WritePin>
 80005d0:	e797      	b.n	8000502 <main+0x36>
    }else {
    	HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d8:	4809      	ldr	r0, [pc, #36]	; (8000600 <main+0x134>)
 80005da:	f000 fff3 	bl	80015c4 <HAL_GPIO_WritePin>
    MX_USB_HOST_Process();
 80005de:	e790      	b.n	8000502 <main+0x36>
 80005e0:	200001a8 	.word	0x200001a8
 80005e4:	20000200 	.word	0x20000200
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000204 	.word	0x20000204
 80005f0:	20000205 	.word	0x20000205
 80005f4:	20000206 	.word	0x20000206
 80005f8:	20000207 	.word	0x20000207
 80005fc:	20000004 	.word	0x20000004
 8000600:	40020c00 	.word	0x40020c00

08000604 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b094      	sub	sp, #80	; 0x50
 8000608:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800060a:	f107 0320 	add.w	r3, r7, #32
 800060e:	2230      	movs	r2, #48	; 0x30
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f007 feda 	bl	80083cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000618:	f107 030c 	add.w	r3, r7, #12
 800061c:	2200      	movs	r2, #0
 800061e:	601a      	str	r2, [r3, #0]
 8000620:	605a      	str	r2, [r3, #4]
 8000622:	609a      	str	r2, [r3, #8]
 8000624:	60da      	str	r2, [r3, #12]
 8000626:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000628:	2300      	movs	r3, #0
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	4b28      	ldr	r3, [pc, #160]	; (80006d0 <SystemClock_Config+0xcc>)
 800062e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000630:	4a27      	ldr	r2, [pc, #156]	; (80006d0 <SystemClock_Config+0xcc>)
 8000632:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000636:	6413      	str	r3, [r2, #64]	; 0x40
 8000638:	4b25      	ldr	r3, [pc, #148]	; (80006d0 <SystemClock_Config+0xcc>)
 800063a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800063c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000640:	60bb      	str	r3, [r7, #8]
 8000642:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <SystemClock_Config+0xd0>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <SystemClock_Config+0xd0>)
 800064e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <SystemClock_Config+0xd0>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000664:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000668:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800066a:	2302      	movs	r3, #2
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800066e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000672:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000674:	2308      	movs	r3, #8
 8000676:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000678:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800067c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800067e:	2302      	movs	r3, #2
 8000680:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000682:	2307      	movs	r3, #7
 8000684:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000686:	f107 0320 	add.w	r3, r7, #32
 800068a:	4618      	mov	r0, r3
 800068c:	f003 f9a2 	bl	80039d4 <HAL_RCC_OscConfig>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000696:	f000 f9e3 	bl	8000a60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800069a:	230f      	movs	r3, #15
 800069c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800069e:	2302      	movs	r3, #2
 80006a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006a2:	2300      	movs	r3, #0
 80006a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006b2:	f107 030c 	add.w	r3, r7, #12
 80006b6:	2105      	movs	r1, #5
 80006b8:	4618      	mov	r0, r3
 80006ba:	f003 fc03 	bl	8003ec4 <HAL_RCC_ClockConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006c4:	f000 f9cc 	bl	8000a60 <Error_Handler>
  }
}
 80006c8:	bf00      	nop
 80006ca:	3750      	adds	r7, #80	; 0x50
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	40023800 	.word	0x40023800
 80006d4:	40007000 	.word	0x40007000

080006d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006dc:	4b12      	ldr	r3, [pc, #72]	; (8000728 <MX_I2C1_Init+0x50>)
 80006de:	4a13      	ldr	r2, [pc, #76]	; (800072c <MX_I2C1_Init+0x54>)
 80006e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006e2:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_I2C1_Init+0x50>)
 80006e4:	4a12      	ldr	r2, [pc, #72]	; (8000730 <MX_I2C1_Init+0x58>)
 80006e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	; (8000728 <MX_I2C1_Init+0x50>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_I2C1_Init+0x50>)
 80006f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <MX_I2C1_Init+0x50>)
 80006fe:	2200      	movs	r2, #0
 8000700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000702:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_I2C1_Init+0x50>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	; (8000728 <MX_I2C1_Init+0x50>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_I2C1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <MX_I2C1_Init+0x50>)
 8000716:	f002 fb79 	bl	8002e0c <HAL_I2C_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000720:	f000 f99e 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000b4 	.word	0x200000b4
 800072c:	40005400 	.word	0x40005400
 8000730:	000186a0 	.word	0x000186a0

08000734 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <MX_I2S3_Init+0x54>)
 800073a:	4a14      	ldr	r2, [pc, #80]	; (800078c <MX_I2S3_Init+0x58>)
 800073c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2S3_Init+0x54>)
 8000740:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000744:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <MX_I2S3_Init+0x54>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800074c:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2S3_Init+0x54>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000752:	4b0d      	ldr	r3, [pc, #52]	; (8000788 <MX_I2S3_Init+0x54>)
 8000754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000758:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800075a:	4b0b      	ldr	r3, [pc, #44]	; (8000788 <MX_I2S3_Init+0x54>)
 800075c:	4a0c      	ldr	r2, [pc, #48]	; (8000790 <MX_I2S3_Init+0x5c>)
 800075e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000760:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2S3_Init+0x54>)
 8000762:	2200      	movs	r2, #0
 8000764:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000766:	4b08      	ldr	r3, [pc, #32]	; (8000788 <MX_I2S3_Init+0x54>)
 8000768:	2200      	movs	r2, #0
 800076a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800076c:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2S3_Init+0x54>)
 800076e:	2200      	movs	r2, #0
 8000770:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000772:	4805      	ldr	r0, [pc, #20]	; (8000788 <MX_I2S3_Init+0x54>)
 8000774:	f002 fc8e 	bl	8003094 <HAL_I2S_Init>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 800077e:	f000 f96f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000782:	bf00      	nop
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	20000108 	.word	0x20000108
 800078c:	40003c00 	.word	0x40003c00
 8000790:	00017700 	.word	0x00017700

08000794 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI1_Init+0x64>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_SPI1_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_SPI1_Init+0x64>)
 80007e6:	f003 feb9 	bl	800455c <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 f936 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000150 	.word	0x20000150
 80007fc:	40013000 	.word	0x40013000

08000800 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000804:	4b15      	ldr	r3, [pc, #84]	; (800085c <MX_SPI2_Init+0x5c>)
 8000806:	4a16      	ldr	r2, [pc, #88]	; (8000860 <MX_SPI2_Init+0x60>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800080a:	4b14      	ldr	r3, [pc, #80]	; (800085c <MX_SPI2_Init+0x5c>)
 800080c:	2200      	movs	r2, #0
 800080e:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000810:	4b12      	ldr	r3, [pc, #72]	; (800085c <MX_SPI2_Init+0x5c>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000816:	4b11      	ldr	r3, [pc, #68]	; (800085c <MX_SPI2_Init+0x5c>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800081c:	4b0f      	ldr	r3, [pc, #60]	; (800085c <MX_SPI2_Init+0x5c>)
 800081e:	2202      	movs	r2, #2
 8000820:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_SPI2_Init+0x5c>)
 8000824:	2201      	movs	r2, #1
 8000826:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000828:	4b0c      	ldr	r3, [pc, #48]	; (800085c <MX_SPI2_Init+0x5c>)
 800082a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800082e:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000830:	4b0a      	ldr	r3, [pc, #40]	; (800085c <MX_SPI2_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_SPI2_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800083c:	4b07      	ldr	r3, [pc, #28]	; (800085c <MX_SPI2_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_SPI2_Init+0x5c>)
 8000844:	220a      	movs	r2, #10
 8000846:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000848:	4804      	ldr	r0, [pc, #16]	; (800085c <MX_SPI2_Init+0x5c>)
 800084a:	f003 fe87 	bl	800455c <HAL_SPI_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_SPI2_Init+0x58>
  {
    Error_Handler();
 8000854:	f000 f904 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001a8 	.word	0x200001a8
 8000860:	40003800 	.word	0x40003800

08000864 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b08c      	sub	sp, #48	; 0x30
 8000868:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086a:	f107 031c 	add.w	r3, r7, #28
 800086e:	2200      	movs	r2, #0
 8000870:	601a      	str	r2, [r3, #0]
 8000872:	605a      	str	r2, [r3, #4]
 8000874:	609a      	str	r2, [r3, #8]
 8000876:	60da      	str	r2, [r3, #12]
 8000878:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	61bb      	str	r3, [r7, #24]
 800087e:	4b72      	ldr	r3, [pc, #456]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a71      	ldr	r2, [pc, #452]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 8000884:	f043 0310 	orr.w	r3, r3, #16
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b6f      	ldr	r3, [pc, #444]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0310 	and.w	r3, r3, #16
 8000892:	61bb      	str	r3, [r7, #24]
 8000894:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	617b      	str	r3, [r7, #20]
 800089a:	4b6b      	ldr	r3, [pc, #428]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a6a      	ldr	r2, [pc, #424]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008a0:	f043 0304 	orr.w	r3, r3, #4
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b68      	ldr	r3, [pc, #416]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0304 	and.w	r3, r3, #4
 80008ae:	617b      	str	r3, [r7, #20]
 80008b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b64      	ldr	r3, [pc, #400]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a63      	ldr	r2, [pc, #396]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b61      	ldr	r3, [pc, #388]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b5d      	ldr	r3, [pc, #372]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a5c      	ldr	r2, [pc, #368]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008d8:	f043 0301 	orr.w	r3, r3, #1
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b5a      	ldr	r3, [pc, #360]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0301 	and.w	r3, r3, #1
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b56      	ldr	r3, [pc, #344]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a55      	ldr	r2, [pc, #340]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008f4:	f043 0302 	orr.w	r3, r3, #2
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b53      	ldr	r3, [pc, #332]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0302 	and.w	r3, r3, #2
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b4f      	ldr	r3, [pc, #316]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a4e      	ldr	r2, [pc, #312]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 8000910:	f043 0308 	orr.w	r3, r3, #8
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b4c      	ldr	r3, [pc, #304]	; (8000a48 <MX_GPIO_Init+0x1e4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0308 	and.w	r3, r3, #8
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2108      	movs	r1, #8
 8000926:	4849      	ldr	r0, [pc, #292]	; (8000a4c <MX_GPIO_Init+0x1e8>)
 8000928:	f000 fe4c 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2101      	movs	r1, #1
 8000930:	4847      	ldr	r0, [pc, #284]	; (8000a50 <MX_GPIO_Init+0x1ec>)
 8000932:	f000 fe47 	bl	80015c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000936:	2200      	movs	r2, #0
 8000938:	f24f 0110 	movw	r1, #61456	; 0xf010
 800093c:	4845      	ldr	r0, [pc, #276]	; (8000a54 <MX_GPIO_Init+0x1f0>)
 800093e:	f000 fe41 	bl	80015c4 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000942:	2308      	movs	r3, #8
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	483c      	ldr	r0, [pc, #240]	; (8000a4c <MX_GPIO_Init+0x1e8>)
 800095a:	f000 fc97 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800095e:	2301      	movs	r3, #1
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000962:	2301      	movs	r3, #1
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096a:	2300      	movs	r3, #0
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	4836      	ldr	r0, [pc, #216]	; (8000a50 <MX_GPIO_Init+0x1ec>)
 8000976:	f000 fc89 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800097a:	2308      	movs	r3, #8
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000986:	2300      	movs	r3, #0
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800098a:	2305      	movs	r3, #5
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	482e      	ldr	r0, [pc, #184]	; (8000a50 <MX_GPIO_Init+0x1ec>)
 8000996:	f000 fc79 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800099a:	2301      	movs	r3, #1
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800099e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	2300      	movs	r3, #0
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	482a      	ldr	r0, [pc, #168]	; (8000a58 <MX_GPIO_Init+0x1f4>)
 80009b0:	f000 fc6c 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b8:	2300      	movs	r3, #0
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80009c0:	f107 031c 	add.w	r3, r7, #28
 80009c4:	4619      	mov	r1, r3
 80009c6:	4825      	ldr	r0, [pc, #148]	; (8000a5c <MX_GPIO_Init+0x1f8>)
 80009c8:	f000 fc60 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80009cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d2:	2302      	movs	r3, #2
 80009d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009da:	2300      	movs	r3, #0
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009de:	2305      	movs	r3, #5
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	481c      	ldr	r0, [pc, #112]	; (8000a5c <MX_GPIO_Init+0x1f8>)
 80009ea:	f000 fc4f 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009ee:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009f2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	4813      	ldr	r0, [pc, #76]	; (8000a54 <MX_GPIO_Init+0x1f0>)
 8000a08:	f000 fc40 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000a0c:	2320      	movs	r3, #32
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a18:	f107 031c 	add.w	r3, r7, #28
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480d      	ldr	r0, [pc, #52]	; (8000a54 <MX_GPIO_Init+0x1f0>)
 8000a20:	f000 fc34 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 031c 	add.w	r3, r7, #28
 8000a36:	4619      	mov	r1, r3
 8000a38:	4804      	ldr	r0, [pc, #16]	; (8000a4c <MX_GPIO_Init+0x1e8>)
 8000a3a:	f000 fc27 	bl	800128c <HAL_GPIO_Init>

}
 8000a3e:	bf00      	nop
 8000a40:	3730      	adds	r7, #48	; 0x30
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40021000 	.word	0x40021000
 8000a50:	40020800 	.word	0x40020800
 8000a54:	40020c00 	.word	0x40020c00
 8000a58:	40020000 	.word	0x40020000
 8000a5c:	40020400 	.word	0x40020400

08000a60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a64:	b672      	cpsid	i
}
 8000a66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <Error_Handler+0x8>
	...

08000a6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	607b      	str	r3, [r7, #4]
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	4a0f      	ldr	r2, [pc, #60]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a80:	6453      	str	r3, [r2, #68]	; 0x44
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a8a:	607b      	str	r3, [r7, #4]
 8000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	603b      	str	r3, [r7, #0]
 8000a92:	4b09      	ldr	r3, [pc, #36]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a96:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000a98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9e:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <HAL_MspInit+0x4c>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aa6:	603b      	str	r3, [r7, #0]
 8000aa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000aaa:	2007      	movs	r0, #7
 8000aac:	f000 fb8a 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab0:	bf00      	nop
 8000ab2:	3708      	adds	r7, #8
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800

08000abc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	; 0x28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0314 	add.w	r3, r7, #20
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4a19      	ldr	r2, [pc, #100]	; (8000b40 <HAL_I2C_MspInit+0x84>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d12c      	bne.n	8000b38 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	2300      	movs	r3, #0
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	4b18      	ldr	r3, [pc, #96]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae6:	4a17      	ldr	r2, [pc, #92]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000ae8:	f043 0302 	orr.w	r3, r3, #2
 8000aec:	6313      	str	r3, [r2, #48]	; 0x30
 8000aee:	4b15      	ldr	r3, [pc, #84]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	f003 0302 	and.w	r3, r3, #2
 8000af6:	613b      	str	r3, [r7, #16]
 8000af8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000afa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000afe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b00:	2312      	movs	r3, #18
 8000b02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b0c:	2304      	movs	r3, #4
 8000b0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b10:	f107 0314 	add.w	r3, r7, #20
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <HAL_I2C_MspInit+0x8c>)
 8000b18:	f000 fbb8 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
 8000b20:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <HAL_I2C_MspInit+0x88>)
 8000b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b34:	60fb      	str	r3, [r7, #12]
 8000b36:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40005400 	.word	0x40005400
 8000b44:	40023800 	.word	0x40023800
 8000b48:	40020400 	.word	0x40020400

08000b4c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08e      	sub	sp, #56	; 0x38
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b64:	f107 0314 	add.w	r3, r7, #20
 8000b68:	2200      	movs	r2, #0
 8000b6a:	601a      	str	r2, [r3, #0]
 8000b6c:	605a      	str	r2, [r3, #4]
 8000b6e:	609a      	str	r2, [r3, #8]
 8000b70:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a31      	ldr	r2, [pc, #196]	; (8000c3c <HAL_I2S_MspInit+0xf0>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d15a      	bne.n	8000c32 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000b80:	23c0      	movs	r3, #192	; 0xc0
 8000b82:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000b84:	2302      	movs	r3, #2
 8000b86:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f003 fba5 	bl	80042dc <HAL_RCCEx_PeriphCLKConfig>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000b98:	f7ff ff62 	bl	8000a60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	4b27      	ldr	r3, [pc, #156]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a26      	ldr	r2, [pc, #152]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
 8000bac:	4b24      	ldr	r3, [pc, #144]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	2300      	movs	r3, #0
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	4b20      	ldr	r3, [pc, #128]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc8:	4b1d      	ldr	r3, [pc, #116]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	4b19      	ldr	r3, [pc, #100]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a18      	ldr	r2, [pc, #96]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b16      	ldr	r3, [pc, #88]	; (8000c40 <HAL_I2S_MspInit+0xf4>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000bf0:	2310      	movs	r3, #16
 8000bf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c00:	2306      	movs	r3, #6
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <HAL_I2S_MspInit+0xf8>)
 8000c0c:	f000 fb3e 	bl	800128c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c10:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c22:	2306      	movs	r3, #6
 8000c24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	4806      	ldr	r0, [pc, #24]	; (8000c48 <HAL_I2S_MspInit+0xfc>)
 8000c2e:	f000 fb2d 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	3738      	adds	r7, #56	; 0x38
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40003c00 	.word	0x40003c00
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40020800 	.word	0x40020800

08000c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08c      	sub	sp, #48	; 0x30
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 031c 	add.w	r3, r7, #28
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a45      	ldr	r2, [pc, #276]	; (8000d80 <HAL_SPI_MspInit+0x134>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d12c      	bne.n	8000cc8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	61bb      	str	r3, [r7, #24]
 8000c72:	4b44      	ldr	r3, [pc, #272]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c76:	4a43      	ldr	r2, [pc, #268]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000c78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c7c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c7e:	4b41      	ldr	r3, [pc, #260]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c86:	61bb      	str	r3, [r7, #24]
 8000c88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
 8000c8e:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	4a3c      	ldr	r2, [pc, #240]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9a:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ca6:	23e0      	movs	r3, #224	; 0xe0
 8000ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000caa:	2302      	movs	r3, #2
 8000cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cb6:	2305      	movs	r3, #5
 8000cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 031c 	add.w	r3, r7, #28
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4831      	ldr	r0, [pc, #196]	; (8000d88 <HAL_SPI_MspInit+0x13c>)
 8000cc2:	f000 fae3 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000cc6:	e057      	b.n	8000d78 <HAL_SPI_MspInit+0x12c>
  else if(hspi->Instance==SPI2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a2f      	ldr	r2, [pc, #188]	; (8000d8c <HAL_SPI_MspInit+0x140>)
 8000cce:	4293      	cmp	r3, r2
 8000cd0:	d152      	bne.n	8000d78 <HAL_SPI_MspInit+0x12c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	613b      	str	r3, [r7, #16]
 8000cd6:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000cdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce2:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cea:	613b      	str	r3, [r7, #16]
 8000cec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60fb      	str	r3, [r7, #12]
 8000cf2:	4b24      	ldr	r3, [pc, #144]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a23      	ldr	r2, [pc, #140]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000cf8:	f043 0304 	orr.w	r3, r3, #4
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b21      	ldr	r3, [pc, #132]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4b1d      	ldr	r3, [pc, #116]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b1a      	ldr	r3, [pc, #104]	; (8000d84 <HAL_SPI_MspInit+0x138>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	60bb      	str	r3, [r7, #8]
 8000d24:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d26:	2304      	movs	r3, #4
 8000d28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d32:	2303      	movs	r3, #3
 8000d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d36:	2305      	movs	r3, #5
 8000d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d3a:	f107 031c 	add.w	r3, r7, #28
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <HAL_SPI_MspInit+0x144>)
 8000d42:	f000 faa3 	bl	800128c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000d46:	f44f 4320 	mov.w	r3, #40960	; 0xa000
 8000d4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d54:	2303      	movs	r3, #3
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d58:	2305      	movs	r3, #5
 8000d5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	4619      	mov	r1, r3
 8000d62:	480c      	ldr	r0, [pc, #48]	; (8000d94 <HAL_SPI_MspInit+0x148>)
 8000d64:	f000 fa92 	bl	800128c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000d68:	2200      	movs	r2, #0
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2024      	movs	r0, #36	; 0x24
 8000d6e:	f000 fa34 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000d72:	2024      	movs	r0, #36	; 0x24
 8000d74:	f000 fa4d 	bl	8001212 <HAL_NVIC_EnableIRQ>
}
 8000d78:	bf00      	nop
 8000d7a:	3730      	adds	r7, #48	; 0x30
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	40013000 	.word	0x40013000
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40020000 	.word	0x40020000
 8000d8c:	40003800 	.word	0x40003800
 8000d90:	40020800 	.word	0x40020800
 8000d94:	40020400 	.word	0x40020400

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <NMI_Handler+0x4>

08000d9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d9e:	b480      	push	{r7}
 8000da0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da2:	e7fe      	b.n	8000da2 <HardFault_Handler+0x4>

08000da4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <MemManage_Handler+0x4>

08000daa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000daa:	b480      	push	{r7}
 8000dac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dae:	e7fe      	b.n	8000dae <BusFault_Handler+0x4>

08000db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000db4:	e7fe      	b.n	8000db4 <UsageFault_Handler+0x4>

08000db6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000db6:	b480      	push	{r7}
 8000db8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr

08000dc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr

08000de0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000de4:	f000 f8da 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}

08000dec <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <SPI2_IRQHandler+0x10>)
 8000df2:	f003 fddf 	bl	80049b4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200001a8 	.word	0x200001a8

08000e00 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <OTG_FS_IRQHandler+0x10>)
 8000e06:	f000 fe61 	bl	8001acc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	200005ec 	.word	0x200005ec

08000e14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b086      	sub	sp, #24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e1c:	4a14      	ldr	r2, [pc, #80]	; (8000e70 <_sbrk+0x5c>)
 8000e1e:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <_sbrk+0x60>)
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4b13      	ldr	r3, [pc, #76]	; (8000e78 <_sbrk+0x64>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d102      	bne.n	8000e36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <_sbrk+0x64>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <_sbrk+0x68>)
 8000e34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <_sbrk+0x64>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	4413      	add	r3, r2
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	429a      	cmp	r2, r3
 8000e42:	d207      	bcs.n	8000e54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e44:	f007 fa88 	bl	8008358 <__errno>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	220c      	movs	r2, #12
 8000e4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000e52:	e009      	b.n	8000e68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <_sbrk+0x64>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <_sbrk+0x64>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4413      	add	r3, r2
 8000e62:	4a05      	ldr	r2, [pc, #20]	; (8000e78 <_sbrk+0x64>)
 8000e64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e66:	68fb      	ldr	r3, [r7, #12]
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3718      	adds	r7, #24
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20020000 	.word	0x20020000
 8000e74:	00000400 	.word	0x00000400
 8000e78:	20000208 	.word	0x20000208
 8000e7c:	20000900 	.word	0x20000900

08000e80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e84:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <SystemInit+0x20>)
 8000e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e8a:	4a05      	ldr	r2, [pc, #20]	; (8000ea0 <SystemInit+0x20>)
 8000e8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e94:	bf00      	nop
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ea4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000edc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000eaa:	490e      	ldr	r1, [pc, #56]	; (8000ee4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000eac:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eb0:	e002      	b.n	8000eb8 <LoopCopyDataInit>

08000eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb6:	3304      	adds	r3, #4

08000eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ebc:	d3f9      	bcc.n	8000eb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ebe:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ec0:	4c0b      	ldr	r4, [pc, #44]	; (8000ef0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec4:	e001      	b.n	8000eca <LoopFillZerobss>

08000ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec8:	3204      	adds	r2, #4

08000eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ecc:	d3fb      	bcc.n	8000ec6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ece:	f7ff ffd7 	bl	8000e80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ed2:	f007 fa47 	bl	8008364 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ed6:	f7ff faf9 	bl	80004cc <main>
  bx  lr    
 8000eda:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000edc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ee0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ee4:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000ee8:	0800861c 	.word	0x0800861c
  ldr r2, =_sbss
 8000eec:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000ef0:	20000900 	.word	0x20000900

08000ef4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ef4:	e7fe      	b.n	8000ef4 <ADC_IRQHandler>
	...

08000ef8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000efc:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0d      	ldr	r2, [pc, #52]	; (8000f38 <HAL_Init+0x40>)
 8000f02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <HAL_Init+0x40>)
 8000f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f14:	4b08      	ldr	r3, [pc, #32]	; (8000f38 <HAL_Init+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a07      	ldr	r2, [pc, #28]	; (8000f38 <HAL_Init+0x40>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f20:	2003      	movs	r0, #3
 8000f22:	f000 f94f 	bl	80011c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 f808 	bl	8000f3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f2c:	f7ff fd9e 	bl	8000a6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f30:	2300      	movs	r3, #0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40023c00 	.word	0x40023c00

08000f3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f44:	4b12      	ldr	r3, [pc, #72]	; (8000f90 <HAL_InitTick+0x54>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_InitTick+0x58>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f967 	bl	800122e <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f000 f92f 	bl	80011da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x5c>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000008 	.word	0x20000008
 8000f94:	20000010 	.word	0x20000010
 8000f98:	2000000c 	.word	0x2000000c

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	20000010 	.word	0x20000010
 8000fc0:	2000020c 	.word	0x2000020c

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	2000020c 	.word	0x2000020c

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000010 	.word	0x20000010

08001024 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f003 0307 	and.w	r3, r3, #7
 8001032:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001040:	4013      	ands	r3, r2
 8001042:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800104c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001056:	4a04      	ldr	r2, [pc, #16]	; (8001068 <__NVIC_SetPriorityGrouping+0x44>)
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	60d3      	str	r3, [r2, #12]
}
 800105c:	bf00      	nop
 800105e:	3714      	adds	r7, #20
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	e000ed00 	.word	0xe000ed00

0800106c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001070:	4b04      	ldr	r3, [pc, #16]	; (8001084 <__NVIC_GetPriorityGrouping+0x18>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	0a1b      	lsrs	r3, r3, #8
 8001076:	f003 0307 	and.w	r3, r3, #7
}
 800107a:	4618      	mov	r0, r3
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	e000ed00 	.word	0xe000ed00

08001088 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001096:	2b00      	cmp	r3, #0
 8001098:	db0b      	blt.n	80010b2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	f003 021f 	and.w	r2, r3, #31
 80010a0:	4907      	ldr	r1, [pc, #28]	; (80010c0 <__NVIC_EnableIRQ+0x38>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	095b      	lsrs	r3, r3, #5
 80010a8:	2001      	movs	r0, #1
 80010aa:	fa00 f202 	lsl.w	r2, r0, r2
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	db0a      	blt.n	80010ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	490c      	ldr	r1, [pc, #48]	; (8001110 <__NVIC_SetPriority+0x4c>)
 80010de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e2:	0112      	lsls	r2, r2, #4
 80010e4:	b2d2      	uxtb	r2, r2
 80010e6:	440b      	add	r3, r1
 80010e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010ec:	e00a      	b.n	8001104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	b2da      	uxtb	r2, r3
 80010f2:	4908      	ldr	r1, [pc, #32]	; (8001114 <__NVIC_SetPriority+0x50>)
 80010f4:	79fb      	ldrb	r3, [r7, #7]
 80010f6:	f003 030f 	and.w	r3, r3, #15
 80010fa:	3b04      	subs	r3, #4
 80010fc:	0112      	lsls	r2, r2, #4
 80010fe:	b2d2      	uxtb	r2, r2
 8001100:	440b      	add	r3, r1
 8001102:	761a      	strb	r2, [r3, #24]
}
 8001104:	bf00      	nop
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	e000e100 	.word	0xe000e100
 8001114:	e000ed00 	.word	0xe000ed00

08001118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001118:	b480      	push	{r7}
 800111a:	b089      	sub	sp, #36	; 0x24
 800111c:	af00      	add	r7, sp, #0
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	f1c3 0307 	rsb	r3, r3, #7
 8001132:	2b04      	cmp	r3, #4
 8001134:	bf28      	it	cs
 8001136:	2304      	movcs	r3, #4
 8001138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800113a:	69fb      	ldr	r3, [r7, #28]
 800113c:	3304      	adds	r3, #4
 800113e:	2b06      	cmp	r3, #6
 8001140:	d902      	bls.n	8001148 <NVIC_EncodePriority+0x30>
 8001142:	69fb      	ldr	r3, [r7, #28]
 8001144:	3b03      	subs	r3, #3
 8001146:	e000      	b.n	800114a <NVIC_EncodePriority+0x32>
 8001148:	2300      	movs	r3, #0
 800114a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	f04f 32ff 	mov.w	r2, #4294967295
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	401a      	ands	r2, r3
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001160:	f04f 31ff 	mov.w	r1, #4294967295
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	fa01 f303 	lsl.w	r3, r1, r3
 800116a:	43d9      	mvns	r1, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001170:	4313      	orrs	r3, r2
         );
}
 8001172:	4618      	mov	r0, r3
 8001174:	3724      	adds	r7, #36	; 0x24
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
	...

08001180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	3b01      	subs	r3, #1
 800118c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001190:	d301      	bcc.n	8001196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001192:	2301      	movs	r3, #1
 8001194:	e00f      	b.n	80011b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001196:	4a0a      	ldr	r2, [pc, #40]	; (80011c0 <SysTick_Config+0x40>)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3b01      	subs	r3, #1
 800119c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800119e:	210f      	movs	r1, #15
 80011a0:	f04f 30ff 	mov.w	r0, #4294967295
 80011a4:	f7ff ff8e 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <SysTick_Config+0x40>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ae:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <SysTick_Config+0x40>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3708      	adds	r7, #8
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	e000e010 	.word	0xe000e010

080011c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f7ff ff29 	bl	8001024 <__NVIC_SetPriorityGrouping>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011da:	b580      	push	{r7, lr}
 80011dc:	b086      	sub	sp, #24
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	60b9      	str	r1, [r7, #8]
 80011e4:	607a      	str	r2, [r7, #4]
 80011e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011e8:	2300      	movs	r3, #0
 80011ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ec:	f7ff ff3e 	bl	800106c <__NVIC_GetPriorityGrouping>
 80011f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	68b9      	ldr	r1, [r7, #8]
 80011f6:	6978      	ldr	r0, [r7, #20]
 80011f8:	f7ff ff8e 	bl	8001118 <NVIC_EncodePriority>
 80011fc:	4602      	mov	r2, r0
 80011fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001202:	4611      	mov	r1, r2
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	bf00      	nop
 800120c:	3718      	adds	r7, #24
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	4603      	mov	r3, r0
 800121a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff31 	bl	8001088 <__NVIC_EnableIRQ>
}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b082      	sub	sp, #8
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffa2 	bl	8001180 <SysTick_Config>
 800123c:	4603      	mov	r3, r0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001246:	b480      	push	{r7}
 8001248:	b083      	sub	sp, #12
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001254:	b2db      	uxtb	r3, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d004      	beq.n	8001264 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2280      	movs	r2, #128	; 0x80
 800125e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e00c      	b.n	800127e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2205      	movs	r2, #5
 8001268:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 0201 	bic.w	r2, r2, #1
 800127a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b089      	sub	sp, #36	; 0x24
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800129a:	2300      	movs	r3, #0
 800129c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
 80012a6:	e16b      	b.n	8001580 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012a8:	2201      	movs	r2, #1
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	697a      	ldr	r2, [r7, #20]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	f040 815a 	bne.w	800157a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d005      	beq.n	80012de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f003 0303 	and.w	r3, r3, #3
 8001348:	2b03      	cmp	r3, #3
 800134a:	d017      	beq.n	800137c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	005b      	lsls	r3, r3, #1
 8001356:	2203      	movs	r2, #3
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	43db      	mvns	r3, r3
 800135e:	69ba      	ldr	r2, [r7, #24]
 8001360:	4013      	ands	r3, r2
 8001362:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689a      	ldr	r2, [r3, #8]
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	005b      	lsls	r3, r3, #1
 800136c:	fa02 f303 	lsl.w	r3, r2, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4313      	orrs	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	f003 0303 	and.w	r3, r3, #3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d123      	bne.n	80013d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	08da      	lsrs	r2, r3, #3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3208      	adds	r2, #8
 8001390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	f003 0307 	and.w	r3, r3, #7
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	220f      	movs	r2, #15
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	f003 0307 	and.w	r3, r3, #7
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	fa02 f303 	lsl.w	r3, r2, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4313      	orrs	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	08da      	lsrs	r2, r3, #3
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3208      	adds	r2, #8
 80013ca:	69b9      	ldr	r1, [r7, #24]
 80013cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	2203      	movs	r2, #3
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43db      	mvns	r3, r3
 80013e2:	69ba      	ldr	r2, [r7, #24]
 80013e4:	4013      	ands	r3, r2
 80013e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 0203 	and.w	r2, r3, #3
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	fa02 f303 	lsl.w	r3, r2, r3
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800140c:	2b00      	cmp	r3, #0
 800140e:	f000 80b4 	beq.w	800157a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	4b60      	ldr	r3, [pc, #384]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141a:	4a5f      	ldr	r2, [pc, #380]	; (8001598 <HAL_GPIO_Init+0x30c>)
 800141c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001420:	6453      	str	r3, [r2, #68]	; 0x44
 8001422:	4b5d      	ldr	r3, [pc, #372]	; (8001598 <HAL_GPIO_Init+0x30c>)
 8001424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001426:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800142e:	4a5b      	ldr	r2, [pc, #364]	; (800159c <HAL_GPIO_Init+0x310>)
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	089b      	lsrs	r3, r3, #2
 8001434:	3302      	adds	r3, #2
 8001436:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800143a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	220f      	movs	r2, #15
 8001446:	fa02 f303 	lsl.w	r3, r2, r3
 800144a:	43db      	mvns	r3, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4013      	ands	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a52      	ldr	r2, [pc, #328]	; (80015a0 <HAL_GPIO_Init+0x314>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d02b      	beq.n	80014b2 <HAL_GPIO_Init+0x226>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a51      	ldr	r2, [pc, #324]	; (80015a4 <HAL_GPIO_Init+0x318>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d025      	beq.n	80014ae <HAL_GPIO_Init+0x222>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a50      	ldr	r2, [pc, #320]	; (80015a8 <HAL_GPIO_Init+0x31c>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01f      	beq.n	80014aa <HAL_GPIO_Init+0x21e>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <HAL_GPIO_Init+0x320>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d019      	beq.n	80014a6 <HAL_GPIO_Init+0x21a>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4e      	ldr	r2, [pc, #312]	; (80015b0 <HAL_GPIO_Init+0x324>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d013      	beq.n	80014a2 <HAL_GPIO_Init+0x216>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4d      	ldr	r2, [pc, #308]	; (80015b4 <HAL_GPIO_Init+0x328>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d00d      	beq.n	800149e <HAL_GPIO_Init+0x212>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a4c      	ldr	r2, [pc, #304]	; (80015b8 <HAL_GPIO_Init+0x32c>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d007      	beq.n	800149a <HAL_GPIO_Init+0x20e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a4b      	ldr	r2, [pc, #300]	; (80015bc <HAL_GPIO_Init+0x330>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d101      	bne.n	8001496 <HAL_GPIO_Init+0x20a>
 8001492:	2307      	movs	r3, #7
 8001494:	e00e      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 8001496:	2308      	movs	r3, #8
 8001498:	e00c      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 800149a:	2306      	movs	r3, #6
 800149c:	e00a      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 800149e:	2305      	movs	r3, #5
 80014a0:	e008      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014a2:	2304      	movs	r3, #4
 80014a4:	e006      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014a6:	2303      	movs	r3, #3
 80014a8:	e004      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e002      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014ae:	2301      	movs	r3, #1
 80014b0:	e000      	b.n	80014b4 <HAL_GPIO_Init+0x228>
 80014b2:	2300      	movs	r3, #0
 80014b4:	69fa      	ldr	r2, [r7, #28]
 80014b6:	f002 0203 	and.w	r2, r2, #3
 80014ba:	0092      	lsls	r2, r2, #2
 80014bc:	4093      	lsls	r3, r2
 80014be:	69ba      	ldr	r2, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014c4:	4935      	ldr	r1, [pc, #212]	; (800159c <HAL_GPIO_Init+0x310>)
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	3302      	adds	r3, #2
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014d2:	4b3b      	ldr	r3, [pc, #236]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	4313      	orrs	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014f6:	4a32      	ldr	r2, [pc, #200]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014fc:	4b30      	ldr	r3, [pc, #192]	; (80015c0 <HAL_GPIO_Init+0x334>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	43db      	mvns	r3, r3
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	4013      	ands	r3, r2
 800150a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001514:	2b00      	cmp	r3, #0
 8001516:	d003      	beq.n	8001520 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	693b      	ldr	r3, [r7, #16]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001520:	4a27      	ldr	r2, [pc, #156]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001526:	4b26      	ldr	r3, [pc, #152]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	43db      	mvns	r3, r3
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	4013      	ands	r3, r2
 8001534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800154a:	4a1d      	ldr	r2, [pc, #116]	; (80015c0 <HAL_GPIO_Init+0x334>)
 800154c:	69bb      	ldr	r3, [r7, #24]
 800154e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001550:	4b1b      	ldr	r3, [pc, #108]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	43db      	mvns	r3, r3
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	4013      	ands	r3, r2
 800155e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001568:	2b00      	cmp	r3, #0
 800156a:	d003      	beq.n	8001574 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001574:	4a12      	ldr	r2, [pc, #72]	; (80015c0 <HAL_GPIO_Init+0x334>)
 8001576:	69bb      	ldr	r3, [r7, #24]
 8001578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	3301      	adds	r3, #1
 800157e:	61fb      	str	r3, [r7, #28]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	2b0f      	cmp	r3, #15
 8001584:	f67f ae90 	bls.w	80012a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001588:	bf00      	nop
 800158a:	bf00      	nop
 800158c:	3724      	adds	r7, #36	; 0x24
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40023800 	.word	0x40023800
 800159c:	40013800 	.word	0x40013800
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40020400 	.word	0x40020400
 80015a8:	40020800 	.word	0x40020800
 80015ac:	40020c00 	.word	0x40020c00
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40021400 	.word	0x40021400
 80015b8:	40021800 	.word	0x40021800
 80015bc:	40021c00 	.word	0x40021c00
 80015c0:	40013c00 	.word	0x40013c00

080015c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	460b      	mov	r3, r1
 80015ce:	807b      	strh	r3, [r7, #2]
 80015d0:	4613      	mov	r3, r2
 80015d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d4:	787b      	ldrb	r3, [r7, #1]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d003      	beq.n	80015e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015da:	887a      	ldrh	r2, [r7, #2]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e0:	e003      	b.n	80015ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	041a      	lsls	r2, r3, #16
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	619a      	str	r2, [r3, #24]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr

080015f6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015f8:	b08f      	sub	sp, #60	; 0x3c
 80015fa:	af0a      	add	r7, sp, #40	; 0x28
 80015fc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e054      	b.n	80016b2 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d106      	bne.n	8001628 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f006 fbee 	bl	8007e04 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2203      	movs	r2, #3
 800162c:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001638:	2b00      	cmp	r3, #0
 800163a:	d102      	bne.n	8001642 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4618      	mov	r0, r3
 8001648:	f003 fc1c 	bl	8004e84 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	603b      	str	r3, [r7, #0]
 8001652:	687e      	ldr	r6, [r7, #4]
 8001654:	466d      	mov	r5, sp
 8001656:	f106 0410 	add.w	r4, r6, #16
 800165a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800165c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001666:	e885 0003 	stmia.w	r5, {r0, r1}
 800166a:	1d33      	adds	r3, r6, #4
 800166c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166e:	6838      	ldr	r0, [r7, #0]
 8001670:	f003 fb96 	bl	8004da0 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2101      	movs	r1, #1
 800167a:	4618      	mov	r0, r3
 800167c:	f003 fc13 	bl	8004ea6 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	687e      	ldr	r6, [r7, #4]
 8001688:	466d      	mov	r5, sp
 800168a:	f106 0410 	add.w	r4, r6, #16
 800168e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001690:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001694:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001696:	e894 0003 	ldmia.w	r4, {r0, r1}
 800169a:	e885 0003 	stmia.w	r5, {r0, r1}
 800169e:	1d33      	adds	r3, r6, #4
 80016a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016a2:	6838      	ldr	r0, [r7, #0]
 80016a4:	f003 fd9c 	bl	80051e0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3714      	adds	r7, #20
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016ba <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80016ba:	b590      	push	{r4, r7, lr}
 80016bc:	b089      	sub	sp, #36	; 0x24
 80016be:	af04      	add	r7, sp, #16
 80016c0:	6078      	str	r0, [r7, #4]
 80016c2:	4608      	mov	r0, r1
 80016c4:	4611      	mov	r1, r2
 80016c6:	461a      	mov	r2, r3
 80016c8:	4603      	mov	r3, r0
 80016ca:	70fb      	strb	r3, [r7, #3]
 80016cc:	460b      	mov	r3, r1
 80016ce:	70bb      	strb	r3, [r7, #2]
 80016d0:	4613      	mov	r3, r2
 80016d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80016da:	2b01      	cmp	r3, #1
 80016dc:	d101      	bne.n	80016e2 <HAL_HCD_HC_Init+0x28>
 80016de:	2302      	movs	r3, #2
 80016e0:	e076      	b.n	80017d0 <HAL_HCD_HC_Init+0x116>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2201      	movs	r2, #1
 80016e6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80016ea:	78fb      	ldrb	r3, [r7, #3]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	212c      	movs	r1, #44	; 0x2c
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	333d      	adds	r3, #61	; 0x3d
 80016f8:	2200      	movs	r2, #0
 80016fa:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016fc:	78fb      	ldrb	r3, [r7, #3]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	212c      	movs	r1, #44	; 0x2c
 8001702:	fb01 f303 	mul.w	r3, r1, r3
 8001706:	4413      	add	r3, r2
 8001708:	3338      	adds	r3, #56	; 0x38
 800170a:	787a      	ldrb	r2, [r7, #1]
 800170c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	212c      	movs	r1, #44	; 0x2c
 8001714:	fb01 f303 	mul.w	r3, r1, r3
 8001718:	4413      	add	r3, r2
 800171a:	3340      	adds	r3, #64	; 0x40
 800171c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800171e:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001720:	78fb      	ldrb	r3, [r7, #3]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	212c      	movs	r1, #44	; 0x2c
 8001726:	fb01 f303 	mul.w	r3, r1, r3
 800172a:	4413      	add	r3, r2
 800172c:	3339      	adds	r3, #57	; 0x39
 800172e:	78fa      	ldrb	r2, [r7, #3]
 8001730:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001732:	78fb      	ldrb	r3, [r7, #3]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	212c      	movs	r1, #44	; 0x2c
 8001738:	fb01 f303 	mul.w	r3, r1, r3
 800173c:	4413      	add	r3, r2
 800173e:	333f      	adds	r3, #63	; 0x3f
 8001740:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001744:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	78ba      	ldrb	r2, [r7, #2]
 800174a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800174e:	b2d0      	uxtb	r0, r2
 8001750:	687a      	ldr	r2, [r7, #4]
 8001752:	212c      	movs	r1, #44	; 0x2c
 8001754:	fb01 f303 	mul.w	r3, r1, r3
 8001758:	4413      	add	r3, r2
 800175a:	333a      	adds	r3, #58	; 0x3a
 800175c:	4602      	mov	r2, r0
 800175e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001760:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001764:	2b00      	cmp	r3, #0
 8001766:	da09      	bge.n	800177c <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001768:	78fb      	ldrb	r3, [r7, #3]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	212c      	movs	r1, #44	; 0x2c
 800176e:	fb01 f303 	mul.w	r3, r1, r3
 8001772:	4413      	add	r3, r2
 8001774:	333b      	adds	r3, #59	; 0x3b
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
 800177a:	e008      	b.n	800178e <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	212c      	movs	r1, #44	; 0x2c
 8001782:	fb01 f303 	mul.w	r3, r1, r3
 8001786:	4413      	add	r3, r2
 8001788:	333b      	adds	r3, #59	; 0x3b
 800178a:	2200      	movs	r2, #0
 800178c:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	212c      	movs	r1, #44	; 0x2c
 8001794:	fb01 f303 	mul.w	r3, r1, r3
 8001798:	4413      	add	r3, r2
 800179a:	333c      	adds	r3, #60	; 0x3c
 800179c:	f897 2020 	ldrb.w	r2, [r7, #32]
 80017a0:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	787c      	ldrb	r4, [r7, #1]
 80017a8:	78ba      	ldrb	r2, [r7, #2]
 80017aa:	78f9      	ldrb	r1, [r7, #3]
 80017ac:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	4623      	mov	r3, r4
 80017be:	f003 fe95 	bl	80054ec <USB_HC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd90      	pop	{r4, r7, pc}

080017d8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017e4:	2300      	movs	r3, #0
 80017e6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d101      	bne.n	80017f6 <HAL_HCD_HC_Halt+0x1e>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e00f      	b.n	8001816 <HAL_HCD_HC_Halt+0x3e>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	78fa      	ldrb	r2, [r7, #3]
 8001804:	4611      	mov	r1, r2
 8001806:	4618      	mov	r0, r3
 8001808:	f004 f8e5 	bl	80059d6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001814:	7bfb      	ldrb	r3, [r7, #15]
}
 8001816:	4618      	mov	r0, r3
 8001818:	3710      	adds	r7, #16
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
	...

08001820 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	4608      	mov	r0, r1
 800182a:	4611      	mov	r1, r2
 800182c:	461a      	mov	r2, r3
 800182e:	4603      	mov	r3, r0
 8001830:	70fb      	strb	r3, [r7, #3]
 8001832:	460b      	mov	r3, r1
 8001834:	70bb      	strb	r3, [r7, #2]
 8001836:	4613      	mov	r3, r2
 8001838:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800183a:	78fb      	ldrb	r3, [r7, #3]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	212c      	movs	r1, #44	; 0x2c
 8001840:	fb01 f303 	mul.w	r3, r1, r3
 8001844:	4413      	add	r3, r2
 8001846:	333b      	adds	r3, #59	; 0x3b
 8001848:	78ba      	ldrb	r2, [r7, #2]
 800184a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	212c      	movs	r1, #44	; 0x2c
 8001852:	fb01 f303 	mul.w	r3, r1, r3
 8001856:	4413      	add	r3, r2
 8001858:	333f      	adds	r3, #63	; 0x3f
 800185a:	787a      	ldrb	r2, [r7, #1]
 800185c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800185e:	7c3b      	ldrb	r3, [r7, #16]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d112      	bne.n	800188a <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	212c      	movs	r1, #44	; 0x2c
 800186a:	fb01 f303 	mul.w	r3, r1, r3
 800186e:	4413      	add	r3, r2
 8001870:	3342      	adds	r3, #66	; 0x42
 8001872:	2203      	movs	r2, #3
 8001874:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001876:	78fb      	ldrb	r3, [r7, #3]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	212c      	movs	r1, #44	; 0x2c
 800187c:	fb01 f303 	mul.w	r3, r1, r3
 8001880:	4413      	add	r3, r2
 8001882:	333d      	adds	r3, #61	; 0x3d
 8001884:	7f3a      	ldrb	r2, [r7, #28]
 8001886:	701a      	strb	r2, [r3, #0]
 8001888:	e008      	b.n	800189c <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800188a:	78fb      	ldrb	r3, [r7, #3]
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	212c      	movs	r1, #44	; 0x2c
 8001890:	fb01 f303 	mul.w	r3, r1, r3
 8001894:	4413      	add	r3, r2
 8001896:	3342      	adds	r3, #66	; 0x42
 8001898:	2202      	movs	r2, #2
 800189a:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800189c:	787b      	ldrb	r3, [r7, #1]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	f200 80c6 	bhi.w	8001a30 <HAL_HCD_HC_SubmitRequest+0x210>
 80018a4:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <HAL_HCD_HC_SubmitRequest+0x8c>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	080018bd 	.word	0x080018bd
 80018b0:	08001a1d 	.word	0x08001a1d
 80018b4:	08001921 	.word	0x08001921
 80018b8:	0800199f 	.word	0x0800199f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80018bc:	7c3b      	ldrb	r3, [r7, #16]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	f040 80b8 	bne.w	8001a34 <HAL_HCD_HC_SubmitRequest+0x214>
 80018c4:	78bb      	ldrb	r3, [r7, #2]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f040 80b4 	bne.w	8001a34 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80018cc:	8b3b      	ldrh	r3, [r7, #24]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d108      	bne.n	80018e4 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018d2:	78fb      	ldrb	r3, [r7, #3]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	212c      	movs	r1, #44	; 0x2c
 80018d8:	fb01 f303 	mul.w	r3, r1, r3
 80018dc:	4413      	add	r3, r2
 80018de:	3355      	adds	r3, #85	; 0x55
 80018e0:	2201      	movs	r2, #1
 80018e2:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018e4:	78fb      	ldrb	r3, [r7, #3]
 80018e6:	687a      	ldr	r2, [r7, #4]
 80018e8:	212c      	movs	r1, #44	; 0x2c
 80018ea:	fb01 f303 	mul.w	r3, r1, r3
 80018ee:	4413      	add	r3, r2
 80018f0:	3355      	adds	r3, #85	; 0x55
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d109      	bne.n	800190c <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018f8:	78fb      	ldrb	r3, [r7, #3]
 80018fa:	687a      	ldr	r2, [r7, #4]
 80018fc:	212c      	movs	r1, #44	; 0x2c
 80018fe:	fb01 f303 	mul.w	r3, r1, r3
 8001902:	4413      	add	r3, r2
 8001904:	3342      	adds	r3, #66	; 0x42
 8001906:	2200      	movs	r2, #0
 8001908:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800190a:	e093      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800190c:	78fb      	ldrb	r3, [r7, #3]
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	212c      	movs	r1, #44	; 0x2c
 8001912:	fb01 f303 	mul.w	r3, r1, r3
 8001916:	4413      	add	r3, r2
 8001918:	3342      	adds	r3, #66	; 0x42
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
      break;
 800191e:	e089      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001920:	78bb      	ldrb	r3, [r7, #2]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d11d      	bne.n	8001962 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	3355      	adds	r3, #85	; 0x55
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d109      	bne.n	800194e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	212c      	movs	r1, #44	; 0x2c
 8001940:	fb01 f303 	mul.w	r3, r1, r3
 8001944:	4413      	add	r3, r2
 8001946:	3342      	adds	r3, #66	; 0x42
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800194c:	e073      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	212c      	movs	r1, #44	; 0x2c
 8001954:	fb01 f303 	mul.w	r3, r1, r3
 8001958:	4413      	add	r3, r2
 800195a:	3342      	adds	r3, #66	; 0x42
 800195c:	2202      	movs	r2, #2
 800195e:	701a      	strb	r2, [r3, #0]
      break;
 8001960:	e069      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001962:	78fb      	ldrb	r3, [r7, #3]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	212c      	movs	r1, #44	; 0x2c
 8001968:	fb01 f303 	mul.w	r3, r1, r3
 800196c:	4413      	add	r3, r2
 800196e:	3354      	adds	r3, #84	; 0x54
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	212c      	movs	r1, #44	; 0x2c
 800197c:	fb01 f303 	mul.w	r3, r1, r3
 8001980:	4413      	add	r3, r2
 8001982:	3342      	adds	r3, #66	; 0x42
 8001984:	2200      	movs	r2, #0
 8001986:	701a      	strb	r2, [r3, #0]
      break;
 8001988:	e055      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800198a:	78fb      	ldrb	r3, [r7, #3]
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	212c      	movs	r1, #44	; 0x2c
 8001990:	fb01 f303 	mul.w	r3, r1, r3
 8001994:	4413      	add	r3, r2
 8001996:	3342      	adds	r3, #66	; 0x42
 8001998:	2202      	movs	r2, #2
 800199a:	701a      	strb	r2, [r3, #0]
      break;
 800199c:	e04b      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800199e:	78bb      	ldrb	r3, [r7, #2]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d11d      	bne.n	80019e0 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	212c      	movs	r1, #44	; 0x2c
 80019aa:	fb01 f303 	mul.w	r3, r1, r3
 80019ae:	4413      	add	r3, r2
 80019b0:	3355      	adds	r3, #85	; 0x55
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d109      	bne.n	80019cc <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019b8:	78fb      	ldrb	r3, [r7, #3]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	212c      	movs	r1, #44	; 0x2c
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	3342      	adds	r3, #66	; 0x42
 80019c6:	2200      	movs	r2, #0
 80019c8:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019ca:	e034      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	212c      	movs	r1, #44	; 0x2c
 80019d2:	fb01 f303 	mul.w	r3, r1, r3
 80019d6:	4413      	add	r3, r2
 80019d8:	3342      	adds	r3, #66	; 0x42
 80019da:	2202      	movs	r2, #2
 80019dc:	701a      	strb	r2, [r3, #0]
      break;
 80019de:	e02a      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019e0:	78fb      	ldrb	r3, [r7, #3]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	212c      	movs	r1, #44	; 0x2c
 80019e6:	fb01 f303 	mul.w	r3, r1, r3
 80019ea:	4413      	add	r3, r2
 80019ec:	3354      	adds	r3, #84	; 0x54
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d109      	bne.n	8001a08 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019f4:	78fb      	ldrb	r3, [r7, #3]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	212c      	movs	r1, #44	; 0x2c
 80019fa:	fb01 f303 	mul.w	r3, r1, r3
 80019fe:	4413      	add	r3, r2
 8001a00:	3342      	adds	r3, #66	; 0x42
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]
      break;
 8001a06:	e016      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	212c      	movs	r1, #44	; 0x2c
 8001a0e:	fb01 f303 	mul.w	r3, r1, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	3342      	adds	r3, #66	; 0x42
 8001a16:	2202      	movs	r2, #2
 8001a18:	701a      	strb	r2, [r3, #0]
      break;
 8001a1a:	e00c      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a1c:	78fb      	ldrb	r3, [r7, #3]
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	212c      	movs	r1, #44	; 0x2c
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	4413      	add	r3, r2
 8001a28:	3342      	adds	r3, #66	; 0x42
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
      break;
 8001a2e:	e002      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001a30:	bf00      	nop
 8001a32:	e000      	b.n	8001a36 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001a34:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a36:	78fb      	ldrb	r3, [r7, #3]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	212c      	movs	r1, #44	; 0x2c
 8001a3c:	fb01 f303 	mul.w	r3, r1, r3
 8001a40:	4413      	add	r3, r2
 8001a42:	3344      	adds	r3, #68	; 0x44
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	8b3a      	ldrh	r2, [r7, #24]
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	202c      	movs	r0, #44	; 0x2c
 8001a50:	fb00 f303 	mul.w	r3, r0, r3
 8001a54:	440b      	add	r3, r1
 8001a56:	334c      	adds	r3, #76	; 0x4c
 8001a58:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a5a:	78fb      	ldrb	r3, [r7, #3]
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	212c      	movs	r1, #44	; 0x2c
 8001a60:	fb01 f303 	mul.w	r3, r1, r3
 8001a64:	4413      	add	r3, r2
 8001a66:	3360      	adds	r3, #96	; 0x60
 8001a68:	2200      	movs	r2, #0
 8001a6a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a6c:	78fb      	ldrb	r3, [r7, #3]
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	212c      	movs	r1, #44	; 0x2c
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	4413      	add	r3, r2
 8001a78:	3350      	adds	r3, #80	; 0x50
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	3339      	adds	r3, #57	; 0x39
 8001a8c:	78fa      	ldrb	r2, [r7, #3]
 8001a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	212c      	movs	r1, #44	; 0x2c
 8001a96:	fb01 f303 	mul.w	r3, r1, r3
 8001a9a:	4413      	add	r3, r2
 8001a9c:	3361      	adds	r3, #97	; 0x61
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6818      	ldr	r0, [r3, #0]
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	222c      	movs	r2, #44	; 0x2c
 8001aaa:	fb02 f303 	mul.w	r3, r2, r3
 8001aae:	3338      	adds	r3, #56	; 0x38
 8001ab0:	687a      	ldr	r2, [r7, #4]
 8001ab2:	18d1      	adds	r1, r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691b      	ldr	r3, [r3, #16]
 8001ab8:	b2db      	uxtb	r3, r3
 8001aba:	461a      	mov	r2, r3
 8001abc:	f003 fe38 	bl	8005730 <USB_HC_StartXfer>
 8001ac0:	4603      	mov	r3, r0
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	3708      	adds	r7, #8
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop

08001acc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	f003 fb39 	bl	800515a <USB_GetMode>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	f040 80f6 	bne.w	8001cdc <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f003 fb1d 	bl	8005134 <USB_ReadInterrupts>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 80ec 	beq.w	8001cda <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4618      	mov	r0, r3
 8001b08:	f003 fb14 	bl	8005134 <USB_ReadInterrupts>
 8001b0c:	4603      	mov	r3, r0
 8001b0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b12:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b16:	d104      	bne.n	8001b22 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b20:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 fb04 	bl	8005134 <USB_ReadInterrupts>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b36:	d104      	bne.n	8001b42 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b40:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4618      	mov	r0, r3
 8001b48:	f003 faf4 	bl	8005134 <USB_ReadInterrupts>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b52:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b56:	d104      	bne.n	8001b62 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b60:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 fae4 	bl	8005134 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d103      	bne.n	8001b7e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f003 fad6 	bl	8005134 <USB_ReadInterrupts>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b92:	d11c      	bne.n	8001bce <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001b9c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0301 	and.w	r3, r3, #1
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d10f      	bne.n	8001bce <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001bae:	2110      	movs	r1, #16
 8001bb0:	6938      	ldr	r0, [r7, #16]
 8001bb2:	f003 f9c5 	bl	8004f40 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001bb6:	6938      	ldr	r0, [r7, #16]
 8001bb8:	f003 f9f6 	bl	8004fa8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	2101      	movs	r1, #1
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f003 fbcc 	bl	8005360 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f006 f999 	bl	8007f00 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f003 faae 	bl	8005134 <USB_ReadInterrupts>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be2:	d102      	bne.n	8001bea <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f001 f89e 	bl	8002d26 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f003 faa0 	bl	8005134 <USB_ReadInterrupts>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b08      	cmp	r3, #8
 8001bfc:	d106      	bne.n	8001c0c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f006 f962 	bl	8007ec8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2208      	movs	r2, #8
 8001c0a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4618      	mov	r0, r3
 8001c12:	f003 fa8f 	bl	8005134 <USB_ReadInterrupts>
 8001c16:	4603      	mov	r3, r0
 8001c18:	f003 0310 	and.w	r3, r3, #16
 8001c1c:	2b10      	cmp	r3, #16
 8001c1e:	d101      	bne.n	8001c24 <HAL_HCD_IRQHandler+0x158>
 8001c20:	2301      	movs	r3, #1
 8001c22:	e000      	b.n	8001c26 <HAL_HCD_IRQHandler+0x15a>
 8001c24:	2300      	movs	r3, #0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d012      	beq.n	8001c50 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0210 	bic.w	r2, r2, #16
 8001c38:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 ffa1 	bl	8002b82 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	699a      	ldr	r2, [r3, #24]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f042 0210 	orr.w	r2, r2, #16
 8001c4e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 fa6d 	bl	8005134 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c64:	d13a      	bne.n	8001cdc <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f003 fea2 	bl	80059b4 <USB_HC_ReadInterrupt>
 8001c70:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
 8001c76:	e025      	b.n	8001cc4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	68ba      	ldr	r2, [r7, #8]
 8001c80:	fa22 f303 	lsr.w	r3, r2, r3
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d018      	beq.n	8001cbe <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	015a      	lsls	r2, r3, #5
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	4413      	add	r3, r2
 8001c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ca2:	d106      	bne.n	8001cb2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	b2db      	uxtb	r3, r3
 8001ca8:	4619      	mov	r1, r3
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f000 f8ab 	bl	8001e06 <HCD_HC_IN_IRQHandler>
 8001cb0:	e005      	b.n	8001cbe <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f000 fbf9 	bl	80024b0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	617b      	str	r3, [r7, #20]
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	d3d4      	bcc.n	8001c78 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd6:	615a      	str	r2, [r3, #20]
 8001cd8:	e000      	b.n	8001cdc <HAL_HCD_IRQHandler+0x210>
      return;
 8001cda:	bf00      	nop
    }
  }
}
 8001cdc:	3718      	adds	r7, #24
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}

08001ce2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ce2:	b580      	push	{r7, lr}
 8001ce4:	b082      	sub	sp, #8
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_HCD_Start+0x16>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e013      	b.n	8001d20 <HAL_HCD_Start+0x3e>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fb8e 	bl	8005428 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f003 f8a6 	bl	8004e62 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d101      	bne.n	8001d3e <HAL_HCD_Stop+0x16>
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	e00d      	b.n	8001d5a <HAL_HCD_Stop+0x32>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2201      	movs	r2, #1
 8001d42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 ff7c 	bl	8005c48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3708      	adds	r7, #8
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd80      	pop	{r7, pc}

08001d62 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d62:	b580      	push	{r7, lr}
 8001d64:	b082      	sub	sp, #8
 8001d66:	af00      	add	r7, sp, #0
 8001d68:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f003 fb30 	bl	80053d4 <USB_ResetPort>
 8001d74:	4603      	mov	r3, r0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
 8001d86:	460b      	mov	r3, r1
 8001d88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d8a:	78fb      	ldrb	r3, [r7, #3]
 8001d8c:	687a      	ldr	r2, [r7, #4]
 8001d8e:	212c      	movs	r1, #44	; 0x2c
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	4413      	add	r3, r2
 8001d96:	3360      	adds	r3, #96	; 0x60
 8001d98:	781b      	ldrb	r3, [r3, #0]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	687a      	ldr	r2, [r7, #4]
 8001db6:	212c      	movs	r1, #44	; 0x2c
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3350      	adds	r3, #80	; 0x50
 8001dc0:	681b      	ldr	r3, [r3, #0]
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b082      	sub	sp, #8
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f003 fb74 	bl	80054c8 <USB_GetCurrentFrame>
 8001de0:	4603      	mov	r3, r0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3708      	adds	r7, #8
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}

08001dea <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
 8001df0:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fb4f 	bl	800549a <USB_GetHostSpeed>
 8001dfc:	4603      	mov	r3, r0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}

08001e06 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e06:	b580      	push	{r7, lr}
 8001e08:	b086      	sub	sp, #24
 8001e0a:	af00      	add	r7, sp, #0
 8001e0c:	6078      	str	r0, [r7, #4]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e1c:	78fb      	ldrb	r3, [r7, #3]
 8001e1e:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	015a      	lsls	r2, r3, #5
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4413      	add	r3, r2
 8001e28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	2b04      	cmp	r3, #4
 8001e34:	d11a      	bne.n	8001e6c <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	015a      	lsls	r2, r3, #5
 8001e3a:	693b      	ldr	r3, [r7, #16]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e42:	461a      	mov	r2, r3
 8001e44:	2304      	movs	r3, #4
 8001e46:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	212c      	movs	r1, #44	; 0x2c
 8001e4e:	fb01 f303 	mul.w	r3, r1, r3
 8001e52:	4413      	add	r3, r2
 8001e54:	3361      	adds	r3, #97	; 0x61
 8001e56:	2206      	movs	r2, #6
 8001e58:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68fa      	ldr	r2, [r7, #12]
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	4611      	mov	r1, r2
 8001e64:	4618      	mov	r0, r3
 8001e66:	f003 fdb6 	bl	80059d6 <USB_HC_Halt>
 8001e6a:	e0af      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e82:	d11b      	bne.n	8001ebc <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	461a      	mov	r2, r3
 8001e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	212c      	movs	r1, #44	; 0x2c
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	3361      	adds	r3, #97	; 0x61
 8001ea6:	2207      	movs	r2, #7
 8001ea8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68fa      	ldr	r2, [r7, #12]
 8001eb0:	b2d2      	uxtb	r2, r2
 8001eb2:	4611      	mov	r1, r2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 fd8e 	bl	80059d6 <USB_HC_Halt>
 8001eba:	e087      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	015a      	lsls	r2, r3, #5
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 0320 	and.w	r3, r3, #32
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d109      	bne.n	8001ee6 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	015a      	lsls	r2, r3, #5
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4413      	add	r3, r2
 8001eda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ede:	461a      	mov	r2, r3
 8001ee0:	2320      	movs	r3, #32
 8001ee2:	6093      	str	r3, [r2, #8]
 8001ee4:	e072      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	015a      	lsls	r2, r3, #5
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	4413      	add	r3, r2
 8001eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d11a      	bne.n	8001f32 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	015a      	lsls	r2, r3, #5
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	4413      	add	r3, r2
 8001f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2308      	movs	r3, #8
 8001f0c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	212c      	movs	r1, #44	; 0x2c
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3361      	adds	r3, #97	; 0x61
 8001f1c:	2205      	movs	r2, #5
 8001f1e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	b2d2      	uxtb	r2, r2
 8001f28:	4611      	mov	r1, r2
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f003 fd53 	bl	80059d6 <USB_HC_Halt>
 8001f30:	e04c      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	015a      	lsls	r2, r3, #5
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	4413      	add	r3, r2
 8001f3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f48:	d11b      	bne.n	8001f82 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f56:	461a      	mov	r2, r3
 8001f58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f5c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	212c      	movs	r1, #44	; 0x2c
 8001f64:	fb01 f303 	mul.w	r3, r1, r3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3361      	adds	r3, #97	; 0x61
 8001f6c:	2208      	movs	r2, #8
 8001f6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68fa      	ldr	r2, [r7, #12]
 8001f76:	b2d2      	uxtb	r2, r2
 8001f78:	4611      	mov	r1, r2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f003 fd2b 	bl	80059d6 <USB_HC_Halt>
 8001f80:	e024      	b.n	8001fcc <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f94:	2b80      	cmp	r3, #128	; 0x80
 8001f96:	d119      	bne.n	8001fcc <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	015a      	lsls	r2, r3, #5
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2380      	movs	r3, #128	; 0x80
 8001fa8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	212c      	movs	r1, #44	; 0x2c
 8001fb0:	fb01 f303 	mul.w	r3, r1, r3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3361      	adds	r3, #97	; 0x61
 8001fb8:	2206      	movs	r2, #6
 8001fba:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	68fa      	ldr	r2, [r7, #12]
 8001fc2:	b2d2      	uxtb	r2, r2
 8001fc4:	4611      	mov	r1, r2
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fd05 	bl	80059d6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	015a      	lsls	r2, r3, #5
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe2:	d112      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68fa      	ldr	r2, [r7, #12]
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	4611      	mov	r1, r2
 8001fee:	4618      	mov	r0, r3
 8001ff0:	f003 fcf1 	bl	80059d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	015a      	lsls	r2, r3, #5
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	4413      	add	r3, r2
 8001ffc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002000:	461a      	mov	r2, r3
 8002002:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002006:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002008:	e24e      	b.n	80024a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f003 0301 	and.w	r3, r3, #1
 800201c:	2b01      	cmp	r3, #1
 800201e:	f040 80df 	bne.w	80021e0 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d019      	beq.n	800205e <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	212c      	movs	r1, #44	; 0x2c
 8002030:	fb01 f303 	mul.w	r3, r1, r3
 8002034:	4413      	add	r3, r2
 8002036:	3348      	adds	r3, #72	; 0x48
 8002038:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	0159      	lsls	r1, r3, #5
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	440b      	add	r3, r1
 8002042:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002046:	691b      	ldr	r3, [r3, #16]
 8002048:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800204c:	1ad2      	subs	r2, r2, r3
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	202c      	movs	r0, #44	; 0x2c
 8002054:	fb00 f303 	mul.w	r3, r0, r3
 8002058:	440b      	add	r3, r1
 800205a:	3350      	adds	r3, #80	; 0x50
 800205c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	212c      	movs	r1, #44	; 0x2c
 8002064:	fb01 f303 	mul.w	r3, r1, r3
 8002068:	4413      	add	r3, r2
 800206a:	3361      	adds	r3, #97	; 0x61
 800206c:	2201      	movs	r2, #1
 800206e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	212c      	movs	r1, #44	; 0x2c
 8002076:	fb01 f303 	mul.w	r3, r1, r3
 800207a:	4413      	add	r3, r2
 800207c:	335c      	adds	r3, #92	; 0x5c
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	015a      	lsls	r2, r3, #5
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4413      	add	r3, r2
 800208a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800208e:	461a      	mov	r2, r3
 8002090:	2301      	movs	r3, #1
 8002092:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002094:	687a      	ldr	r2, [r7, #4]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	212c      	movs	r1, #44	; 0x2c
 800209a:	fb01 f303 	mul.w	r3, r1, r3
 800209e:	4413      	add	r3, r2
 80020a0:	333f      	adds	r3, #63	; 0x3f
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	333f      	adds	r3, #63	; 0x3f
 80020b6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d111      	bne.n	80020e0 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	68fa      	ldr	r2, [r7, #12]
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	4611      	mov	r1, r2
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fc85 	bl	80059d6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	015a      	lsls	r2, r3, #5
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4413      	add	r3, r2
 80020d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020d8:	461a      	mov	r2, r3
 80020da:	2310      	movs	r3, #16
 80020dc:	6093      	str	r3, [r2, #8]
 80020de:	e03a      	b.n	8002156 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	212c      	movs	r1, #44	; 0x2c
 80020e6:	fb01 f303 	mul.w	r3, r1, r3
 80020ea:	4413      	add	r3, r2
 80020ec:	333f      	adds	r3, #63	; 0x3f
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d009      	beq.n	8002108 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80020f4:	687a      	ldr	r2, [r7, #4]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	212c      	movs	r1, #44	; 0x2c
 80020fa:	fb01 f303 	mul.w	r3, r1, r3
 80020fe:	4413      	add	r3, r2
 8002100:	333f      	adds	r3, #63	; 0x3f
 8002102:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8002104:	2b01      	cmp	r3, #1
 8002106:	d126      	bne.n	8002156 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	015a      	lsls	r2, r3, #5
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4413      	add	r3, r2
 8002110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	0151      	lsls	r1, r2, #5
 800211a:	693a      	ldr	r2, [r7, #16]
 800211c:	440a      	add	r2, r1
 800211e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002122:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002126:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	212c      	movs	r1, #44	; 0x2c
 800212e:	fb01 f303 	mul.w	r3, r1, r3
 8002132:	4413      	add	r3, r2
 8002134:	3360      	adds	r3, #96	; 0x60
 8002136:	2201      	movs	r2, #1
 8002138:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	b2d9      	uxtb	r1, r3
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	202c      	movs	r0, #44	; 0x2c
 8002144:	fb00 f303 	mul.w	r3, r0, r3
 8002148:	4413      	add	r3, r2
 800214a:	3360      	adds	r3, #96	; 0x60
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	461a      	mov	r2, r3
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f005 fee3 	bl	8007f1c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d12b      	bne.n	80021b6 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	212c      	movs	r1, #44	; 0x2c
 8002164:	fb01 f303 	mul.w	r3, r1, r3
 8002168:	4413      	add	r3, r2
 800216a:	3348      	adds	r3, #72	; 0x48
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	202c      	movs	r0, #44	; 0x2c
 8002174:	fb00 f202 	mul.w	r2, r0, r2
 8002178:	440a      	add	r2, r1
 800217a:	3240      	adds	r2, #64	; 0x40
 800217c:	8812      	ldrh	r2, [r2, #0]
 800217e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	f000 818e 	beq.w	80024a8 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	212c      	movs	r1, #44	; 0x2c
 8002192:	fb01 f303 	mul.w	r3, r1, r3
 8002196:	4413      	add	r3, r2
 8002198:	3354      	adds	r3, #84	; 0x54
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	f083 0301 	eor.w	r3, r3, #1
 80021a0:	b2d8      	uxtb	r0, r3
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3354      	adds	r3, #84	; 0x54
 80021b0:	4602      	mov	r2, r0
 80021b2:	701a      	strb	r2, [r3, #0]
}
 80021b4:	e178      	b.n	80024a8 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	212c      	movs	r1, #44	; 0x2c
 80021bc:	fb01 f303 	mul.w	r3, r1, r3
 80021c0:	4413      	add	r3, r2
 80021c2:	3354      	adds	r3, #84	; 0x54
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	f083 0301 	eor.w	r3, r3, #1
 80021ca:	b2d8      	uxtb	r0, r3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	212c      	movs	r1, #44	; 0x2c
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	4413      	add	r3, r2
 80021d8:	3354      	adds	r3, #84	; 0x54
 80021da:	4602      	mov	r2, r0
 80021dc:	701a      	strb	r2, [r3, #0]
}
 80021de:	e163      	b.n	80024a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	f040 80f6 	bne.w	80023e4 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80021f8:	687a      	ldr	r2, [r7, #4]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3361      	adds	r3, #97	; 0x61
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b01      	cmp	r3, #1
 800220a:	d109      	bne.n	8002220 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3360      	adds	r3, #96	; 0x60
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
 800221e:	e0c9      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3361      	adds	r3, #97	; 0x61
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b05      	cmp	r3, #5
 8002232:	d109      	bne.n	8002248 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3360      	adds	r3, #96	; 0x60
 8002242:	2205      	movs	r2, #5
 8002244:	701a      	strb	r2, [r3, #0]
 8002246:	e0b5      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	212c      	movs	r1, #44	; 0x2c
 800224e:	fb01 f303 	mul.w	r3, r1, r3
 8002252:	4413      	add	r3, r2
 8002254:	3361      	adds	r3, #97	; 0x61
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b06      	cmp	r3, #6
 800225a:	d009      	beq.n	8002270 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	212c      	movs	r1, #44	; 0x2c
 8002262:	fb01 f303 	mul.w	r3, r1, r3
 8002266:	4413      	add	r3, r2
 8002268:	3361      	adds	r3, #97	; 0x61
 800226a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800226c:	2b08      	cmp	r3, #8
 800226e:	d150      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	212c      	movs	r1, #44	; 0x2c
 8002276:	fb01 f303 	mul.w	r3, r1, r3
 800227a:	4413      	add	r3, r2
 800227c:	335c      	adds	r3, #92	; 0x5c
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	6879      	ldr	r1, [r7, #4]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	202c      	movs	r0, #44	; 0x2c
 8002288:	fb00 f303 	mul.w	r3, r0, r3
 800228c:	440b      	add	r3, r1
 800228e:	335c      	adds	r3, #92	; 0x5c
 8002290:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002292:	687a      	ldr	r2, [r7, #4]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	212c      	movs	r1, #44	; 0x2c
 8002298:	fb01 f303 	mul.w	r3, r1, r3
 800229c:	4413      	add	r3, r2
 800229e:	335c      	adds	r3, #92	; 0x5c
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d912      	bls.n	80022cc <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	212c      	movs	r1, #44	; 0x2c
 80022ac:	fb01 f303 	mul.w	r3, r1, r3
 80022b0:	4413      	add	r3, r2
 80022b2:	335c      	adds	r3, #92	; 0x5c
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	212c      	movs	r1, #44	; 0x2c
 80022be:	fb01 f303 	mul.w	r3, r1, r3
 80022c2:	4413      	add	r3, r2
 80022c4:	3360      	adds	r3, #96	; 0x60
 80022c6:	2204      	movs	r2, #4
 80022c8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80022ca:	e073      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	212c      	movs	r1, #44	; 0x2c
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	3360      	adds	r3, #96	; 0x60
 80022da:	2202      	movs	r2, #2
 80022dc:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	015a      	lsls	r2, r3, #5
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4413      	add	r3, r2
 80022e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80022f4:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80022fc:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	015a      	lsls	r2, r3, #5
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4413      	add	r3, r2
 8002306:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800230a:	461a      	mov	r2, r3
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002310:	e050      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002312:	687a      	ldr	r2, [r7, #4]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	212c      	movs	r1, #44	; 0x2c
 8002318:	fb01 f303 	mul.w	r3, r1, r3
 800231c:	4413      	add	r3, r2
 800231e:	3361      	adds	r3, #97	; 0x61
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d122      	bne.n	800236c <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002326:	687a      	ldr	r2, [r7, #4]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	212c      	movs	r1, #44	; 0x2c
 800232c:	fb01 f303 	mul.w	r3, r1, r3
 8002330:	4413      	add	r3, r2
 8002332:	3360      	adds	r3, #96	; 0x60
 8002334:	2202      	movs	r2, #2
 8002336:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	015a      	lsls	r2, r3, #5
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	4413      	add	r3, r2
 8002340:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800234e:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002356:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	015a      	lsls	r2, r3, #5
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	4413      	add	r3, r2
 8002360:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002364:	461a      	mov	r2, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	e023      	b.n	80023b4 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800236c:	687a      	ldr	r2, [r7, #4]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	212c      	movs	r1, #44	; 0x2c
 8002372:	fb01 f303 	mul.w	r3, r1, r3
 8002376:	4413      	add	r3, r2
 8002378:	3361      	adds	r3, #97	; 0x61
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b07      	cmp	r3, #7
 800237e:	d119      	bne.n	80023b4 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	212c      	movs	r1, #44	; 0x2c
 8002386:	fb01 f303 	mul.w	r3, r1, r3
 800238a:	4413      	add	r3, r2
 800238c:	335c      	adds	r3, #92	; 0x5c
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	6879      	ldr	r1, [r7, #4]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	202c      	movs	r0, #44	; 0x2c
 8002398:	fb00 f303 	mul.w	r3, r0, r3
 800239c:	440b      	add	r3, r1
 800239e:	335c      	adds	r3, #92	; 0x5c
 80023a0:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	212c      	movs	r1, #44	; 0x2c
 80023a8:	fb01 f303 	mul.w	r3, r1, r3
 80023ac:	4413      	add	r3, r2
 80023ae:	3360      	adds	r3, #96	; 0x60
 80023b0:	2204      	movs	r2, #4
 80023b2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c0:	461a      	mov	r2, r3
 80023c2:	2302      	movs	r3, #2
 80023c4:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	b2d9      	uxtb	r1, r3
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	202c      	movs	r0, #44	; 0x2c
 80023d0:	fb00 f303 	mul.w	r3, r0, r3
 80023d4:	4413      	add	r3, r2
 80023d6:	3360      	adds	r3, #96	; 0x60
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f005 fd9d 	bl	8007f1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80023e2:	e061      	b.n	80024a8 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	015a      	lsls	r2, r3, #5
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4413      	add	r3, r2
 80023ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b10      	cmp	r3, #16
 80023f8:	d156      	bne.n	80024a8 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	212c      	movs	r1, #44	; 0x2c
 8002400:	fb01 f303 	mul.w	r3, r1, r3
 8002404:	4413      	add	r3, r2
 8002406:	333f      	adds	r3, #63	; 0x3f
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b03      	cmp	r3, #3
 800240c:	d111      	bne.n	8002432 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800240e:	687a      	ldr	r2, [r7, #4]
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	212c      	movs	r1, #44	; 0x2c
 8002414:	fb01 f303 	mul.w	r3, r1, r3
 8002418:	4413      	add	r3, r2
 800241a:	335c      	adds	r3, #92	; 0x5c
 800241c:	2200      	movs	r2, #0
 800241e:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	b2d2      	uxtb	r2, r2
 8002428:	4611      	mov	r1, r2
 800242a:	4618      	mov	r0, r3
 800242c:	f003 fad3 	bl	80059d6 <USB_HC_Halt>
 8002430:	e031      	b.n	8002496 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	212c      	movs	r1, #44	; 0x2c
 8002438:	fb01 f303 	mul.w	r3, r1, r3
 800243c:	4413      	add	r3, r2
 800243e:	333f      	adds	r3, #63	; 0x3f
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d009      	beq.n	800245a <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	212c      	movs	r1, #44	; 0x2c
 800244c:	fb01 f303 	mul.w	r3, r1, r3
 8002450:	4413      	add	r3, r2
 8002452:	333f      	adds	r3, #63	; 0x3f
 8002454:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002456:	2b02      	cmp	r3, #2
 8002458:	d11d      	bne.n	8002496 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	212c      	movs	r1, #44	; 0x2c
 8002460:	fb01 f303 	mul.w	r3, r1, r3
 8002464:	4413      	add	r3, r2
 8002466:	335c      	adds	r3, #92	; 0x5c
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d110      	bne.n	8002496 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3361      	adds	r3, #97	; 0x61
 8002482:	2203      	movs	r2, #3
 8002484:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	b2d2      	uxtb	r2, r2
 800248e:	4611      	mov	r1, r2
 8002490:	4618      	mov	r0, r3
 8002492:	f003 faa0 	bl	80059d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4413      	add	r3, r2
 800249e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a2:	461a      	mov	r2, r3
 80024a4:	2310      	movs	r3, #16
 80024a6:	6093      	str	r3, [r2, #8]
}
 80024a8:	bf00      	nop
 80024aa:	3718      	adds	r7, #24
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}

080024b0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	460b      	mov	r3, r1
 80024ba:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80024c6:	78fb      	ldrb	r3, [r7, #3]
 80024c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	015a      	lsls	r2, r3, #5
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	4413      	add	r3, r2
 80024d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b04      	cmp	r3, #4
 80024de:	d11a      	bne.n	8002516 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	015a      	lsls	r2, r3, #5
 80024e4:	69bb      	ldr	r3, [r7, #24]
 80024e6:	4413      	add	r3, r2
 80024e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ec:	461a      	mov	r2, r3
 80024ee:	2304      	movs	r3, #4
 80024f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	212c      	movs	r1, #44	; 0x2c
 80024f8:	fb01 f303 	mul.w	r3, r1, r3
 80024fc:	4413      	add	r3, r2
 80024fe:	3361      	adds	r3, #97	; 0x61
 8002500:	2206      	movs	r2, #6
 8002502:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	4611      	mov	r1, r2
 800250e:	4618      	mov	r0, r3
 8002510:	f003 fa61 	bl	80059d6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002514:	e331      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002516:	697b      	ldr	r3, [r7, #20]
 8002518:	015a      	lsls	r2, r3, #5
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	4413      	add	r3, r2
 800251e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b20      	cmp	r3, #32
 800252a:	d12e      	bne.n	800258a <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69bb      	ldr	r3, [r7, #24]
 8002532:	4413      	add	r3, r2
 8002534:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002538:	461a      	mov	r2, r3
 800253a:	2320      	movs	r3, #32
 800253c:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	212c      	movs	r1, #44	; 0x2c
 8002544:	fb01 f303 	mul.w	r3, r1, r3
 8002548:	4413      	add	r3, r2
 800254a:	333d      	adds	r3, #61	; 0x3d
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b01      	cmp	r3, #1
 8002550:	f040 8313 	bne.w	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	212c      	movs	r1, #44	; 0x2c
 800255a:	fb01 f303 	mul.w	r3, r1, r3
 800255e:	4413      	add	r3, r2
 8002560:	333d      	adds	r3, #61	; 0x3d
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	212c      	movs	r1, #44	; 0x2c
 800256c:	fb01 f303 	mul.w	r3, r1, r3
 8002570:	4413      	add	r3, r2
 8002572:	3360      	adds	r3, #96	; 0x60
 8002574:	2202      	movs	r2, #2
 8002576:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	697a      	ldr	r2, [r7, #20]
 800257e:	b2d2      	uxtb	r2, r2
 8002580:	4611      	mov	r1, r2
 8002582:	4618      	mov	r0, r3
 8002584:	f003 fa27 	bl	80059d6 <USB_HC_Halt>
}
 8002588:	e2f7      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800258a:	697b      	ldr	r3, [r7, #20]
 800258c:	015a      	lsls	r2, r3, #5
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	4413      	add	r3, r2
 8002592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025a0:	d112      	bne.n	80025c8 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	015a      	lsls	r2, r3, #5
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ae:	461a      	mov	r2, r3
 80025b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025b4:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	697a      	ldr	r2, [r7, #20]
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	4611      	mov	r1, r2
 80025c0:	4618      	mov	r0, r3
 80025c2:	f003 fa08 	bl	80059d6 <USB_HC_Halt>
}
 80025c6:	e2d8      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	015a      	lsls	r2, r3, #5
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	4413      	add	r3, r2
 80025d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d4:	689b      	ldr	r3, [r3, #8]
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d140      	bne.n	8002660 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	212c      	movs	r1, #44	; 0x2c
 80025e4:	fb01 f303 	mul.w	r3, r1, r3
 80025e8:	4413      	add	r3, r2
 80025ea:	335c      	adds	r3, #92	; 0x5c
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80025f0:	697b      	ldr	r3, [r7, #20]
 80025f2:	015a      	lsls	r2, r3, #5
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	4413      	add	r3, r2
 80025f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d111      	bne.n	800262a <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002606:	687a      	ldr	r2, [r7, #4]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	212c      	movs	r1, #44	; 0x2c
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	333d      	adds	r3, #61	; 0x3d
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	015a      	lsls	r2, r3, #5
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	4413      	add	r3, r2
 8002620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002624:	461a      	mov	r2, r3
 8002626:	2340      	movs	r3, #64	; 0x40
 8002628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800262a:	697b      	ldr	r3, [r7, #20]
 800262c:	015a      	lsls	r2, r3, #5
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	4413      	add	r3, r2
 8002632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002636:	461a      	mov	r2, r3
 8002638:	2301      	movs	r3, #1
 800263a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 800263c:	687a      	ldr	r2, [r7, #4]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	212c      	movs	r1, #44	; 0x2c
 8002642:	fb01 f303 	mul.w	r3, r1, r3
 8002646:	4413      	add	r3, r2
 8002648:	3361      	adds	r3, #97	; 0x61
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	697a      	ldr	r2, [r7, #20]
 8002654:	b2d2      	uxtb	r2, r2
 8002656:	4611      	mov	r1, r2
 8002658:	4618      	mov	r0, r3
 800265a:	f003 f9bc 	bl	80059d6 <USB_HC_Halt>
}
 800265e:	e28c      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	015a      	lsls	r2, r3, #5
 8002664:	69bb      	ldr	r3, [r7, #24]
 8002666:	4413      	add	r3, r2
 8002668:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800266c:	689b      	ldr	r3, [r3, #8]
 800266e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002672:	2b40      	cmp	r3, #64	; 0x40
 8002674:	d12c      	bne.n	80026d0 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002676:	687a      	ldr	r2, [r7, #4]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	212c      	movs	r1, #44	; 0x2c
 800267c:	fb01 f303 	mul.w	r3, r1, r3
 8002680:	4413      	add	r3, r2
 8002682:	3361      	adds	r3, #97	; 0x61
 8002684:	2204      	movs	r2, #4
 8002686:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	212c      	movs	r1, #44	; 0x2c
 800268e:	fb01 f303 	mul.w	r3, r1, r3
 8002692:	4413      	add	r3, r2
 8002694:	333d      	adds	r3, #61	; 0x3d
 8002696:	2201      	movs	r2, #1
 8002698:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	212c      	movs	r1, #44	; 0x2c
 80026a0:	fb01 f303 	mul.w	r3, r1, r3
 80026a4:	4413      	add	r3, r2
 80026a6:	335c      	adds	r3, #92	; 0x5c
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	697a      	ldr	r2, [r7, #20]
 80026b2:	b2d2      	uxtb	r2, r2
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f003 f98d 	bl	80059d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	015a      	lsls	r2, r3, #5
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	4413      	add	r3, r2
 80026c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c8:	461a      	mov	r2, r3
 80026ca:	2340      	movs	r3, #64	; 0x40
 80026cc:	6093      	str	r3, [r2, #8]
}
 80026ce:	e254      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	015a      	lsls	r2, r3, #5
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	4413      	add	r3, r2
 80026d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	f003 0308 	and.w	r3, r3, #8
 80026e2:	2b08      	cmp	r3, #8
 80026e4:	d11a      	bne.n	800271c <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	015a      	lsls	r2, r3, #5
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	4413      	add	r3, r2
 80026ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f2:	461a      	mov	r2, r3
 80026f4:	2308      	movs	r3, #8
 80026f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	212c      	movs	r1, #44	; 0x2c
 80026fe:	fb01 f303 	mul.w	r3, r1, r3
 8002702:	4413      	add	r3, r2
 8002704:	3361      	adds	r3, #97	; 0x61
 8002706:	2205      	movs	r2, #5
 8002708:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	697a      	ldr	r2, [r7, #20]
 8002710:	b2d2      	uxtb	r2, r2
 8002712:	4611      	mov	r1, r2
 8002714:	4618      	mov	r0, r3
 8002716:	f003 f95e 	bl	80059d6 <USB_HC_Halt>
}
 800271a:	e22e      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	015a      	lsls	r2, r3, #5
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	4413      	add	r3, r2
 8002724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002728:	689b      	ldr	r3, [r3, #8]
 800272a:	f003 0310 	and.w	r3, r3, #16
 800272e:	2b10      	cmp	r3, #16
 8002730:	d140      	bne.n	80027b4 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002732:	687a      	ldr	r2, [r7, #4]
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	335c      	adds	r3, #92	; 0x5c
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002744:	687a      	ldr	r2, [r7, #4]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3361      	adds	r3, #97	; 0x61
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	333d      	adds	r3, #61	; 0x3d
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d112      	bne.n	8002790 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800276a:	687a      	ldr	r2, [r7, #4]
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	212c      	movs	r1, #44	; 0x2c
 8002770:	fb01 f303 	mul.w	r3, r1, r3
 8002774:	4413      	add	r3, r2
 8002776:	333c      	adds	r3, #60	; 0x3c
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d108      	bne.n	8002790 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	212c      	movs	r1, #44	; 0x2c
 8002784:	fb01 f303 	mul.w	r3, r1, r3
 8002788:	4413      	add	r3, r2
 800278a:	333d      	adds	r3, #61	; 0x3d
 800278c:	2201      	movs	r2, #1
 800278e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	b2d2      	uxtb	r2, r2
 8002798:	4611      	mov	r1, r2
 800279a:	4618      	mov	r0, r3
 800279c:	f003 f91b 	bl	80059d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2310      	movs	r3, #16
 80027b0:	6093      	str	r3, [r2, #8]
}
 80027b2:	e1e2      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	015a      	lsls	r2, r3, #5
 80027b8:	69bb      	ldr	r3, [r7, #24]
 80027ba:	4413      	add	r3, r2
 80027bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027c6:	2b80      	cmp	r3, #128	; 0x80
 80027c8:	d164      	bne.n	8002894 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d111      	bne.n	80027f6 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	212c      	movs	r1, #44	; 0x2c
 80027d8:	fb01 f303 	mul.w	r3, r1, r3
 80027dc:	4413      	add	r3, r2
 80027de:	3361      	adds	r3, #97	; 0x61
 80027e0:	2206      	movs	r2, #6
 80027e2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	697a      	ldr	r2, [r7, #20]
 80027ea:	b2d2      	uxtb	r2, r2
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f003 f8f1 	bl	80059d6 <USB_HC_Halt>
 80027f4:	e044      	b.n	8002880 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80027f6:	687a      	ldr	r2, [r7, #4]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	212c      	movs	r1, #44	; 0x2c
 80027fc:	fb01 f303 	mul.w	r3, r1, r3
 8002800:	4413      	add	r3, r2
 8002802:	335c      	adds	r3, #92	; 0x5c
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	6879      	ldr	r1, [r7, #4]
 800280a:	697b      	ldr	r3, [r7, #20]
 800280c:	202c      	movs	r0, #44	; 0x2c
 800280e:	fb00 f303 	mul.w	r3, r0, r3
 8002812:	440b      	add	r3, r1
 8002814:	335c      	adds	r3, #92	; 0x5c
 8002816:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	212c      	movs	r1, #44	; 0x2c
 800281e:	fb01 f303 	mul.w	r3, r1, r3
 8002822:	4413      	add	r3, r2
 8002824:	335c      	adds	r3, #92	; 0x5c
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d920      	bls.n	800286e <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	212c      	movs	r1, #44	; 0x2c
 8002832:	fb01 f303 	mul.w	r3, r1, r3
 8002836:	4413      	add	r3, r2
 8002838:	335c      	adds	r3, #92	; 0x5c
 800283a:	2200      	movs	r2, #0
 800283c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	697b      	ldr	r3, [r7, #20]
 8002842:	212c      	movs	r1, #44	; 0x2c
 8002844:	fb01 f303 	mul.w	r3, r1, r3
 8002848:	4413      	add	r3, r2
 800284a:	3360      	adds	r3, #96	; 0x60
 800284c:	2204      	movs	r2, #4
 800284e:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	b2d9      	uxtb	r1, r3
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	202c      	movs	r0, #44	; 0x2c
 800285a:	fb00 f303 	mul.w	r3, r0, r3
 800285e:	4413      	add	r3, r2
 8002860:	3360      	adds	r3, #96	; 0x60
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	461a      	mov	r2, r3
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f005 fb58 	bl	8007f1c <HAL_HCD_HC_NotifyURBChange_Callback>
 800286c:	e008      	b.n	8002880 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	212c      	movs	r1, #44	; 0x2c
 8002874:	fb01 f303 	mul.w	r3, r1, r3
 8002878:	4413      	add	r3, r2
 800287a:	3360      	adds	r3, #96	; 0x60
 800287c:	2202      	movs	r2, #2
 800287e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	2380      	movs	r3, #128	; 0x80
 8002890:	6093      	str	r3, [r2, #8]
}
 8002892:	e172      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028aa:	d11b      	bne.n	80028e4 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	3361      	adds	r3, #97	; 0x61
 80028ba:	2208      	movs	r2, #8
 80028bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	697a      	ldr	r2, [r7, #20]
 80028c4:	b2d2      	uxtb	r2, r2
 80028c6:	4611      	mov	r1, r2
 80028c8:	4618      	mov	r0, r3
 80028ca:	f003 f884 	bl	80059d6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	015a      	lsls	r2, r3, #5
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	4413      	add	r3, r2
 80028d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028da:	461a      	mov	r2, r3
 80028dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e0:	6093      	str	r3, [r2, #8]
}
 80028e2:	e14a      	b.n	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	f040 813f 	bne.w	8002b7a <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80028fc:	687a      	ldr	r2, [r7, #4]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	212c      	movs	r1, #44	; 0x2c
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	4413      	add	r3, r2
 8002908:	3361      	adds	r3, #97	; 0x61
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b01      	cmp	r3, #1
 800290e:	d17d      	bne.n	8002a0c <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002910:	687a      	ldr	r2, [r7, #4]
 8002912:	697b      	ldr	r3, [r7, #20]
 8002914:	212c      	movs	r1, #44	; 0x2c
 8002916:	fb01 f303 	mul.w	r3, r1, r3
 800291a:	4413      	add	r3, r2
 800291c:	3360      	adds	r3, #96	; 0x60
 800291e:	2201      	movs	r2, #1
 8002920:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	697b      	ldr	r3, [r7, #20]
 8002926:	212c      	movs	r1, #44	; 0x2c
 8002928:	fb01 f303 	mul.w	r3, r1, r3
 800292c:	4413      	add	r3, r2
 800292e:	333f      	adds	r3, #63	; 0x3f
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b02      	cmp	r3, #2
 8002934:	d00a      	beq.n	800294c <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	212c      	movs	r1, #44	; 0x2c
 800293c:	fb01 f303 	mul.w	r3, r1, r3
 8002940:	4413      	add	r3, r2
 8002942:	333f      	adds	r3, #63	; 0x3f
 8002944:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002946:	2b03      	cmp	r3, #3
 8002948:	f040 8100 	bne.w	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	691b      	ldr	r3, [r3, #16]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d113      	bne.n	800297c <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002954:	687a      	ldr	r2, [r7, #4]
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	212c      	movs	r1, #44	; 0x2c
 800295a:	fb01 f303 	mul.w	r3, r1, r3
 800295e:	4413      	add	r3, r2
 8002960:	3355      	adds	r3, #85	; 0x55
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	f083 0301 	eor.w	r3, r3, #1
 8002968:	b2d8      	uxtb	r0, r3
 800296a:	687a      	ldr	r2, [r7, #4]
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	212c      	movs	r1, #44	; 0x2c
 8002970:	fb01 f303 	mul.w	r3, r1, r3
 8002974:	4413      	add	r3, r2
 8002976:	3355      	adds	r3, #85	; 0x55
 8002978:	4602      	mov	r2, r0
 800297a:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b01      	cmp	r3, #1
 8002982:	f040 80e3 	bne.w	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	334c      	adds	r3, #76	; 0x4c
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	f000 80d8 	beq.w	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	212c      	movs	r1, #44	; 0x2c
 80029a2:	fb01 f303 	mul.w	r3, r1, r3
 80029a6:	4413      	add	r3, r2
 80029a8:	334c      	adds	r3, #76	; 0x4c
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6879      	ldr	r1, [r7, #4]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	202c      	movs	r0, #44	; 0x2c
 80029b2:	fb00 f202 	mul.w	r2, r0, r2
 80029b6:	440a      	add	r2, r1
 80029b8:	3240      	adds	r2, #64	; 0x40
 80029ba:	8812      	ldrh	r2, [r2, #0]
 80029bc:	4413      	add	r3, r2
 80029be:	3b01      	subs	r3, #1
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	697a      	ldr	r2, [r7, #20]
 80029c4:	202c      	movs	r0, #44	; 0x2c
 80029c6:	fb00 f202 	mul.w	r2, r0, r2
 80029ca:	440a      	add	r2, r1
 80029cc:	3240      	adds	r2, #64	; 0x40
 80029ce:	8812      	ldrh	r2, [r2, #0]
 80029d0:	fbb3 f3f2 	udiv	r3, r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	2b00      	cmp	r3, #0
 80029de:	f000 80b5 	beq.w	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	3355      	adds	r3, #85	; 0x55
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	f083 0301 	eor.w	r3, r3, #1
 80029f6:	b2d8      	uxtb	r0, r3
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	212c      	movs	r1, #44	; 0x2c
 80029fe:	fb01 f303 	mul.w	r3, r1, r3
 8002a02:	4413      	add	r3, r2
 8002a04:	3355      	adds	r3, #85	; 0x55
 8002a06:	4602      	mov	r2, r0
 8002a08:	701a      	strb	r2, [r3, #0]
 8002a0a:	e09f      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	212c      	movs	r1, #44	; 0x2c
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	4413      	add	r3, r2
 8002a18:	3361      	adds	r3, #97	; 0x61
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b03      	cmp	r3, #3
 8002a1e:	d109      	bne.n	8002a34 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	212c      	movs	r1, #44	; 0x2c
 8002a26:	fb01 f303 	mul.w	r3, r1, r3
 8002a2a:	4413      	add	r3, r2
 8002a2c:	3360      	adds	r3, #96	; 0x60
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
 8002a32:	e08b      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	697b      	ldr	r3, [r7, #20]
 8002a38:	212c      	movs	r1, #44	; 0x2c
 8002a3a:	fb01 f303 	mul.w	r3, r1, r3
 8002a3e:	4413      	add	r3, r2
 8002a40:	3361      	adds	r3, #97	; 0x61
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b04      	cmp	r3, #4
 8002a46:	d109      	bne.n	8002a5c <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002a48:	687a      	ldr	r2, [r7, #4]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	212c      	movs	r1, #44	; 0x2c
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	4413      	add	r3, r2
 8002a54:	3360      	adds	r3, #96	; 0x60
 8002a56:	2202      	movs	r2, #2
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e077      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	212c      	movs	r1, #44	; 0x2c
 8002a62:	fb01 f303 	mul.w	r3, r1, r3
 8002a66:	4413      	add	r3, r2
 8002a68:	3361      	adds	r3, #97	; 0x61
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	d109      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3360      	adds	r3, #96	; 0x60
 8002a7e:	2205      	movs	r2, #5
 8002a80:	701a      	strb	r2, [r3, #0]
 8002a82:	e063      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	697b      	ldr	r3, [r7, #20]
 8002a88:	212c      	movs	r1, #44	; 0x2c
 8002a8a:	fb01 f303 	mul.w	r3, r1, r3
 8002a8e:	4413      	add	r3, r2
 8002a90:	3361      	adds	r3, #97	; 0x61
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d009      	beq.n	8002aac <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a98:	687a      	ldr	r2, [r7, #4]
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	212c      	movs	r1, #44	; 0x2c
 8002a9e:	fb01 f303 	mul.w	r3, r1, r3
 8002aa2:	4413      	add	r3, r2
 8002aa4:	3361      	adds	r3, #97	; 0x61
 8002aa6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002aa8:	2b08      	cmp	r3, #8
 8002aaa:	d14f      	bne.n	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	212c      	movs	r1, #44	; 0x2c
 8002ab2:	fb01 f303 	mul.w	r3, r1, r3
 8002ab6:	4413      	add	r3, r2
 8002ab8:	335c      	adds	r3, #92	; 0x5c
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	fb00 f303 	mul.w	r3, r0, r3
 8002ac8:	440b      	add	r3, r1
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	212c      	movs	r1, #44	; 0x2c
 8002ad4:	fb01 f303 	mul.w	r3, r1, r3
 8002ad8:	4413      	add	r3, r2
 8002ada:	335c      	adds	r3, #92	; 0x5c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d912      	bls.n	8002b08 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	212c      	movs	r1, #44	; 0x2c
 8002ae8:	fb01 f303 	mul.w	r3, r1, r3
 8002aec:	4413      	add	r3, r2
 8002aee:	335c      	adds	r3, #92	; 0x5c
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002af4:	687a      	ldr	r2, [r7, #4]
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	212c      	movs	r1, #44	; 0x2c
 8002afa:	fb01 f303 	mul.w	r3, r1, r3
 8002afe:	4413      	add	r3, r2
 8002b00:	3360      	adds	r3, #96	; 0x60
 8002b02:	2204      	movs	r2, #4
 8002b04:	701a      	strb	r2, [r3, #0]
 8002b06:	e021      	b.n	8002b4c <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	212c      	movs	r1, #44	; 0x2c
 8002b0e:	fb01 f303 	mul.w	r3, r1, r3
 8002b12:	4413      	add	r3, r2
 8002b14:	3360      	adds	r3, #96	; 0x60
 8002b16:	2202      	movs	r2, #2
 8002b18:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	015a      	lsls	r2, r3, #5
 8002b1e:	69bb      	ldr	r3, [r7, #24]
 8002b20:	4413      	add	r3, r2
 8002b22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b30:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b38:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b3a:	697b      	ldr	r3, [r7, #20]
 8002b3c:	015a      	lsls	r2, r3, #5
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	4413      	add	r3, r2
 8002b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b46:	461a      	mov	r2, r3
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	015a      	lsls	r2, r3, #5
 8002b50:	69bb      	ldr	r3, [r7, #24]
 8002b52:	4413      	add	r3, r2
 8002b54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b58:	461a      	mov	r2, r3
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	b2d9      	uxtb	r1, r3
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	202c      	movs	r0, #44	; 0x2c
 8002b68:	fb00 f303 	mul.w	r3, r0, r3
 8002b6c:	4413      	add	r3, r2
 8002b6e:	3360      	adds	r3, #96	; 0x60
 8002b70:	781b      	ldrb	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f005 f9d1 	bl	8007f1c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002b7a:	bf00      	nop
 8002b7c:	3720      	adds	r7, #32
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b08a      	sub	sp, #40	; 0x28
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b92:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	0c5b      	lsrs	r3, r3, #17
 8002ba8:	f003 030f 	and.w	r3, r3, #15
 8002bac:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bb6:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d004      	beq.n	8002bc8 <HCD_RXQLVL_IRQHandler+0x46>
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	2b05      	cmp	r3, #5
 8002bc2:	f000 80a9 	beq.w	8002d18 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002bc6:	e0aa      	b.n	8002d1e <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80a6 	beq.w	8002d1c <HCD_RXQLVL_IRQHandler+0x19a>
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3344      	adds	r3, #68	; 0x44
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	f000 809b 	beq.w	8002d1c <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	212c      	movs	r1, #44	; 0x2c
 8002bec:	fb01 f303 	mul.w	r3, r1, r3
 8002bf0:	4413      	add	r3, r2
 8002bf2:	3350      	adds	r3, #80	; 0x50
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	441a      	add	r2, r3
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	202c      	movs	r0, #44	; 0x2c
 8002c00:	fb00 f303 	mul.w	r3, r0, r3
 8002c04:	440b      	add	r3, r1
 8002c06:	334c      	adds	r3, #76	; 0x4c
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d87a      	bhi.n	8002d04 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6818      	ldr	r0, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	3344      	adds	r3, #68	; 0x44
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	b292      	uxth	r2, r2
 8002c26:	4619      	mov	r1, r3
 8002c28:	f002 fa2c 	bl	8005084 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	69bb      	ldr	r3, [r7, #24]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3344      	adds	r3, #68	; 0x44
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	441a      	add	r2, r3
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	202c      	movs	r0, #44	; 0x2c
 8002c46:	fb00 f303 	mul.w	r3, r0, r3
 8002c4a:	440b      	add	r3, r1
 8002c4c:	3344      	adds	r3, #68	; 0x44
 8002c4e:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	212c      	movs	r1, #44	; 0x2c
 8002c56:	fb01 f303 	mul.w	r3, r1, r3
 8002c5a:	4413      	add	r3, r2
 8002c5c:	3350      	adds	r3, #80	; 0x50
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	693b      	ldr	r3, [r7, #16]
 8002c62:	441a      	add	r2, r3
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	202c      	movs	r0, #44	; 0x2c
 8002c6a:	fb00 f303 	mul.w	r3, r0, r3
 8002c6e:	440b      	add	r3, r1
 8002c70:	3350      	adds	r3, #80	; 0x50
 8002c72:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002c74:	69bb      	ldr	r3, [r7, #24]
 8002c76:	015a      	lsls	r2, r3, #5
 8002c78:	6a3b      	ldr	r3, [r7, #32]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c80:	691b      	ldr	r3, [r3, #16]
 8002c82:	0cdb      	lsrs	r3, r3, #19
 8002c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c88:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	69bb      	ldr	r3, [r7, #24]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	3340      	adds	r3, #64	; 0x40
 8002c98:	881b      	ldrh	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d13c      	bne.n	8002d1c <HCD_RXQLVL_IRQHandler+0x19a>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d039      	beq.n	8002d1c <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	015a      	lsls	r2, r3, #5
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	4413      	add	r3, r2
 8002cb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cbe:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cc6:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	69bb      	ldr	r3, [r7, #24]
 8002cde:	212c      	movs	r1, #44	; 0x2c
 8002ce0:	fb01 f303 	mul.w	r3, r1, r3
 8002ce4:	4413      	add	r3, r2
 8002ce6:	3354      	adds	r3, #84	; 0x54
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	f083 0301 	eor.w	r3, r3, #1
 8002cee:	b2d8      	uxtb	r0, r3
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	69bb      	ldr	r3, [r7, #24]
 8002cf4:	212c      	movs	r1, #44	; 0x2c
 8002cf6:	fb01 f303 	mul.w	r3, r1, r3
 8002cfa:	4413      	add	r3, r2
 8002cfc:	3354      	adds	r3, #84	; 0x54
 8002cfe:	4602      	mov	r2, r0
 8002d00:	701a      	strb	r2, [r3, #0]
      break;
 8002d02:	e00b      	b.n	8002d1c <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	fb01 f303 	mul.w	r3, r1, r3
 8002d0e:	4413      	add	r3, r2
 8002d10:	3360      	adds	r3, #96	; 0x60
 8002d12:	2204      	movs	r2, #4
 8002d14:	701a      	strb	r2, [r3, #0]
      break;
 8002d16:	e001      	b.n	8002d1c <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002d18:	bf00      	nop
 8002d1a:	e000      	b.n	8002d1e <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002d1c:	bf00      	nop
  }
}
 8002d1e:	bf00      	nop
 8002d20:	3728      	adds	r7, #40	; 0x28
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b086      	sub	sp, #24
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002d52:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d10b      	bne.n	8002d76 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d102      	bne.n	8002d6e <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f005 f8bb 	bl	8007ee4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	f043 0302 	orr.w	r3, r3, #2
 8002d74:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d132      	bne.n	8002de6 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f003 0304 	and.w	r3, r3, #4
 8002d8e:	2b04      	cmp	r3, #4
 8002d90:	d126      	bne.n	8002de0 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	699b      	ldr	r3, [r3, #24]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d113      	bne.n	8002dc2 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002da0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002da4:	d106      	bne.n	8002db4 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	2102      	movs	r1, #2
 8002dac:	4618      	mov	r0, r3
 8002dae:	f002 fad7 	bl	8005360 <USB_InitFSLSPClkSel>
 8002db2:	e011      	b.n	8002dd8 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2101      	movs	r1, #1
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f002 fad0 	bl	8005360 <USB_InitFSLSPClkSel>
 8002dc0:	e00a      	b.n	8002dd8 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d106      	bne.n	8002dd8 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002dd6:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f005 f8ad 	bl	8007f38 <HAL_HCD_PortEnabled_Callback>
 8002dde:	e002      	b.n	8002de6 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f005 f8b7 	bl	8007f54 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d103      	bne.n	8002df8 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	f043 0320 	orr.w	r3, r3, #32
 8002df6:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002dfe:	461a      	mov	r2, r3
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	6013      	str	r3, [r2, #0]
}
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b084      	sub	sp, #16
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e12b      	b.n	8003076 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d106      	bne.n	8002e38 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fd fe42 	bl	8000abc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2224      	movs	r2, #36	; 0x24
 8002e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 0201 	bic.w	r2, r2, #1
 8002e4e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e5e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e6e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e70:	f001 fa20 	bl	80042b4 <HAL_RCC_GetPCLK1Freq>
 8002e74:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	4a81      	ldr	r2, [pc, #516]	; (8003080 <HAL_I2C_Init+0x274>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d807      	bhi.n	8002e90 <HAL_I2C_Init+0x84>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4a80      	ldr	r2, [pc, #512]	; (8003084 <HAL_I2C_Init+0x278>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	bf94      	ite	ls
 8002e88:	2301      	movls	r3, #1
 8002e8a:	2300      	movhi	r3, #0
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	e006      	b.n	8002e9e <HAL_I2C_Init+0x92>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	4a7d      	ldr	r2, [pc, #500]	; (8003088 <HAL_I2C_Init+0x27c>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	bf94      	ite	ls
 8002e98:	2301      	movls	r3, #1
 8002e9a:	2300      	movhi	r3, #0
 8002e9c:	b2db      	uxtb	r3, r3
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e0e7      	b.n	8003076 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4a78      	ldr	r2, [pc, #480]	; (800308c <HAL_I2C_Init+0x280>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	0c9b      	lsrs	r3, r3, #18
 8002eb0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68ba      	ldr	r2, [r7, #8]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	4a6a      	ldr	r2, [pc, #424]	; (8003080 <HAL_I2C_Init+0x274>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d802      	bhi.n	8002ee0 <HAL_I2C_Init+0xd4>
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	3301      	adds	r3, #1
 8002ede:	e009      	b.n	8002ef4 <HAL_I2C_Init+0xe8>
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002ee6:	fb02 f303 	mul.w	r3, r2, r3
 8002eea:	4a69      	ldr	r2, [pc, #420]	; (8003090 <HAL_I2C_Init+0x284>)
 8002eec:	fba2 2303 	umull	r2, r3, r2, r3
 8002ef0:	099b      	lsrs	r3, r3, #6
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	6812      	ldr	r2, [r2, #0]
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002f06:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	495c      	ldr	r1, [pc, #368]	; (8003080 <HAL_I2C_Init+0x274>)
 8002f10:	428b      	cmp	r3, r1
 8002f12:	d819      	bhi.n	8002f48 <HAL_I2C_Init+0x13c>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	1e59      	subs	r1, r3, #1
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f22:	1c59      	adds	r1, r3, #1
 8002f24:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002f28:	400b      	ands	r3, r1
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <HAL_I2C_Init+0x138>
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	1e59      	subs	r1, r3, #1
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f42:	e051      	b.n	8002fe8 <HAL_I2C_Init+0x1dc>
 8002f44:	2304      	movs	r3, #4
 8002f46:	e04f      	b.n	8002fe8 <HAL_I2C_Init+0x1dc>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <HAL_I2C_Init+0x168>
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	1e58      	subs	r0, r3, #1
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6859      	ldr	r1, [r3, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	440b      	add	r3, r1
 8002f5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f62:	3301      	adds	r3, #1
 8002f64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf0c      	ite	eq
 8002f6c:	2301      	moveq	r3, #1
 8002f6e:	2300      	movne	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e012      	b.n	8002f9a <HAL_I2C_Init+0x18e>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	1e58      	subs	r0, r3, #1
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6859      	ldr	r1, [r3, #4]
 8002f7c:	460b      	mov	r3, r1
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	0099      	lsls	r1, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	bf0c      	ite	eq
 8002f94:	2301      	moveq	r3, #1
 8002f96:	2300      	movne	r3, #0
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d001      	beq.n	8002fa2 <HAL_I2C_Init+0x196>
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e022      	b.n	8002fe8 <HAL_I2C_Init+0x1dc>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d10e      	bne.n	8002fc8 <HAL_I2C_Init+0x1bc>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	1e58      	subs	r0, r3, #1
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6859      	ldr	r1, [r3, #4]
 8002fb2:	460b      	mov	r3, r1
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	440b      	add	r3, r1
 8002fb8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fbc:	3301      	adds	r3, #1
 8002fbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002fc6:	e00f      	b.n	8002fe8 <HAL_I2C_Init+0x1dc>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	1e58      	subs	r0, r3, #1
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6859      	ldr	r1, [r3, #4]
 8002fd0:	460b      	mov	r3, r1
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	0099      	lsls	r1, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	fbb0 f3f3 	udiv	r3, r0, r3
 8002fde:	3301      	adds	r3, #1
 8002fe0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fe4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	6809      	ldr	r1, [r1, #0]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	431a      	orrs	r2, r3
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003016:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6911      	ldr	r1, [r2, #16]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68d2      	ldr	r2, [r2, #12]
 8003022:	4311      	orrs	r1, r2
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	695a      	ldr	r2, [r3, #20]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	431a      	orrs	r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0201 	orr.w	r2, r2, #1
 8003056:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2200      	movs	r2, #0
 800305c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	2220      	movs	r2, #32
 8003062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2200      	movs	r2, #0
 800306a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2200      	movs	r2, #0
 8003070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	3710      	adds	r7, #16
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	000186a0 	.word	0x000186a0
 8003084:	001e847f 	.word	0x001e847f
 8003088:	003d08ff 	.word	0x003d08ff
 800308c:	431bde83 	.word	0x431bde83
 8003090:	10624dd3 	.word	0x10624dd3

08003094 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b088      	sub	sp, #32
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e128      	b.n	80032f8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4a90      	ldr	r2, [pc, #576]	; (8003300 <HAL_I2S_Init+0x26c>)
 80030be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f7fd fd43 	bl	8000b4c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2202      	movs	r2, #2
 80030ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69db      	ldr	r3, [r3, #28]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80030dc:	f023 030f 	bic.w	r3, r3, #15
 80030e0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	2202      	movs	r2, #2
 80030e8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d060      	beq.n	80031b4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d102      	bne.n	8003100 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80030fa:	2310      	movs	r3, #16
 80030fc:	617b      	str	r3, [r7, #20]
 80030fe:	e001      	b.n	8003104 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003100:	2320      	movs	r3, #32
 8003102:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b20      	cmp	r3, #32
 800310a:	d802      	bhi.n	8003112 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003112:	2001      	movs	r0, #1
 8003114:	f001 f9c4 	bl	80044a0 <HAL_RCCEx_GetPeriphCLKFreq>
 8003118:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003122:	d125      	bne.n	8003170 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d010      	beq.n	800314e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	fbb2 f2f3 	udiv	r2, r2, r3
 8003136:	4613      	mov	r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	4413      	add	r3, r2
 800313c:	005b      	lsls	r3, r3, #1
 800313e:	461a      	mov	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	3305      	adds	r3, #5
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	e01f      	b.n	800318e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	68fa      	ldr	r2, [r7, #12]
 8003154:	fbb2 f2f3 	udiv	r2, r2, r3
 8003158:	4613      	mov	r3, r2
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	4413      	add	r3, r2
 800315e:	005b      	lsls	r3, r3, #1
 8003160:	461a      	mov	r2, r3
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	3305      	adds	r3, #5
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	e00e      	b.n	800318e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	fbb2 f2f3 	udiv	r2, r2, r3
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	461a      	mov	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	695b      	ldr	r3, [r3, #20]
 8003186:	fbb2 f3f3 	udiv	r3, r2, r3
 800318a:	3305      	adds	r3, #5
 800318c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4a5c      	ldr	r2, [pc, #368]	; (8003304 <HAL_I2S_Init+0x270>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800319a:	693b      	ldr	r3, [r7, #16]
 800319c:	f003 0301 	and.w	r3, r3, #1
 80031a0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80031a2:	693a      	ldr	r2, [r7, #16]
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	085b      	lsrs	r3, r3, #1
 80031aa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	61bb      	str	r3, [r7, #24]
 80031b2:	e003      	b.n	80031bc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80031b4:	2302      	movs	r3, #2
 80031b6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d902      	bls.n	80031c8 <HAL_I2S_Init+0x134>
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	2bff      	cmp	r3, #255	; 0xff
 80031c6:	d907      	bls.n	80031d8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031cc:	f043 0210 	orr.w	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80031d4:	2301      	movs	r3, #1
 80031d6:	e08f      	b.n	80032f8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691a      	ldr	r2, [r3, #16]
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	ea42 0103 	orr.w	r1, r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	69fa      	ldr	r2, [r7, #28]
 80031e8:	430a      	orrs	r2, r1
 80031ea:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	69db      	ldr	r3, [r3, #28]
 80031f2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80031f6:	f023 030f 	bic.w	r3, r3, #15
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	6851      	ldr	r1, [r2, #4]
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6892      	ldr	r2, [r2, #8]
 8003202:	4311      	orrs	r1, r2
 8003204:	687a      	ldr	r2, [r7, #4]
 8003206:	68d2      	ldr	r2, [r2, #12]
 8003208:	4311      	orrs	r1, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6992      	ldr	r2, [r2, #24]
 800320e:	430a      	orrs	r2, r1
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800321a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d161      	bne.n	80032e8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	4a38      	ldr	r2, [pc, #224]	; (8003308 <HAL_I2S_Init+0x274>)
 8003228:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a37      	ldr	r2, [pc, #220]	; (800330c <HAL_I2S_Init+0x278>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d101      	bne.n	8003238 <HAL_I2S_Init+0x1a4>
 8003234:	4b36      	ldr	r3, [pc, #216]	; (8003310 <HAL_I2S_Init+0x27c>)
 8003236:	e001      	b.n	800323c <HAL_I2S_Init+0x1a8>
 8003238:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800323c:	69db      	ldr	r3, [r3, #28]
 800323e:	687a      	ldr	r2, [r7, #4]
 8003240:	6812      	ldr	r2, [r2, #0]
 8003242:	4932      	ldr	r1, [pc, #200]	; (800330c <HAL_I2S_Init+0x278>)
 8003244:	428a      	cmp	r2, r1
 8003246:	d101      	bne.n	800324c <HAL_I2S_Init+0x1b8>
 8003248:	4a31      	ldr	r2, [pc, #196]	; (8003310 <HAL_I2S_Init+0x27c>)
 800324a:	e001      	b.n	8003250 <HAL_I2S_Init+0x1bc>
 800324c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003250:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003254:	f023 030f 	bic.w	r3, r3, #15
 8003258:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a2b      	ldr	r2, [pc, #172]	; (800330c <HAL_I2S_Init+0x278>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_I2S_Init+0x1d4>
 8003264:	4b2a      	ldr	r3, [pc, #168]	; (8003310 <HAL_I2S_Init+0x27c>)
 8003266:	e001      	b.n	800326c <HAL_I2S_Init+0x1d8>
 8003268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800326c:	2202      	movs	r2, #2
 800326e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a25      	ldr	r2, [pc, #148]	; (800330c <HAL_I2S_Init+0x278>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d101      	bne.n	800327e <HAL_I2S_Init+0x1ea>
 800327a:	4b25      	ldr	r3, [pc, #148]	; (8003310 <HAL_I2S_Init+0x27c>)
 800327c:	e001      	b.n	8003282 <HAL_I2S_Init+0x1ee>
 800327e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800328e:	d003      	beq.n	8003298 <HAL_I2S_Init+0x204>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d103      	bne.n	80032a0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003298:	f44f 7380 	mov.w	r3, #256	; 0x100
 800329c:	613b      	str	r3, [r7, #16]
 800329e:	e001      	b.n	80032a4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80032a4:	693b      	ldr	r3, [r7, #16]
 80032a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032ae:	4313      	orrs	r3, r2
 80032b0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032b8:	4313      	orrs	r3, r2
 80032ba:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80032c2:	4313      	orrs	r3, r2
 80032c4:	b29a      	uxth	r2, r3
 80032c6:	897b      	ldrh	r3, [r7, #10]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80032d0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a0d      	ldr	r2, [pc, #52]	; (800330c <HAL_I2S_Init+0x278>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d101      	bne.n	80032e0 <HAL_I2S_Init+0x24c>
 80032dc:	4b0c      	ldr	r3, [pc, #48]	; (8003310 <HAL_I2S_Init+0x27c>)
 80032de:	e001      	b.n	80032e4 <HAL_I2S_Init+0x250>
 80032e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e4:	897a      	ldrh	r2, [r7, #10]
 80032e6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80032f6:	2300      	movs	r3, #0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	0800340b 	.word	0x0800340b
 8003304:	cccccccd 	.word	0xcccccccd
 8003308:	08003521 	.word	0x08003521
 800330c:	40003800 	.word	0x40003800
 8003310:	40003400 	.word	0x40003400

08003314 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr

08003328 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003328:	b480      	push	{r7}
 800332a:	b083      	sub	sp, #12
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003330:	bf00      	nop
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800333c:	b480      	push	{r7}
 800333e:	b083      	sub	sp, #12
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800335c:	881a      	ldrh	r2, [r3, #0]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003368:	1c9a      	adds	r2, r3, #2
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10e      	bne.n	80033a4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003394:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800339e:	6878      	ldr	r0, [r7, #4]
 80033a0:	f7ff ffb8 	bl	8003314 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80033a4:	bf00      	nop
 80033a6:	3708      	adds	r7, #8
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	68da      	ldr	r2, [r3, #12]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033be:	b292      	uxth	r2, r2
 80033c0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	1c9a      	adds	r2, r3, #2
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80033de:	b29b      	uxth	r3, r3
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d10e      	bne.n	8003402 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	685a      	ldr	r2, [r3, #4]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033f2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2201      	movs	r2, #1
 80033f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f7ff ff93 	bl	8003328 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003402:	bf00      	nop
 8003404:	3708      	adds	r7, #8
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b04      	cmp	r3, #4
 8003424:	d13a      	bne.n	800349c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b01      	cmp	r3, #1
 800342e:	d109      	bne.n	8003444 <I2S_IRQHandler+0x3a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343a:	2b40      	cmp	r3, #64	; 0x40
 800343c:	d102      	bne.n	8003444 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f7ff ffb4 	bl	80033ac <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b40      	cmp	r3, #64	; 0x40
 800344c:	d126      	bne.n	800349c <I2S_IRQHandler+0x92>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 0320 	and.w	r3, r3, #32
 8003458:	2b20      	cmp	r3, #32
 800345a:	d11f      	bne.n	800349c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800346a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800346c:	2300      	movs	r3, #0
 800346e:	613b      	str	r3, [r7, #16]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	613b      	str	r3, [r7, #16]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800348e:	f043 0202 	orr.w	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f7ff ff50 	bl	800333c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d136      	bne.n	8003516 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b02      	cmp	r3, #2
 80034b0:	d109      	bne.n	80034c6 <I2S_IRQHandler+0xbc>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034bc:	2b80      	cmp	r3, #128	; 0x80
 80034be:	d102      	bne.n	80034c6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f7ff ff45 	bl	8003350 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	f003 0308 	and.w	r3, r3, #8
 80034cc:	2b08      	cmp	r3, #8
 80034ce:	d122      	bne.n	8003516 <I2S_IRQHandler+0x10c>
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d11b      	bne.n	8003516 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80034ec:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff13 	bl	800333c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003516:	bf00      	nop
 8003518:	3718      	adds	r7, #24
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
	...

08003520 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b088      	sub	sp, #32
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a92      	ldr	r2, [pc, #584]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d101      	bne.n	800353e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800353a:	4b92      	ldr	r3, [pc, #584]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800353c:	e001      	b.n	8003542 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800353e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a8b      	ldr	r2, [pc, #556]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d101      	bne.n	800355c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003558:	4b8a      	ldr	r3, [pc, #552]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800355a:	e001      	b.n	8003560 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800355c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356c:	d004      	beq.n	8003578 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	f040 8099 	bne.w	80036aa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b02      	cmp	r3, #2
 8003580:	d107      	bne.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800358c:	6878      	ldr	r0, [r7, #4]
 800358e:	f000 f925 	bl	80037dc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d107      	bne.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d002      	beq.n	80035ac <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 f9c8 	bl	800393c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b2:	2b40      	cmp	r3, #64	; 0x40
 80035b4:	d13a      	bne.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d035      	beq.n	800362c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a6e      	ldr	r2, [pc, #440]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d101      	bne.n	80035ce <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80035ca:	4b6e      	ldr	r3, [pc, #440]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035cc:	e001      	b.n	80035d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80035ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4969      	ldr	r1, [pc, #420]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035da:	428b      	cmp	r3, r1
 80035dc:	d101      	bne.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80035de:	4b69      	ldr	r3, [pc, #420]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e0:	e001      	b.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80035e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ea:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80035fa:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80035fc:	2300      	movs	r3, #0
 80035fe:	60fb      	str	r3, [r7, #12]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f043 0202 	orr.w	r2, r3, #2
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff fe88 	bl	800333c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	f003 0308 	and.w	r3, r3, #8
 8003632:	2b08      	cmp	r3, #8
 8003634:	f040 80c3 	bne.w	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	f003 0320 	and.w	r3, r3, #32
 800363e:	2b00      	cmp	r3, #0
 8003640:	f000 80bd 	beq.w	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003652:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a49      	ldr	r2, [pc, #292]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d101      	bne.n	8003662 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800365e:	4b49      	ldr	r3, [pc, #292]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003660:	e001      	b.n	8003666 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003662:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003666:	685a      	ldr	r2, [r3, #4]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4944      	ldr	r1, [pc, #272]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800366e:	428b      	cmp	r3, r1
 8003670:	d101      	bne.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003672:	4b44      	ldr	r3, [pc, #272]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003674:	e001      	b.n	800367a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003676:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800367a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800367e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003680:	2300      	movs	r3, #0
 8003682:	60bb      	str	r3, [r7, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	60bb      	str	r3, [r7, #8]
 800368c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2201      	movs	r2, #1
 8003692:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800369a:	f043 0204 	orr.w	r2, r3, #4
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fe4a 	bl	800333c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036a8:	e089      	b.n	80037be <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d107      	bne.n	80036c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d002      	beq.n	80036c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f8be 	bl	8003840 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	f003 0301 	and.w	r3, r3, #1
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d002      	beq.n	80036de <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 f8fd 	bl	80038d8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e4:	2b40      	cmp	r3, #64	; 0x40
 80036e6:	d12f      	bne.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	f003 0320 	and.w	r3, r3, #32
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d02a      	beq.n	8003748 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003700:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a1e      	ldr	r2, [pc, #120]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d101      	bne.n	8003710 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800370c:	4b1d      	ldr	r3, [pc, #116]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800370e:	e001      	b.n	8003714 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003710:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003714:	685a      	ldr	r2, [r3, #4]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4919      	ldr	r1, [pc, #100]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800371c:	428b      	cmp	r3, r1
 800371e:	d101      	bne.n	8003724 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003720:	4b18      	ldr	r3, [pc, #96]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003722:	e001      	b.n	8003728 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003724:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003728:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800372c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	f043 0202 	orr.w	r2, r3, #2
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f7ff fdfa 	bl	800333c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d136      	bne.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f003 0320 	and.w	r3, r3, #32
 8003758:	2b00      	cmp	r3, #0
 800375a:	d031      	beq.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a07      	ldr	r2, [pc, #28]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d101      	bne.n	800376a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003766:	4b07      	ldr	r3, [pc, #28]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003768:	e001      	b.n	800376e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800376a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4902      	ldr	r1, [pc, #8]	; (8003780 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003776:	428b      	cmp	r3, r1
 8003778:	d106      	bne.n	8003788 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800377a:	4b02      	ldr	r3, [pc, #8]	; (8003784 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800377c:	e006      	b.n	800378c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800377e:	bf00      	nop
 8003780:	40003800 	.word	0x40003800
 8003784:	40003400 	.word	0x40003400
 8003788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003790:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ae:	f043 0204 	orr.w	r2, r3, #4
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f7ff fdc0 	bl	800333c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80037bc:	e000      	b.n	80037c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037be:	bf00      	nop
}
 80037c0:	bf00      	nop
 80037c2:	3720      	adds	r7, #32
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b083      	sub	sp, #12
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80037d0:	bf00      	nop
 80037d2:	370c      	adds	r7, #12
 80037d4:	46bd      	mov	sp, r7
 80037d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037da:	4770      	bx	lr

080037dc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b082      	sub	sp, #8
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e8:	1c99      	adds	r1, r3, #2
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6251      	str	r1, [r2, #36]	; 0x24
 80037ee:	881a      	ldrh	r2, [r3, #0]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037fa:	b29b      	uxth	r3, r3
 80037fc:	3b01      	subs	r3, #1
 80037fe:	b29a      	uxth	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b00      	cmp	r3, #0
 800380c:	d113      	bne.n	8003836 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800381c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003822:	b29b      	uxth	r3, r3
 8003824:	2b00      	cmp	r3, #0
 8003826:	d106      	bne.n	8003836 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f7ff ffc9 	bl	80037c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003836:	bf00      	nop
 8003838:	3708      	adds	r7, #8
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}
	...

08003840 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	1c99      	adds	r1, r3, #2
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6251      	str	r1, [r2, #36]	; 0x24
 8003852:	8819      	ldrh	r1, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <I2SEx_TxISR_I2SExt+0x90>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <I2SEx_TxISR_I2SExt+0x22>
 800385e:	4b1d      	ldr	r3, [pc, #116]	; (80038d4 <I2SEx_TxISR_I2SExt+0x94>)
 8003860:	e001      	b.n	8003866 <I2SEx_TxISR_I2SExt+0x26>
 8003862:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003866:	460a      	mov	r2, r1
 8003868:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d121      	bne.n	80038c6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <I2SEx_TxISR_I2SExt+0x90>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d101      	bne.n	8003890 <I2SEx_TxISR_I2SExt+0x50>
 800388c:	4b11      	ldr	r3, [pc, #68]	; (80038d4 <I2SEx_TxISR_I2SExt+0x94>)
 800388e:	e001      	b.n	8003894 <I2SEx_TxISR_I2SExt+0x54>
 8003890:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	490d      	ldr	r1, [pc, #52]	; (80038d0 <I2SEx_TxISR_I2SExt+0x90>)
 800389c:	428b      	cmp	r3, r1
 800389e:	d101      	bne.n	80038a4 <I2SEx_TxISR_I2SExt+0x64>
 80038a0:	4b0c      	ldr	r3, [pc, #48]	; (80038d4 <I2SEx_TxISR_I2SExt+0x94>)
 80038a2:	e001      	b.n	80038a8 <I2SEx_TxISR_I2SExt+0x68>
 80038a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038a8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038ac:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7ff ff81 	bl	80037c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038c6:	bf00      	nop
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40003800 	.word	0x40003800
 80038d4:	40003400 	.word	0x40003400

080038d8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68d8      	ldr	r0, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ea:	1c99      	adds	r1, r3, #2
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	62d1      	str	r1, [r2, #44]	; 0x2c
 80038f0:	b282      	uxth	r2, r0
 80038f2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	3b01      	subs	r3, #1
 80038fc:	b29a      	uxth	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003906:	b29b      	uxth	r3, r3
 8003908:	2b00      	cmp	r3, #0
 800390a:	d113      	bne.n	8003934 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	685a      	ldr	r2, [r3, #4]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800391a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d106      	bne.n	8003934 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f7ff ff4a 	bl	80037c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b082      	sub	sp, #8
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a20      	ldr	r2, [pc, #128]	; (80039cc <I2SEx_RxISR_I2SExt+0x90>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d101      	bne.n	8003952 <I2SEx_RxISR_I2SExt+0x16>
 800394e:	4b20      	ldr	r3, [pc, #128]	; (80039d0 <I2SEx_RxISR_I2SExt+0x94>)
 8003950:	e001      	b.n	8003956 <I2SEx_RxISR_I2SExt+0x1a>
 8003952:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003956:	68d8      	ldr	r0, [r3, #12]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	1c99      	adds	r1, r3, #2
 800395e:	687a      	ldr	r2, [r7, #4]
 8003960:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003962:	b282      	uxth	r2, r0
 8003964:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800396a:	b29b      	uxth	r3, r3
 800396c:	3b01      	subs	r3, #1
 800396e:	b29a      	uxth	r2, r3
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003978:	b29b      	uxth	r3, r3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d121      	bne.n	80039c2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a12      	ldr	r2, [pc, #72]	; (80039cc <I2SEx_RxISR_I2SExt+0x90>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d101      	bne.n	800398c <I2SEx_RxISR_I2SExt+0x50>
 8003988:	4b11      	ldr	r3, [pc, #68]	; (80039d0 <I2SEx_RxISR_I2SExt+0x94>)
 800398a:	e001      	b.n	8003990 <I2SEx_RxISR_I2SExt+0x54>
 800398c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003990:	685a      	ldr	r2, [r3, #4]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	490d      	ldr	r1, [pc, #52]	; (80039cc <I2SEx_RxISR_I2SExt+0x90>)
 8003998:	428b      	cmp	r3, r1
 800399a:	d101      	bne.n	80039a0 <I2SEx_RxISR_I2SExt+0x64>
 800399c:	4b0c      	ldr	r3, [pc, #48]	; (80039d0 <I2SEx_RxISR_I2SExt+0x94>)
 800399e:	e001      	b.n	80039a4 <I2SEx_RxISR_I2SExt+0x68>
 80039a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039a4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039a8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d106      	bne.n	80039c2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff03 	bl	80037c8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	40003800 	.word	0x40003800
 80039d0:	40003400 	.word	0x40003400

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e267      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d075      	beq.n	8003ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d00c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fe:	4b85      	ldr	r3, [pc, #532]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d112      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0a:	4b82      	ldr	r3, [pc, #520]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	4b7e      	ldr	r3, [pc, #504]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05b      	beq.n	8003adc <HAL_RCC_OscConfig+0x108>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d157      	bne.n	8003adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e242      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x74>
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x98>
 8003a52:	4b70      	ldr	r3, [pc, #448]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6f      	ldr	r2, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6c      	ldr	r2, [pc, #432]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	4b69      	ldr	r3, [pc, #420]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a68      	ldr	r2, [pc, #416]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fa9a 	bl	8000fc4 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fd fa96 	bl	8000fc4 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e207      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fa86 	bl	8000fc4 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fd fa82 	bl	8000fc4 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1f3      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0xe8>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d11c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e1c7      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4937      	ldr	r1, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	e03a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd fa3b 	bl	8000fc4 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fd fa37 	bl	8000fc4 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1a8      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4925      	ldr	r1, [pc, #148]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
 8003b84:	e015      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fa1a 	bl	8000fc4 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fd fa16 	bl	8000fc4 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e187      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d036      	beq.n	8003c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd f9fa 	bl	8000fc4 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fd f9f6 	bl	8000fc4 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e167      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x200>
 8003bf2:	e01b      	b.n	8003c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfa:	f7fd f9e3 	bl	8000fc4 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	e00e      	b.n	8003c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c02:	f7fd f9df 	bl	8000fc4 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d907      	bls.n	8003c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e150      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470000 	.word	0x42470000
 8003c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ea      	bne.n	8003c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8097 	beq.w	8003d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3e:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	4b7d      	ldr	r3, [pc, #500]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a7c      	ldr	r2, [pc, #496]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d118      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c76:	4b74      	ldr	r3, [pc, #464]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a73      	ldr	r2, [pc, #460]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c82:	f7fd f99f 	bl	8000fc4 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fd f99b 	bl	8000fc4 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e10c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2ea>
 8003cb0:	4b64      	ldr	r3, [pc, #400]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a63      	ldr	r2, [pc, #396]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x30c>
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a5e      	ldr	r2, [pc, #376]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a5b      	ldr	r2, [pc, #364]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003ce0:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a57      	ldr	r2, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	4b55      	ldr	r3, [pc, #340]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a54      	ldr	r2, [pc, #336]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f023 0304 	bic.w	r3, r3, #4
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd f960 	bl	8000fc4 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd f95c 	bl	8000fc4 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0cb      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ee      	beq.n	8003d08 <HAL_RCC_OscConfig+0x334>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2c:	f7fd f94a 	bl	8000fc4 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd f946 	bl	8000fc4 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0b5      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ee      	bne.n	8003d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a1 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d72:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d05c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d141      	bne.n	8003e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f91a 	bl	8000fc4 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fd f916 	bl	8000fc4 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e087      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	491b      	ldr	r1, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fd f8ef 	bl	8000fc4 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd f8eb 	bl	8000fc4 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e05c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x416>
 8003e08:	e054      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd f8d8 	bl	8000fc4 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fd f8d4 	bl	8000fc4 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e045      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x444>
 8003e36:	e03d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e038      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x4ec>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d028      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d121      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d11a      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d111      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800

08003ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cc      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b68      	ldr	r3, [pc, #416]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90c      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d044      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e067      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4934      	ldr	r1, [pc, #208]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd f806 	bl	8000fc4 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fd f802 	bl	8000fc4 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d20c      	bcs.n	800400c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404a:	f000 f821 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	490a      	ldr	r1, [pc, #40]	; (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc ff66 	bl	8000f3c <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	080085f4 	.word	0x080085f4
 8004088:	20000008 	.word	0x20000008
 800408c:	2000000c 	.word	0x2000000c

08004090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b094      	sub	sp, #80	; 0x50
 8004096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	647b      	str	r3, [r7, #68]	; 0x44
 800409c:	2300      	movs	r3, #0
 800409e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040a0:	2300      	movs	r3, #0
 80040a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a8:	4b79      	ldr	r3, [pc, #484]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d00d      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x40>
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	f200 80e1 	bhi.w	800427c <HAL_RCC_GetSysClockFreq+0x1ec>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x34>
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x3a>
 80040c2:	e0db      	b.n	800427c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4b73      	ldr	r3, [pc, #460]	; (8004294 <HAL_RCC_GetSysClockFreq+0x204>)
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80040c8:	e0db      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ca:	4b73      	ldr	r3, [pc, #460]	; (8004298 <HAL_RCC_GetSysClockFreq+0x208>)
 80040cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040ce:	e0d8      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d0:	4b6f      	ldr	r3, [pc, #444]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040da:	4b6d      	ldr	r3, [pc, #436]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d063      	beq.n	80041ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4b6a      	ldr	r3, [pc, #424]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	2200      	movs	r2, #0
 80040ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80040f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80040f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040f8:	633b      	str	r3, [r7, #48]	; 0x30
 80040fa:	2300      	movs	r3, #0
 80040fc:	637b      	str	r3, [r7, #52]	; 0x34
 80040fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004102:	4622      	mov	r2, r4
 8004104:	462b      	mov	r3, r5
 8004106:	f04f 0000 	mov.w	r0, #0
 800410a:	f04f 0100 	mov.w	r1, #0
 800410e:	0159      	lsls	r1, r3, #5
 8004110:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004114:	0150      	lsls	r0, r2, #5
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4621      	mov	r1, r4
 800411c:	1a51      	subs	r1, r2, r1
 800411e:	6139      	str	r1, [r7, #16]
 8004120:	4629      	mov	r1, r5
 8004122:	eb63 0301 	sbc.w	r3, r3, r1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	f04f 0200 	mov.w	r2, #0
 800412c:	f04f 0300 	mov.w	r3, #0
 8004130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004134:	4659      	mov	r1, fp
 8004136:	018b      	lsls	r3, r1, #6
 8004138:	4651      	mov	r1, sl
 800413a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800413e:	4651      	mov	r1, sl
 8004140:	018a      	lsls	r2, r1, #6
 8004142:	4651      	mov	r1, sl
 8004144:	ebb2 0801 	subs.w	r8, r2, r1
 8004148:	4659      	mov	r1, fp
 800414a:	eb63 0901 	sbc.w	r9, r3, r1
 800414e:	f04f 0200 	mov.w	r2, #0
 8004152:	f04f 0300 	mov.w	r3, #0
 8004156:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800415a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800415e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004162:	4690      	mov	r8, r2
 8004164:	4699      	mov	r9, r3
 8004166:	4623      	mov	r3, r4
 8004168:	eb18 0303 	adds.w	r3, r8, r3
 800416c:	60bb      	str	r3, [r7, #8]
 800416e:	462b      	mov	r3, r5
 8004170:	eb49 0303 	adc.w	r3, r9, r3
 8004174:	60fb      	str	r3, [r7, #12]
 8004176:	f04f 0200 	mov.w	r2, #0
 800417a:	f04f 0300 	mov.w	r3, #0
 800417e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004182:	4629      	mov	r1, r5
 8004184:	024b      	lsls	r3, r1, #9
 8004186:	4621      	mov	r1, r4
 8004188:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800418c:	4621      	mov	r1, r4
 800418e:	024a      	lsls	r2, r1, #9
 8004190:	4610      	mov	r0, r2
 8004192:	4619      	mov	r1, r3
 8004194:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004196:	2200      	movs	r2, #0
 8004198:	62bb      	str	r3, [r7, #40]	; 0x28
 800419a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800419c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041a0:	f7fc f812 	bl	80001c8 <__aeabi_uldivmod>
 80041a4:	4602      	mov	r2, r0
 80041a6:	460b      	mov	r3, r1
 80041a8:	4613      	mov	r3, r2
 80041aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ac:	e058      	b.n	8004260 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041ae:	4b38      	ldr	r3, [pc, #224]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	099b      	lsrs	r3, r3, #6
 80041b4:	2200      	movs	r2, #0
 80041b6:	4618      	mov	r0, r3
 80041b8:	4611      	mov	r1, r2
 80041ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	2300      	movs	r3, #0
 80041c2:	627b      	str	r3, [r7, #36]	; 0x24
 80041c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80041c8:	4642      	mov	r2, r8
 80041ca:	464b      	mov	r3, r9
 80041cc:	f04f 0000 	mov.w	r0, #0
 80041d0:	f04f 0100 	mov.w	r1, #0
 80041d4:	0159      	lsls	r1, r3, #5
 80041d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041da:	0150      	lsls	r0, r2, #5
 80041dc:	4602      	mov	r2, r0
 80041de:	460b      	mov	r3, r1
 80041e0:	4641      	mov	r1, r8
 80041e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80041e6:	4649      	mov	r1, r9
 80041e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80041f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80041fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004200:	ebb2 040a 	subs.w	r4, r2, sl
 8004204:	eb63 050b 	sbc.w	r5, r3, fp
 8004208:	f04f 0200 	mov.w	r2, #0
 800420c:	f04f 0300 	mov.w	r3, #0
 8004210:	00eb      	lsls	r3, r5, #3
 8004212:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004216:	00e2      	lsls	r2, r4, #3
 8004218:	4614      	mov	r4, r2
 800421a:	461d      	mov	r5, r3
 800421c:	4643      	mov	r3, r8
 800421e:	18e3      	adds	r3, r4, r3
 8004220:	603b      	str	r3, [r7, #0]
 8004222:	464b      	mov	r3, r9
 8004224:	eb45 0303 	adc.w	r3, r5, r3
 8004228:	607b      	str	r3, [r7, #4]
 800422a:	f04f 0200 	mov.w	r2, #0
 800422e:	f04f 0300 	mov.w	r3, #0
 8004232:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004236:	4629      	mov	r1, r5
 8004238:	028b      	lsls	r3, r1, #10
 800423a:	4621      	mov	r1, r4
 800423c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004240:	4621      	mov	r1, r4
 8004242:	028a      	lsls	r2, r1, #10
 8004244:	4610      	mov	r0, r2
 8004246:	4619      	mov	r1, r3
 8004248:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800424a:	2200      	movs	r2, #0
 800424c:	61bb      	str	r3, [r7, #24]
 800424e:	61fa      	str	r2, [r7, #28]
 8004250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004254:	f7fb ffb8 	bl	80001c8 <__aeabi_uldivmod>
 8004258:	4602      	mov	r2, r0
 800425a:	460b      	mov	r3, r1
 800425c:	4613      	mov	r3, r2
 800425e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004260:	4b0b      	ldr	r3, [pc, #44]	; (8004290 <HAL_RCC_GetSysClockFreq+0x200>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	0c1b      	lsrs	r3, r3, #16
 8004266:	f003 0303 	and.w	r3, r3, #3
 800426a:	3301      	adds	r3, #1
 800426c:	005b      	lsls	r3, r3, #1
 800426e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004270:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004274:	fbb2 f3f3 	udiv	r3, r2, r3
 8004278:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800427a:	e002      	b.n	8004282 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800427c:	4b05      	ldr	r3, [pc, #20]	; (8004294 <HAL_RCC_GetSysClockFreq+0x204>)
 800427e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004280:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004284:	4618      	mov	r0, r3
 8004286:	3750      	adds	r7, #80	; 0x50
 8004288:	46bd      	mov	sp, r7
 800428a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800428e:	bf00      	nop
 8004290:	40023800 	.word	0x40023800
 8004294:	00f42400 	.word	0x00f42400
 8004298:	007a1200 	.word	0x007a1200

0800429c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042a0:	4b03      	ldr	r3, [pc, #12]	; (80042b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80042a2:	681b      	ldr	r3, [r3, #0]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000008 	.word	0x20000008

080042b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042b8:	f7ff fff0 	bl	800429c <HAL_RCC_GetHCLKFreq>
 80042bc:	4602      	mov	r2, r0
 80042be:	4b05      	ldr	r3, [pc, #20]	; (80042d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	0a9b      	lsrs	r3, r3, #10
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	4903      	ldr	r1, [pc, #12]	; (80042d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ca:	5ccb      	ldrb	r3, [r1, r3]
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40023800 	.word	0x40023800
 80042d8:	08008604 	.word	0x08008604

080042dc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0301 	and.w	r3, r3, #1
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d105      	bne.n	8004304 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004300:	2b00      	cmp	r3, #0
 8004302:	d035      	beq.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004304:	4b62      	ldr	r3, [pc, #392]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004306:	2200      	movs	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800430a:	f7fc fe5b 	bl	8000fc4 <HAL_GetTick>
 800430e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004310:	e008      	b.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004312:	f7fc fe57 	bl	8000fc4 <HAL_GetTick>
 8004316:	4602      	mov	r2, r0
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	1ad3      	subs	r3, r2, r3
 800431c:	2b02      	cmp	r3, #2
 800431e:	d901      	bls.n	8004324 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0b0      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004324:	4b5b      	ldr	r3, [pc, #364]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1f0      	bne.n	8004312 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	019a      	lsls	r2, r3, #6
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	071b      	lsls	r3, r3, #28
 800433c:	4955      	ldr	r1, [pc, #340]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800433e:	4313      	orrs	r3, r2
 8004340:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004344:	4b52      	ldr	r3, [pc, #328]	; (8004490 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004346:	2201      	movs	r2, #1
 8004348:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800434a:	f7fc fe3b 	bl	8000fc4 <HAL_GetTick>
 800434e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004350:	e008      	b.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004352:	f7fc fe37 	bl	8000fc4 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e090      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004364:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d0f0      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	f000 8083 	beq.w	8004484 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	4b44      	ldr	r3, [pc, #272]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004386:	4a43      	ldr	r2, [pc, #268]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004388:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800438c:	6413      	str	r3, [r2, #64]	; 0x40
 800438e:	4b41      	ldr	r3, [pc, #260]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004396:	60fb      	str	r3, [r7, #12]
 8004398:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800439a:	4b3f      	ldr	r3, [pc, #252]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a3e      	ldr	r2, [pc, #248]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043a6:	f7fc fe0d 	bl	8000fc4 <HAL_GetTick>
 80043aa:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043ae:	f7fc fe09 	bl	8000fc4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e062      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043c0:	4b35      	ldr	r3, [pc, #212]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80043cc:	4b31      	ldr	r3, [pc, #196]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d02f      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d028      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80043ea:	4b2a      	ldr	r3, [pc, #168]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043f2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80043f4:	4b29      	ldr	r3, [pc, #164]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043f6:	2201      	movs	r2, #1
 80043f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043fa:	4b28      	ldr	r3, [pc, #160]	; (800449c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004400:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004406:	4b23      	ldr	r3, [pc, #140]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004408:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b01      	cmp	r3, #1
 8004410:	d114      	bne.n	800443c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004412:	f7fc fdd7 	bl	8000fc4 <HAL_GetTick>
 8004416:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004418:	e00a      	b.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800441a:	f7fc fdd3 	bl	8000fc4 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	f241 3288 	movw	r2, #5000	; 0x1388
 8004428:	4293      	cmp	r3, r2
 800442a:	d901      	bls.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e02a      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004430:	4b18      	ldr	r3, [pc, #96]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0ee      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004448:	d10d      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800444a:	4b12      	ldr	r3, [pc, #72]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800445a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800445e:	490d      	ldr	r1, [pc, #52]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004460:	4313      	orrs	r3, r2
 8004462:	608b      	str	r3, [r1, #8]
 8004464:	e005      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004466:	4b0b      	ldr	r3, [pc, #44]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800446c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004470:	6093      	str	r3, [r2, #8]
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004474:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447e:	4905      	ldr	r1, [pc, #20]	; (8004494 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004480:	4313      	orrs	r3, r2
 8004482:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004484:	2300      	movs	r3, #0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3718      	adds	r7, #24
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}
 800448e:	bf00      	nop
 8004490:	42470068 	.word	0x42470068
 8004494:	40023800 	.word	0x40023800
 8004498:	40007000 	.word	0x40007000
 800449c:	42470e40 	.word	0x42470e40

080044a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044a8:	2300      	movs	r3, #0
 80044aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044ac:	2300      	movs	r3, #0
 80044ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044b0:	2300      	movs	r3, #0
 80044b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80044b4:	2300      	movs	r3, #0
 80044b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d13e      	bne.n	800453c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80044be:	4b23      	ldr	r3, [pc, #140]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d005      	beq.n	80044da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d12f      	bne.n	8004534 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80044d6:	617b      	str	r3, [r7, #20]
          break;
 80044d8:	e02f      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80044da:	4b1c      	ldr	r3, [pc, #112]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80044e6:	d108      	bne.n	80044fa <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044f0:	4a18      	ldr	r2, [pc, #96]	; (8004554 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80044f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044f6:	613b      	str	r3, [r7, #16]
 80044f8:	e007      	b.n	800450a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80044fa:	4b14      	ldr	r3, [pc, #80]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004502:	4a15      	ldr	r2, [pc, #84]	; (8004558 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800450a:	4b10      	ldr	r3, [pc, #64]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004510:	099b      	lsrs	r3, r3, #6
 8004512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	fb02 f303 	mul.w	r3, r2, r3
 800451c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800451e:	4b0b      	ldr	r3, [pc, #44]	; (800454c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004524:	0f1b      	lsrs	r3, r3, #28
 8004526:	f003 0307 	and.w	r3, r3, #7
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004530:	617b      	str	r3, [r7, #20]
          break;
 8004532:	e002      	b.n	800453a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
          break;
 8004538:	bf00      	nop
        }
      }
      break;
 800453a:	bf00      	nop
    }
  }
  return frequency;
 800453c:	697b      	ldr	r3, [r7, #20]
}
 800453e:	4618      	mov	r0, r3
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr
 800454a:	bf00      	nop
 800454c:	40023800 	.word	0x40023800
 8004550:	00bb8000 	.word	0x00bb8000
 8004554:	007a1200 	.word	0x007a1200
 8004558:	00f42400 	.word	0x00f42400

0800455c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b082      	sub	sp, #8
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07b      	b.n	8004666 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d108      	bne.n	8004588 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800457e:	d009      	beq.n	8004594 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2200      	movs	r2, #0
 8004584:	61da      	str	r2, [r3, #28]
 8004586:	e005      	b.n	8004594 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2200      	movs	r2, #0
 8004598:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d106      	bne.n	80045b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7fc fb4c 	bl	8000c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045ca:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	431a      	orrs	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	f003 0301 	and.w	r3, r3, #1
 80045fa:	431a      	orrs	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	699b      	ldr	r3, [r3, #24]
 8004600:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004618:	ea42 0103 	orr.w	r1, r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004620:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	430a      	orrs	r2, r1
 800462a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	699b      	ldr	r3, [r3, #24]
 8004630:	0c1b      	lsrs	r3, r3, #16
 8004632:	f003 0104 	and.w	r1, r3, #4
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463a:	f003 0210 	and.w	r2, r3, #16
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	69da      	ldr	r2, [r3, #28]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004654:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004664:	2300      	movs	r3, #0
}
 8004666:	4618      	mov	r0, r3
 8004668:	3708      	adds	r7, #8
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b08c      	sub	sp, #48	; 0x30
 8004672:	af00      	add	r7, sp, #0
 8004674:	60f8      	str	r0, [r7, #12]
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	607a      	str	r2, [r7, #4]
 800467a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800467c:	2301      	movs	r3, #1
 800467e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004680:	2300      	movs	r3, #0
 8004682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800468c:	2b01      	cmp	r3, #1
 800468e:	d101      	bne.n	8004694 <HAL_SPI_TransmitReceive+0x26>
 8004690:	2302      	movs	r3, #2
 8004692:	e18a      	b.n	80049aa <HAL_SPI_TransmitReceive+0x33c>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800469c:	f7fc fc92 	bl	8000fc4 <HAL_GetTick>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80046b2:	887b      	ldrh	r3, [r7, #2]
 80046b4:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80046b6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d00f      	beq.n	80046de <HAL_SPI_TransmitReceive+0x70>
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046c4:	d107      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d103      	bne.n	80046d6 <HAL_SPI_TransmitReceive+0x68>
 80046ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d003      	beq.n	80046de <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80046d6:	2302      	movs	r3, #2
 80046d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046dc:	e15b      	b.n	8004996 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d005      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x82>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_TransmitReceive+0x82>
 80046ea:	887b      	ldrh	r3, [r7, #2]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d103      	bne.n	80046f8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80046f0:	2301      	movs	r3, #1
 80046f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80046f6:	e14e      	b.n	8004996 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b04      	cmp	r3, #4
 8004702:	d003      	beq.n	800470c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2205      	movs	r2, #5
 8004708:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	887a      	ldrh	r2, [r7, #2]
 800471c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	887a      	ldrh	r2, [r7, #2]
 8004722:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	887a      	ldrh	r2, [r7, #2]
 800472e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	887a      	ldrh	r2, [r7, #2]
 8004734:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800474c:	2b40      	cmp	r3, #64	; 0x40
 800474e:	d007      	beq.n	8004760 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800475e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004768:	d178      	bne.n	800485c <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_SPI_TransmitReceive+0x10a>
 8004772:	8b7b      	ldrh	r3, [r7, #26]
 8004774:	2b01      	cmp	r3, #1
 8004776:	d166      	bne.n	8004846 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800477c:	881a      	ldrh	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004788:	1c9a      	adds	r2, r3, #2
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004792:	b29b      	uxth	r3, r3
 8004794:	3b01      	subs	r3, #1
 8004796:	b29a      	uxth	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800479c:	e053      	b.n	8004846 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	f003 0302 	and.w	r3, r3, #2
 80047a8:	2b02      	cmp	r3, #2
 80047aa:	d11b      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x176>
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d016      	beq.n	80047e4 <HAL_SPI_TransmitReceive+0x176>
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d113      	bne.n	80047e4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	881a      	ldrh	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	1c9a      	adds	r2, r3, #2
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29a      	uxth	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80047e0:	2300      	movs	r3, #0
 80047e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d119      	bne.n	8004826 <HAL_SPI_TransmitReceive+0x1b8>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d014      	beq.n	8004826 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	b292      	uxth	r2, r2
 8004808:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480e:	1c9a      	adds	r2, r3, #2
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004822:	2301      	movs	r3, #1
 8004824:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004826:	f7fc fbcd 	bl	8000fc4 <HAL_GetTick>
 800482a:	4602      	mov	r2, r0
 800482c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800482e:	1ad3      	subs	r3, r2, r3
 8004830:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004832:	429a      	cmp	r2, r3
 8004834:	d807      	bhi.n	8004846 <HAL_SPI_TransmitReceive+0x1d8>
 8004836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d003      	beq.n	8004846 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800483e:	2303      	movs	r3, #3
 8004840:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004844:	e0a7      	b.n	8004996 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800484a:	b29b      	uxth	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d1a6      	bne.n	800479e <HAL_SPI_TransmitReceive+0x130>
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004854:	b29b      	uxth	r3, r3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1a1      	bne.n	800479e <HAL_SPI_TransmitReceive+0x130>
 800485a:	e07c      	b.n	8004956 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d002      	beq.n	800486a <HAL_SPI_TransmitReceive+0x1fc>
 8004864:	8b7b      	ldrh	r3, [r7, #26]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d16b      	bne.n	8004942 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	330c      	adds	r3, #12
 8004874:	7812      	ldrb	r2, [r2, #0]
 8004876:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004886:	b29b      	uxth	r3, r3
 8004888:	3b01      	subs	r3, #1
 800488a:	b29a      	uxth	r2, r3
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004890:	e057      	b.n	8004942 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f003 0302 	and.w	r3, r3, #2
 800489c:	2b02      	cmp	r3, #2
 800489e:	d11c      	bne.n	80048da <HAL_SPI_TransmitReceive+0x26c>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048a4:	b29b      	uxth	r3, r3
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d017      	beq.n	80048da <HAL_SPI_TransmitReceive+0x26c>
 80048aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d114      	bne.n	80048da <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	7812      	ldrb	r2, [r2, #0]
 80048bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	1c5a      	adds	r2, r3, #1
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80048cc:	b29b      	uxth	r3, r3
 80048ce:	3b01      	subs	r3, #1
 80048d0:	b29a      	uxth	r2, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80048d6:	2300      	movs	r3, #0
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	f003 0301 	and.w	r3, r3, #1
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d119      	bne.n	800491c <HAL_SPI_TransmitReceive+0x2ae>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d014      	beq.n	800491c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004904:	1c5a      	adds	r2, r3, #1
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800490e:	b29b      	uxth	r3, r3
 8004910:	3b01      	subs	r3, #1
 8004912:	b29a      	uxth	r2, r3
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004918:	2301      	movs	r3, #1
 800491a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800491c:	f7fc fb52 	bl	8000fc4 <HAL_GetTick>
 8004920:	4602      	mov	r2, r0
 8004922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004924:	1ad3      	subs	r3, r2, r3
 8004926:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004928:	429a      	cmp	r2, r3
 800492a:	d803      	bhi.n	8004934 <HAL_SPI_TransmitReceive+0x2c6>
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d102      	bne.n	800493a <HAL_SPI_TransmitReceive+0x2cc>
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	2b00      	cmp	r3, #0
 8004938:	d103      	bne.n	8004942 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004940:	e029      	b.n	8004996 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004946:	b29b      	uxth	r3, r3
 8004948:	2b00      	cmp	r3, #0
 800494a:	d1a2      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x224>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004950:	b29b      	uxth	r3, r3
 8004952:	2b00      	cmp	r3, #0
 8004954:	d19d      	bne.n	8004892 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f000 f9de 	bl	8004d1c <SPI_EndRxTxTransaction>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d006      	beq.n	8004974 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004966:	2301      	movs	r3, #1
 8004968:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004972:	e010      	b.n	8004996 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	689b      	ldr	r3, [r3, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d10b      	bne.n	8004994 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	617b      	str	r3, [r7, #20]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	617b      	str	r3, [r7, #20]
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	e000      	b.n	8004996 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004994:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2201      	movs	r2, #1
 800499a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80049a6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	3730      	adds	r7, #48	; 0x30
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
	...

080049b4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	099b      	lsrs	r3, r3, #6
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d10f      	bne.n	80049f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	099b      	lsrs	r3, r3, #6
 80049e6:	f003 0301 	and.w	r3, r3, #1
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d004      	beq.n	80049f8 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	4798      	blx	r3
    return;
 80049f6:	e0d7      	b.n	8004ba8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	085b      	lsrs	r3, r3, #1
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00a      	beq.n	8004a1a <HAL_SPI_IRQHandler+0x66>
 8004a04:	69fb      	ldr	r3, [r7, #28]
 8004a06:	09db      	lsrs	r3, r3, #7
 8004a08:	f003 0301 	and.w	r3, r3, #1
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d004      	beq.n	8004a1a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	4798      	blx	r3
    return;
 8004a18:	e0c6      	b.n	8004ba8 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	095b      	lsrs	r3, r3, #5
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10c      	bne.n	8004a40 <HAL_SPI_IRQHandler+0x8c>
 8004a26:	69bb      	ldr	r3, [r7, #24]
 8004a28:	099b      	lsrs	r3, r3, #6
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d106      	bne.n	8004a40 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	0a1b      	lsrs	r3, r3, #8
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 80b4 	beq.w	8004ba8 <HAL_SPI_IRQHandler+0x1f4>
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	095b      	lsrs	r3, r3, #5
 8004a44:	f003 0301 	and.w	r3, r3, #1
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80ad 	beq.w	8004ba8 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	099b      	lsrs	r3, r3, #6
 8004a52:	f003 0301 	and.w	r3, r3, #1
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d023      	beq.n	8004aa2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a60:	b2db      	uxtb	r3, r3
 8004a62:	2b03      	cmp	r3, #3
 8004a64:	d011      	beq.n	8004a8a <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a6a:	f043 0204 	orr.w	r2, r3, #4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	617b      	str	r3, [r7, #20]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	689b      	ldr	r3, [r3, #8]
 8004a84:	617b      	str	r3, [r7, #20]
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	e00b      	b.n	8004aa2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	613b      	str	r3, [r7, #16]
 8004a9e:	693b      	ldr	r3, [r7, #16]
        return;
 8004aa0:	e082      	b.n	8004ba8 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d014      	beq.n	8004ad8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ab2:	f043 0201 	orr.w	r2, r3, #1
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ad4:	601a      	str	r2, [r3, #0]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	0a1b      	lsrs	r3, r3, #8
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00c      	beq.n	8004afe <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f043 0208 	orr.w	r2, r3, #8
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004af0:	2300      	movs	r3, #0
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	60bb      	str	r3, [r7, #8]
 8004afc:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d04f      	beq.n	8004ba6 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004b14:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d104      	bne.n	8004b32 <HAL_SPI_IRQHandler+0x17e>
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	f003 0301 	and.w	r3, r3, #1
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d034      	beq.n	8004b9c <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685a      	ldr	r2, [r3, #4]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0203 	bic.w	r2, r2, #3
 8004b40:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d011      	beq.n	8004b6e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b4e:	4a18      	ldr	r2, [pc, #96]	; (8004bb0 <HAL_SPI_IRQHandler+0x1fc>)
 8004b50:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b56:	4618      	mov	r0, r3
 8004b58:	f7fc fb75 	bl	8001246 <HAL_DMA_Abort_IT>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d005      	beq.n	8004b6e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d016      	beq.n	8004ba4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b7a:	4a0d      	ldr	r2, [pc, #52]	; (8004bb0 <HAL_SPI_IRQHandler+0x1fc>)
 8004b7c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b82:	4618      	mov	r0, r3
 8004b84:	f7fc fb5f 	bl	8001246 <HAL_DMA_Abort_IT>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00a      	beq.n	8004ba4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b92:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8004b9a:	e003      	b.n	8004ba4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f000 f809 	bl	8004bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8004ba2:	e000      	b.n	8004ba6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004ba4:	bf00      	nop
    return;
 8004ba6:	bf00      	nop
  }
}
 8004ba8:	3720      	adds	r7, #32
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	08004be5 	.word	0x08004be5

08004bb4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004bbc:	bf00      	nop
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bd6:	b2db      	uxtb	r3, r3
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	370c      	adds	r7, #12
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b084      	sub	sp, #16
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bf0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f7ff ffd8 	bl	8004bb4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004c04:	bf00      	nop
 8004c06:	3710      	adds	r7, #16
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	60f8      	str	r0, [r7, #12]
 8004c14:	60b9      	str	r1, [r7, #8]
 8004c16:	603b      	str	r3, [r7, #0]
 8004c18:	4613      	mov	r3, r2
 8004c1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c1c:	f7fc f9d2 	bl	8000fc4 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c24:	1a9b      	subs	r3, r3, r2
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c2c:	f7fc f9ca 	bl	8000fc4 <HAL_GetTick>
 8004c30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c32:	4b39      	ldr	r3, [pc, #228]	; (8004d18 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	015b      	lsls	r3, r3, #5
 8004c38:	0d1b      	lsrs	r3, r3, #20
 8004c3a:	69fa      	ldr	r2, [r7, #28]
 8004c3c:	fb02 f303 	mul.w	r3, r2, r3
 8004c40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c42:	e054      	b.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4a:	d050      	beq.n	8004cee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c4c:	f7fc f9ba 	bl	8000fc4 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	69fa      	ldr	r2, [r7, #28]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d902      	bls.n	8004c62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d13d      	bne.n	8004cde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	685a      	ldr	r2, [r3, #4]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	685b      	ldr	r3, [r3, #4]
 8004c76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c7a:	d111      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c84:	d004      	beq.n	8004c90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c8e:	d107      	bne.n	8004ca0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d10f      	bne.n	8004cca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004cb8:	601a      	str	r2, [r3, #0]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681a      	ldr	r2, [r3, #0]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e017      	b.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	3b01      	subs	r3, #1
 8004cec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4013      	ands	r3, r2
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	bf0c      	ite	eq
 8004cfe:	2301      	moveq	r3, #1
 8004d00:	2300      	movne	r3, #0
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	461a      	mov	r2, r3
 8004d06:	79fb      	ldrb	r3, [r7, #7]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d19b      	bne.n	8004c44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d0c:	2300      	movs	r3, #0
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	20000008 	.word	0x20000008

08004d1c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b088      	sub	sp, #32
 8004d20:	af02      	add	r7, sp, #8
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d28:	4b1b      	ldr	r3, [pc, #108]	; (8004d98 <SPI_EndRxTxTransaction+0x7c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1b      	ldr	r2, [pc, #108]	; (8004d9c <SPI_EndRxTxTransaction+0x80>)
 8004d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d32:	0d5b      	lsrs	r3, r3, #21
 8004d34:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d38:	fb02 f303 	mul.w	r3, r2, r3
 8004d3c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d46:	d112      	bne.n	8004d6e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	9300      	str	r3, [sp, #0]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	2180      	movs	r1, #128	; 0x80
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f7ff ff5a 	bl	8004c0c <SPI_WaitFlagStateUntilTimeout>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d016      	beq.n	8004d8c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	f043 0220 	orr.w	r2, r3, #32
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e00f      	b.n	8004d8e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d00a      	beq.n	8004d8a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d84:	2b80      	cmp	r3, #128	; 0x80
 8004d86:	d0f2      	beq.n	8004d6e <SPI_EndRxTxTransaction+0x52>
 8004d88:	e000      	b.n	8004d8c <SPI_EndRxTxTransaction+0x70>
        break;
 8004d8a:	bf00      	nop
  }

  return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop
 8004d98:	20000008 	.word	0x20000008
 8004d9c:	165e9f81 	.word	0x165e9f81

08004da0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004da0:	b084      	sub	sp, #16
 8004da2:	b580      	push	{r7, lr}
 8004da4:	b084      	sub	sp, #16
 8004da6:	af00      	add	r7, sp, #0
 8004da8:	6078      	str	r0, [r7, #4]
 8004daa:	f107 001c 	add.w	r0, r7, #28
 8004dae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004db2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d122      	bne.n	8004dfe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004dcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004de0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d105      	bne.n	8004df2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f9c0 	bl	8005178 <USB_CoreReset>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	73fb      	strb	r3, [r7, #15]
 8004dfc:	e01a      	b.n	8004e34 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9b4 	bl	8005178 <USB_CoreReset>
 8004e10:	4603      	mov	r3, r0
 8004e12:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	639a      	str	r2, [r3, #56]	; 0x38
 8004e26:	e005      	b.n	8004e34 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d10b      	bne.n	8004e52 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	f043 0206 	orr.w	r2, r3, #6
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f043 0220 	orr.w	r2, r3, #32
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e5e:	b004      	add	sp, #16
 8004e60:	4770      	bx	lr

08004e62 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e62:	b480      	push	{r7}
 8004e64:	b083      	sub	sp, #12
 8004e66:	af00      	add	r7, sp, #0
 8004e68:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f043 0201 	orr.w	r2, r3, #1
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e76:	2300      	movs	r3, #0
}
 8004e78:	4618      	mov	r0, r3
 8004e7a:	370c      	adds	r7, #12
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e82:	4770      	bx	lr

08004e84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f023 0201 	bic.w	r2, r3, #1
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b084      	sub	sp, #16
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	460b      	mov	r3, r1
 8004eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ec2:	78fb      	ldrb	r3, [r7, #3]
 8004ec4:	2b01      	cmp	r3, #1
 8004ec6:	d115      	bne.n	8004ef4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ed4:	2001      	movs	r0, #1
 8004ed6:	f7fc f881 	bl	8000fdc <HAL_Delay>
      ms++;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f93a 	bl	800515a <USB_GetMode>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d01e      	beq.n	8004f2a <USB_SetCurrentMode+0x84>
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	2b31      	cmp	r3, #49	; 0x31
 8004ef0:	d9f0      	bls.n	8004ed4 <USB_SetCurrentMode+0x2e>
 8004ef2:	e01a      	b.n	8004f2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ef4:	78fb      	ldrb	r3, [r7, #3]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d115      	bne.n	8004f26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004f06:	2001      	movs	r0, #1
 8004f08:	f7fc f868 	bl	8000fdc <HAL_Delay>
      ms++;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	3301      	adds	r3, #1
 8004f10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f921 	bl	800515a <USB_GetMode>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d005      	beq.n	8004f2a <USB_SetCurrentMode+0x84>
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2b31      	cmp	r3, #49	; 0x31
 8004f22:	d9f0      	bls.n	8004f06 <USB_SetCurrentMode+0x60>
 8004f24:	e001      	b.n	8004f2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e005      	b.n	8004f36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b32      	cmp	r3, #50	; 0x32
 8004f2e:	d101      	bne.n	8004f34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3710      	adds	r7, #16
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
	...

08004f40 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3301      	adds	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4a13      	ldr	r2, [pc, #76]	; (8004fa4 <USB_FlushTxFifo+0x64>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d901      	bls.n	8004f60 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004f5c:	2303      	movs	r3, #3
 8004f5e:	e01b      	b.n	8004f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	691b      	ldr	r3, [r3, #16]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	daf2      	bge.n	8004f4e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	019b      	lsls	r3, r3, #6
 8004f70:	f043 0220 	orr.w	r2, r3, #32
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <USB_FlushTxFifo+0x64>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d901      	bls.n	8004f8a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004f86:	2303      	movs	r3, #3
 8004f88:	e006      	b.n	8004f98 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	f003 0320 	and.w	r3, r3, #32
 8004f92:	2b20      	cmp	r3, #32
 8004f94:	d0f0      	beq.n	8004f78 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	00030d40 	.word	0x00030d40

08004fa8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	4a11      	ldr	r2, [pc, #68]	; (8005004 <USB_FlushRxFifo+0x5c>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d901      	bls.n	8004fc6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004fc2:	2303      	movs	r3, #3
 8004fc4:	e018      	b.n	8004ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	daf2      	bge.n	8004fb4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2210      	movs	r2, #16
 8004fd6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	3301      	adds	r3, #1
 8004fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	4a08      	ldr	r2, [pc, #32]	; (8005004 <USB_FlushRxFifo+0x5c>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e006      	b.n	8004ff8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	691b      	ldr	r3, [r3, #16]
 8004fee:	f003 0310 	and.w	r3, r3, #16
 8004ff2:	2b10      	cmp	r3, #16
 8004ff4:	d0f0      	beq.n	8004fd8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004ff6:	2300      	movs	r3, #0
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3714      	adds	r7, #20
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	00030d40 	.word	0x00030d40

08005008 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005008:	b480      	push	{r7}
 800500a:	b089      	sub	sp, #36	; 0x24
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	4611      	mov	r1, r2
 8005014:	461a      	mov	r2, r3
 8005016:	460b      	mov	r3, r1
 8005018:	71fb      	strb	r3, [r7, #7]
 800501a:	4613      	mov	r3, r2
 800501c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005026:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800502a:	2b00      	cmp	r3, #0
 800502c:	d123      	bne.n	8005076 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800502e:	88bb      	ldrh	r3, [r7, #4]
 8005030:	3303      	adds	r3, #3
 8005032:	089b      	lsrs	r3, r3, #2
 8005034:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005036:	2300      	movs	r3, #0
 8005038:	61bb      	str	r3, [r7, #24]
 800503a:	e018      	b.n	800506e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800503c:	79fb      	ldrb	r3, [r7, #7]
 800503e:	031a      	lsls	r2, r3, #12
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	4413      	add	r3, r2
 8005044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005048:	461a      	mov	r2, r3
 800504a:	69fb      	ldr	r3, [r7, #28]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	3301      	adds	r3, #1
 8005054:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	3301      	adds	r3, #1
 800505a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	3301      	adds	r3, #1
 8005060:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	3301      	adds	r3, #1
 8005066:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	3301      	adds	r3, #1
 800506c:	61bb      	str	r3, [r7, #24]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	429a      	cmp	r2, r3
 8005074:	d3e2      	bcc.n	800503c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3724      	adds	r7, #36	; 0x24
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005084:	b480      	push	{r7}
 8005086:	b08b      	sub	sp, #44	; 0x2c
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800509a:	88fb      	ldrh	r3, [r7, #6]
 800509c:	089b      	lsrs	r3, r3, #2
 800509e:	b29b      	uxth	r3, r3
 80050a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050a2:	88fb      	ldrh	r3, [r7, #6]
 80050a4:	f003 0303 	and.w	r3, r3, #3
 80050a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050aa:	2300      	movs	r3, #0
 80050ac:	623b      	str	r3, [r7, #32]
 80050ae:	e014      	b.n	80050da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050b0:	69bb      	ldr	r3, [r7, #24]
 80050b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	3301      	adds	r3, #1
 80050c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c4:	3301      	adds	r3, #1
 80050c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	3301      	adds	r3, #1
 80050cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80050ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d0:	3301      	adds	r3, #1
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	3301      	adds	r3, #1
 80050d8:	623b      	str	r3, [r7, #32]
 80050da:	6a3a      	ldr	r2, [r7, #32]
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	429a      	cmp	r2, r3
 80050e0:	d3e6      	bcc.n	80050b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80050e2:	8bfb      	ldrh	r3, [r7, #30]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01e      	beq.n	8005126 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050f2:	461a      	mov	r2, r3
 80050f4:	f107 0310 	add.w	r3, r7, #16
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80050fc:	693a      	ldr	r2, [r7, #16]
 80050fe:	6a3b      	ldr	r3, [r7, #32]
 8005100:	b2db      	uxtb	r3, r3
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	fa22 f303 	lsr.w	r3, r2, r3
 8005108:	b2da      	uxtb	r2, r3
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	701a      	strb	r2, [r3, #0]
      i++;
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	3301      	adds	r3, #1
 8005112:	623b      	str	r3, [r7, #32]
      pDest++;
 8005114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005116:	3301      	adds	r3, #1
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800511a:	8bfb      	ldrh	r3, [r7, #30]
 800511c:	3b01      	subs	r3, #1
 800511e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005120:	8bfb      	ldrh	r3, [r7, #30]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ea      	bne.n	80050fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005128:	4618      	mov	r0, r3
 800512a:	372c      	adds	r7, #44	; 0x2c
 800512c:	46bd      	mov	sp, r7
 800512e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005132:	4770      	bx	lr

08005134 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005134:	b480      	push	{r7}
 8005136:	b085      	sub	sp, #20
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	695b      	ldr	r3, [r3, #20]
 8005140:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	4013      	ands	r3, r2
 800514a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800514c:	68fb      	ldr	r3, [r7, #12]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800515a:	b480      	push	{r7}
 800515c:	b083      	sub	sp, #12
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	f003 0301 	and.w	r3, r3, #1
}
 800516a:	4618      	mov	r0, r3
 800516c:	370c      	adds	r7, #12
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
	...

08005178 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	3301      	adds	r3, #1
 8005188:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	4a13      	ldr	r2, [pc, #76]	; (80051dc <USB_CoreReset+0x64>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d901      	bls.n	8005196 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e01b      	b.n	80051ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	daf2      	bge.n	8005184 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f043 0201 	orr.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3301      	adds	r3, #1
 80051b2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	4a09      	ldr	r2, [pc, #36]	; (80051dc <USB_CoreReset+0x64>)
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e006      	b.n	80051ce <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d0f0      	beq.n	80051ae <USB_CoreReset+0x36>

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3714      	adds	r7, #20
 80051d2:	46bd      	mov	sp, r7
 80051d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d8:	4770      	bx	lr
 80051da:	bf00      	nop
 80051dc:	00030d40 	.word	0x00030d40

080051e0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80051e0:	b084      	sub	sp, #16
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b086      	sub	sp, #24
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
 80051ea:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80051ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005216:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005222:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005232:	2b00      	cmp	r3, #0
 8005234:	d018      	beq.n	8005268 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005238:	2b01      	cmp	r3, #1
 800523a:	d10a      	bne.n	8005252 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800524a:	f043 0304 	orr.w	r3, r3, #4
 800524e:	6013      	str	r3, [r2, #0]
 8005250:	e014      	b.n	800527c <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	e009      	b.n	800527c <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005276:	f023 0304 	bic.w	r3, r3, #4
 800527a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800527c:	2110      	movs	r1, #16
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f7ff fe5e 	bl	8004f40 <USB_FlushTxFifo>
 8005284:	4603      	mov	r3, r0
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7ff fe8a 	bl	8004fa8 <USB_FlushRxFifo>
 8005294:	4603      	mov	r3, r0
 8005296:	2b00      	cmp	r3, #0
 8005298:	d001      	beq.n	800529e <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800529a:	2301      	movs	r3, #1
 800529c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800529e:	2300      	movs	r3, #0
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	e015      	b.n	80052d0 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	461a      	mov	r2, r3
 80052b2:	f04f 33ff 	mov.w	r3, #4294967295
 80052b6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	461a      	mov	r2, r3
 80052c6:	2300      	movs	r3, #0
 80052c8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	693a      	ldr	r2, [r7, #16]
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d3e5      	bcc.n	80052a4 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2200      	movs	r2, #0
 80052dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f04f 32ff 	mov.w	r2, #4294967295
 80052e4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a13      	ldr	r2, [pc, #76]	; (800534c <USB_HostInit+0x16c>)
 80052fe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a13      	ldr	r2, [pc, #76]	; (8005350 <USB_HostInit+0x170>)
 8005304:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8005308:	e009      	b.n	800531e <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2280      	movs	r2, #128	; 0x80
 800530e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a10      	ldr	r2, [pc, #64]	; (8005354 <USB_HostInit+0x174>)
 8005314:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a0f      	ldr	r2, [pc, #60]	; (8005358 <USB_HostInit+0x178>)
 800531a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2b00      	cmp	r3, #0
 8005322:	d105      	bne.n	8005330 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	699b      	ldr	r3, [r3, #24]
 8005328:	f043 0210 	orr.w	r2, r3, #16
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	699a      	ldr	r2, [r3, #24]
 8005334:	4b09      	ldr	r3, [pc, #36]	; (800535c <USB_HostInit+0x17c>)
 8005336:	4313      	orrs	r3, r2
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800533c:	7dfb      	ldrb	r3, [r7, #23]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005348:	b004      	add	sp, #16
 800534a:	4770      	bx	lr
 800534c:	01000200 	.word	0x01000200
 8005350:	00e00300 	.word	0x00e00300
 8005354:	00600080 	.word	0x00600080
 8005358:	004000e0 	.word	0x004000e0
 800535c:	a3200008 	.word	0xa3200008

08005360 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005360:	b480      	push	{r7}
 8005362:	b085      	sub	sp, #20
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
 8005368:	460b      	mov	r3, r1
 800536a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	78fb      	ldrb	r3, [r7, #3]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	68f9      	ldr	r1, [r7, #12]
 8005394:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005398:	4313      	orrs	r3, r2
 800539a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800539c:	78fb      	ldrb	r3, [r7, #3]
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d107      	bne.n	80053b2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053a8:	461a      	mov	r2, r3
 80053aa:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80053ae:	6053      	str	r3, [r2, #4]
 80053b0:	e009      	b.n	80053c6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 80053b2:	78fb      	ldrb	r3, [r7, #3]
 80053b4:	2b02      	cmp	r3, #2
 80053b6:	d106      	bne.n	80053c6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80053be:	461a      	mov	r2, r3
 80053c0:	f241 7370 	movw	r3, #6000	; 0x1770
 80053c4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3714      	adds	r7, #20
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80053ee:	68bb      	ldr	r3, [r7, #8]
 80053f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80053f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	68fa      	ldr	r2, [r7, #12]
 80053fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80053fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005402:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005404:	2064      	movs	r0, #100	; 0x64
 8005406:	f7fb fde9 	bl	8000fdc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005416:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005418:	200a      	movs	r0, #10
 800541a:	f7fb fddf 	bl	8000fdc <HAL_Delay>

  return HAL_OK;
 800541e:	2300      	movs	r3, #0
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005428:	b480      	push	{r7}
 800542a:	b085      	sub	sp, #20
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005438:	2300      	movs	r3, #0
 800543a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800544c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d109      	bne.n	800546c <USB_DriveVbus+0x44>
 8005458:	78fb      	ldrb	r3, [r7, #3]
 800545a:	2b01      	cmp	r3, #1
 800545c:	d106      	bne.n	800546c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005466:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800546a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005476:	d109      	bne.n	800548c <USB_DriveVbus+0x64>
 8005478:	78fb      	ldrb	r3, [r7, #3]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d106      	bne.n	800548c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005486:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800548a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800548c:	2300      	movs	r3, #0
}
 800548e:	4618      	mov	r0, r3
 8005490:	3714      	adds	r7, #20
 8005492:	46bd      	mov	sp, r7
 8005494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005498:	4770      	bx	lr

0800549a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800549a:	b480      	push	{r7}
 800549c:	b085      	sub	sp, #20
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80054a6:	2300      	movs	r3, #0
 80054a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	0c5b      	lsrs	r3, r3, #17
 80054b8:	f003 0303 	and.w	r3, r3, #3
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	b29b      	uxth	r3, r3
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3714      	adds	r7, #20
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
	...

080054ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b088      	sub	sp, #32
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	4608      	mov	r0, r1
 80054f6:	4611      	mov	r1, r2
 80054f8:	461a      	mov	r2, r3
 80054fa:	4603      	mov	r3, r0
 80054fc:	70fb      	strb	r3, [r7, #3]
 80054fe:	460b      	mov	r3, r1
 8005500:	70bb      	strb	r3, [r7, #2]
 8005502:	4613      	mov	r3, r2
 8005504:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005506:	2300      	movs	r3, #0
 8005508:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800550e:	78fb      	ldrb	r3, [r7, #3]
 8005510:	015a      	lsls	r2, r3, #5
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	4413      	add	r3, r2
 8005516:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800551a:	461a      	mov	r2, r3
 800551c:	f04f 33ff 	mov.w	r3, #4294967295
 8005520:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005522:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005526:	2b03      	cmp	r3, #3
 8005528:	d87e      	bhi.n	8005628 <USB_HC_Init+0x13c>
 800552a:	a201      	add	r2, pc, #4	; (adr r2, 8005530 <USB_HC_Init+0x44>)
 800552c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005530:	08005541 	.word	0x08005541
 8005534:	080055eb 	.word	0x080055eb
 8005538:	08005541 	.word	0x08005541
 800553c:	080055ad 	.word	0x080055ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005540:	78fb      	ldrb	r3, [r7, #3]
 8005542:	015a      	lsls	r2, r3, #5
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	4413      	add	r3, r2
 8005548:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554c:	461a      	mov	r2, r3
 800554e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005552:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005554:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005558:	2b00      	cmp	r3, #0
 800555a:	da10      	bge.n	800557e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800555c:	78fb      	ldrb	r3, [r7, #3]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	78fa      	ldrb	r2, [r7, #3]
 800556c:	0151      	lsls	r1, r2, #5
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	440a      	add	r2, r1
 8005572:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800557a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800557c:	e057      	b.n	800562e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d051      	beq.n	800562e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800558a:	78fb      	ldrb	r3, [r7, #3]
 800558c:	015a      	lsls	r2, r3, #5
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4413      	add	r3, r2
 8005592:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	78fa      	ldrb	r2, [r7, #3]
 800559a:	0151      	lsls	r1, r2, #5
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	440a      	add	r2, r1
 80055a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80055a8:	60d3      	str	r3, [r2, #12]
      break;
 80055aa:	e040      	b.n	800562e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055ac:	78fb      	ldrb	r3, [r7, #3]
 80055ae:	015a      	lsls	r2, r3, #5
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	4413      	add	r3, r2
 80055b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b8:	461a      	mov	r2, r3
 80055ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80055be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	da34      	bge.n	8005632 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80055c8:	78fb      	ldrb	r3, [r7, #3]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	0151      	lsls	r1, r2, #5
 80055da:	693a      	ldr	r2, [r7, #16]
 80055dc:	440a      	add	r2, r1
 80055de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80055e8:	e023      	b.n	8005632 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80055ea:	78fb      	ldrb	r3, [r7, #3]
 80055ec:	015a      	lsls	r2, r3, #5
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	4413      	add	r3, r2
 80055f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055f6:	461a      	mov	r2, r3
 80055f8:	f240 2325 	movw	r3, #549	; 0x225
 80055fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80055fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005602:	2b00      	cmp	r3, #0
 8005604:	da17      	bge.n	8005636 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	015a      	lsls	r2, r3, #5
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	4413      	add	r3, r2
 800560e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005612:	68db      	ldr	r3, [r3, #12]
 8005614:	78fa      	ldrb	r2, [r7, #3]
 8005616:	0151      	lsls	r1, r2, #5
 8005618:	693a      	ldr	r2, [r7, #16]
 800561a:	440a      	add	r2, r1
 800561c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005620:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005624:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005626:	e006      	b.n	8005636 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005628:	2301      	movs	r3, #1
 800562a:	77fb      	strb	r3, [r7, #31]
      break;
 800562c:	e004      	b.n	8005638 <USB_HC_Init+0x14c>
      break;
 800562e:	bf00      	nop
 8005630:	e002      	b.n	8005638 <USB_HC_Init+0x14c>
      break;
 8005632:	bf00      	nop
 8005634:	e000      	b.n	8005638 <USB_HC_Init+0x14c>
      break;
 8005636:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	015a      	lsls	r2, r3, #5
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	4413      	add	r3, r2
 8005640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	78fa      	ldrb	r2, [r7, #3]
 8005648:	0151      	lsls	r1, r2, #5
 800564a:	693a      	ldr	r2, [r7, #16]
 800564c:	440a      	add	r2, r1
 800564e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005652:	f043 0302 	orr.w	r3, r3, #2
 8005656:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800565e:	699a      	ldr	r2, [r3, #24]
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	2101      	movs	r1, #1
 8005668:	fa01 f303 	lsl.w	r3, r1, r3
 800566c:	6939      	ldr	r1, [r7, #16]
 800566e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005672:	4313      	orrs	r3, r2
 8005674:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005682:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005686:	2b00      	cmp	r3, #0
 8005688:	da03      	bge.n	8005692 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800568a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800568e:	61bb      	str	r3, [r7, #24]
 8005690:	e001      	b.n	8005696 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff feff 	bl	800549a <USB_GetHostSpeed>
 800569c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800569e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d106      	bne.n	80056b4 <USB_HC_Init+0x1c8>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d003      	beq.n	80056b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80056ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80056b0:	617b      	str	r3, [r7, #20]
 80056b2:	e001      	b.n	80056b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056b8:	787b      	ldrb	r3, [r7, #1]
 80056ba:	059b      	lsls	r3, r3, #22
 80056bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056c0:	78bb      	ldrb	r3, [r7, #2]
 80056c2:	02db      	lsls	r3, r3, #11
 80056c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056ce:	049b      	lsls	r3, r3, #18
 80056d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80056d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80056d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80056dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056de:	69bb      	ldr	r3, [r7, #24]
 80056e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056e2:	78fb      	ldrb	r3, [r7, #3]
 80056e4:	0159      	lsls	r1, r3, #5
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	440b      	add	r3, r1
 80056ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80056f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80056f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80056fa:	2b03      	cmp	r3, #3
 80056fc:	d003      	beq.n	8005706 <USB_HC_Init+0x21a>
 80056fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005702:	2b01      	cmp	r3, #1
 8005704:	d10f      	bne.n	8005726 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005706:	78fb      	ldrb	r3, [r7, #3]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	4413      	add	r3, r2
 800570e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	78fa      	ldrb	r2, [r7, #3]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	693a      	ldr	r2, [r7, #16]
 800571a:	440a      	add	r2, r1
 800571c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005720:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005724:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005726:	7ffb      	ldrb	r3, [r7, #31]
}
 8005728:	4618      	mov	r0, r3
 800572a:	3720      	adds	r7, #32
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b08c      	sub	sp, #48	; 0x30
 8005734:	af02      	add	r7, sp, #8
 8005736:	60f8      	str	r0, [r7, #12]
 8005738:	60b9      	str	r1, [r7, #8]
 800573a:	4613      	mov	r3, r2
 800573c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	785b      	ldrb	r3, [r3, #1]
 8005746:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005748:	f44f 7380 	mov.w	r3, #256	; 0x100
 800574c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005756:	2b00      	cmp	r3, #0
 8005758:	d02d      	beq.n	80057b6 <USB_HC_StartXfer+0x86>
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	791b      	ldrb	r3, [r3, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d129      	bne.n	80057b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005762:	79fb      	ldrb	r3, [r7, #7]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d117      	bne.n	8005798 <USB_HC_StartXfer+0x68>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	79db      	ldrb	r3, [r3, #7]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d003      	beq.n	8005778 <USB_HC_StartXfer+0x48>
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	79db      	ldrb	r3, [r3, #7]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d10f      	bne.n	8005798 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	015a      	lsls	r2, r3, #5
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	4413      	add	r3, r2
 8005780:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	69fa      	ldr	r2, [r7, #28]
 8005788:	0151      	lsls	r1, r2, #5
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	440a      	add	r2, r1
 800578e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005792:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005796:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005798:	79fb      	ldrb	r3, [r7, #7]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d10b      	bne.n	80057b6 <USB_HC_StartXfer+0x86>
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	795b      	ldrb	r3, [r3, #5]
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d107      	bne.n	80057b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	785b      	ldrb	r3, [r3, #1]
 80057aa:	4619      	mov	r1, r3
 80057ac:	68f8      	ldr	r0, [r7, #12]
 80057ae:	f000 fa0f 	bl	8005bd0 <USB_DoPing>
      return HAL_OK;
 80057b2:	2300      	movs	r3, #0
 80057b4:	e0f8      	b.n	80059a8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	695b      	ldr	r3, [r3, #20]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d018      	beq.n	80057f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	68ba      	ldr	r2, [r7, #8]
 80057c4:	8912      	ldrh	r2, [r2, #8]
 80057c6:	4413      	add	r3, r2
 80057c8:	3b01      	subs	r3, #1
 80057ca:	68ba      	ldr	r2, [r7, #8]
 80057cc:	8912      	ldrh	r2, [r2, #8]
 80057ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80057d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80057d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80057d6:	8b7b      	ldrh	r3, [r7, #26]
 80057d8:	429a      	cmp	r2, r3
 80057da:	d90b      	bls.n	80057f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80057dc:	8b7b      	ldrh	r3, [r7, #26]
 80057de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	8912      	ldrh	r2, [r2, #8]
 80057e6:	fb03 f202 	mul.w	r2, r3, r2
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	611a      	str	r2, [r3, #16]
 80057ee:	e001      	b.n	80057f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80057f0:	2301      	movs	r3, #1
 80057f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	78db      	ldrb	r3, [r3, #3]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d007      	beq.n	800580c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80057fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80057fe:	68ba      	ldr	r2, [r7, #8]
 8005800:	8912      	ldrh	r2, [r2, #8]
 8005802:	fb03 f202 	mul.w	r2, r3, r2
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	611a      	str	r2, [r3, #16]
 800580a:	e003      	b.n	8005814 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	695a      	ldr	r2, [r3, #20]
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800581c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800581e:	04d9      	lsls	r1, r3, #19
 8005820:	4b63      	ldr	r3, [pc, #396]	; (80059b0 <USB_HC_StartXfer+0x280>)
 8005822:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005824:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	7a9b      	ldrb	r3, [r3, #10]
 800582a:	075b      	lsls	r3, r3, #29
 800582c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005830:	69f9      	ldr	r1, [r7, #28]
 8005832:	0148      	lsls	r0, r1, #5
 8005834:	6a39      	ldr	r1, [r7, #32]
 8005836:	4401      	add	r1, r0
 8005838:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800583c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800583e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005840:	79fb      	ldrb	r3, [r7, #7]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d009      	beq.n	800585a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	68d9      	ldr	r1, [r3, #12]
 800584a:	69fb      	ldr	r3, [r7, #28]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005856:	460a      	mov	r2, r1
 8005858:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800585a:	6a3b      	ldr	r3, [r7, #32]
 800585c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	f003 0301 	and.w	r3, r3, #1
 8005866:	2b00      	cmp	r3, #0
 8005868:	bf0c      	ite	eq
 800586a:	2301      	moveq	r3, #1
 800586c:	2300      	movne	r3, #0
 800586e:	b2db      	uxtb	r3, r3
 8005870:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	015a      	lsls	r2, r3, #5
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	4413      	add	r3, r2
 800587a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	69fa      	ldr	r2, [r7, #28]
 8005882:	0151      	lsls	r1, r2, #5
 8005884:	6a3a      	ldr	r2, [r7, #32]
 8005886:	440a      	add	r2, r1
 8005888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800588c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005890:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005892:	69fb      	ldr	r3, [r7, #28]
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	4413      	add	r3, r2
 800589a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	7e7b      	ldrb	r3, [r7, #25]
 80058a2:	075b      	lsls	r3, r3, #29
 80058a4:	69f9      	ldr	r1, [r7, #28]
 80058a6:	0148      	lsls	r0, r1, #5
 80058a8:	6a39      	ldr	r1, [r7, #32]
 80058aa:	4401      	add	r1, r0
 80058ac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80058b0:	4313      	orrs	r3, r2
 80058b2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	015a      	lsls	r2, r3, #5
 80058b8:	6a3b      	ldr	r3, [r7, #32]
 80058ba:	4413      	add	r3, r2
 80058bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	78db      	ldrb	r3, [r3, #3]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d004      	beq.n	80058de <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80058da:	613b      	str	r3, [r7, #16]
 80058dc:	e003      	b.n	80058e6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80058e4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058ec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80058ee:	69fb      	ldr	r3, [r7, #28]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	6a3b      	ldr	r3, [r7, #32]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fa:	461a      	mov	r2, r3
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005900:	79fb      	ldrb	r3, [r7, #7]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d001      	beq.n	800590a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005906:	2300      	movs	r3, #0
 8005908:	e04e      	b.n	80059a8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	78db      	ldrb	r3, [r3, #3]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d149      	bne.n	80059a6 <USB_HC_StartXfer+0x276>
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	695b      	ldr	r3, [r3, #20]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d045      	beq.n	80059a6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	79db      	ldrb	r3, [r3, #7]
 800591e:	2b03      	cmp	r3, #3
 8005920:	d830      	bhi.n	8005984 <USB_HC_StartXfer+0x254>
 8005922:	a201      	add	r2, pc, #4	; (adr r2, 8005928 <USB_HC_StartXfer+0x1f8>)
 8005924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005928:	08005939 	.word	0x08005939
 800592c:	0800595d 	.word	0x0800595d
 8005930:	08005939 	.word	0x08005939
 8005934:	0800595d 	.word	0x0800595d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	695b      	ldr	r3, [r3, #20]
 800593c:	3303      	adds	r3, #3
 800593e:	089b      	lsrs	r3, r3, #2
 8005940:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005942:	8afa      	ldrh	r2, [r7, #22]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005948:	b29b      	uxth	r3, r3
 800594a:	429a      	cmp	r2, r3
 800594c:	d91c      	bls.n	8005988 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	619a      	str	r2, [r3, #24]
        }
        break;
 800595a:	e015      	b.n	8005988 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	3303      	adds	r3, #3
 8005962:	089b      	lsrs	r3, r3, #2
 8005964:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005966:	8afa      	ldrh	r2, [r7, #22]
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	b29b      	uxth	r3, r3
 8005972:	429a      	cmp	r2, r3
 8005974:	d90a      	bls.n	800598c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	699b      	ldr	r3, [r3, #24]
 800597a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	619a      	str	r2, [r3, #24]
        }
        break;
 8005982:	e003      	b.n	800598c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005984:	bf00      	nop
 8005986:	e002      	b.n	800598e <USB_HC_StartXfer+0x25e>
        break;
 8005988:	bf00      	nop
 800598a:	e000      	b.n	800598e <USB_HC_StartXfer+0x25e>
        break;
 800598c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	68d9      	ldr	r1, [r3, #12]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	785a      	ldrb	r2, [r3, #1]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	b29b      	uxth	r3, r3
 800599c:	2000      	movs	r0, #0
 800599e:	9000      	str	r0, [sp, #0]
 80059a0:	68f8      	ldr	r0, [r7, #12]
 80059a2:	f7ff fb31 	bl	8005008 <USB_WritePacket>
  }

  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3728      	adds	r7, #40	; 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	1ff80000 	.word	0x1ff80000

080059b4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b085      	sub	sp, #20
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059c6:	695b      	ldr	r3, [r3, #20]
 80059c8:	b29b      	uxth	r3, r3
}
 80059ca:	4618      	mov	r0, r3
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr

080059d6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80059d6:	b480      	push	{r7}
 80059d8:	b089      	sub	sp, #36	; 0x24
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
 80059de:	460b      	mov	r3, r1
 80059e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80059e6:	78fb      	ldrb	r3, [r7, #3]
 80059e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80059ea:	2300      	movs	r3, #0
 80059ec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	0c9b      	lsrs	r3, r3, #18
 80059fe:	f003 0303 	and.w	r3, r3, #3
 8005a02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	0fdb      	lsrs	r3, r3, #31
 8005a14:	f003 0301 	and.w	r3, r3, #1
 8005a18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	f003 0320 	and.w	r3, r3, #32
 8005a22:	2b20      	cmp	r3, #32
 8005a24:	d104      	bne.n	8005a30 <USB_HC_Halt+0x5a>
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e0c8      	b.n	8005bc2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <USB_HC_Halt+0x66>
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d163      	bne.n	8005b04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	69ba      	ldr	r2, [r7, #24]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	69fa      	ldr	r2, [r7, #28]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0320 	and.w	r3, r3, #32
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	f040 80ab 	bne.w	8005bc0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d133      	bne.n	8005ade <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005a76:	69bb      	ldr	r3, [r7, #24]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	0151      	lsls	r1, r2, #5
 8005a88:	69fa      	ldr	r2, [r7, #28]
 8005a8a:	440a      	add	r2, r1
 8005a8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005a96:	69bb      	ldr	r3, [r7, #24]
 8005a98:	015a      	lsls	r2, r3, #5
 8005a9a:	69fb      	ldr	r3, [r7, #28]
 8005a9c:	4413      	add	r3, r2
 8005a9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	0151      	lsls	r1, r2, #5
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	440a      	add	r2, r1
 8005aac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ab0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ab4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	3301      	adds	r3, #1
 8005aba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005ac2:	d81d      	bhi.n	8005b00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	015a      	lsls	r2, r3, #5
 8005ac8:	69fb      	ldr	r3, [r7, #28]
 8005aca:	4413      	add	r3, r2
 8005acc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ada:	d0ec      	beq.n	8005ab6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005adc:	e070      	b.n	8005bc0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005ade:	69bb      	ldr	r3, [r7, #24]
 8005ae0:	015a      	lsls	r2, r3, #5
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	0151      	lsls	r1, r2, #5
 8005af0:	69fa      	ldr	r2, [r7, #28]
 8005af2:	440a      	add	r2, r1
 8005af4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005af8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005afc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005afe:	e05f      	b.n	8005bc0 <USB_HC_Halt+0x1ea>
            break;
 8005b00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005b02:	e05d      	b.n	8005bc0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	015a      	lsls	r2, r3, #5
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	4413      	add	r3, r2
 8005b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	0151      	lsls	r1, r2, #5
 8005b16:	69fa      	ldr	r2, [r7, #28]
 8005b18:	440a      	add	r2, r1
 8005b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005b24:	69fb      	ldr	r3, [r7, #28]
 8005b26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d133      	bne.n	8005b9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	015a      	lsls	r2, r3, #5
 8005b38:	69fb      	ldr	r3, [r7, #28]
 8005b3a:	4413      	add	r3, r2
 8005b3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	69ba      	ldr	r2, [r7, #24]
 8005b44:	0151      	lsls	r1, r2, #5
 8005b46:	69fa      	ldr	r2, [r7, #28]
 8005b48:	440a      	add	r2, r1
 8005b4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b54:	69bb      	ldr	r3, [r7, #24]
 8005b56:	015a      	lsls	r2, r3, #5
 8005b58:	69fb      	ldr	r3, [r7, #28]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	69ba      	ldr	r2, [r7, #24]
 8005b64:	0151      	lsls	r1, r2, #5
 8005b66:	69fa      	ldr	r2, [r7, #28]
 8005b68:	440a      	add	r2, r1
 8005b6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	3301      	adds	r3, #1
 8005b78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005b80:	d81d      	bhi.n	8005bbe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b98:	d0ec      	beq.n	8005b74 <USB_HC_Halt+0x19e>
 8005b9a:	e011      	b.n	8005bc0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	015a      	lsls	r2, r3, #5
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	4413      	add	r3, r2
 8005ba4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69ba      	ldr	r2, [r7, #24]
 8005bac:	0151      	lsls	r1, r2, #5
 8005bae:	69fa      	ldr	r2, [r7, #28]
 8005bb0:	440a      	add	r2, r1
 8005bb2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bba:	6013      	str	r3, [r2, #0]
 8005bbc:	e000      	b.n	8005bc0 <USB_HC_Halt+0x1ea>
          break;
 8005bbe:	bf00      	nop
    }
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3724      	adds	r7, #36	; 0x24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr
	...

08005bd0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b087      	sub	sp, #28
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005be0:	78fb      	ldrb	r3, [r7, #3]
 8005be2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005be4:	2301      	movs	r3, #1
 8005be6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	04da      	lsls	r2, r3, #19
 8005bec:	4b15      	ldr	r3, [pc, #84]	; (8005c44 <USB_DoPing+0x74>)
 8005bee:	4013      	ands	r3, r2
 8005bf0:	693a      	ldr	r2, [r7, #16]
 8005bf2:	0151      	lsls	r1, r2, #5
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	440a      	add	r2, r1
 8005bf8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005bfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005c20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005c34:	2300      	movs	r3, #0
}
 8005c36:	4618      	mov	r0, r3
 8005c38:	371c      	adds	r7, #28
 8005c3a:	46bd      	mov	sp, r7
 8005c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c40:	4770      	bx	lr
 8005c42:	bf00      	nop
 8005c44:	1ff80000 	.word	0x1ff80000

08005c48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b088      	sub	sp, #32
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005c50:	2300      	movs	r3, #0
 8005c52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f7ff f911 	bl	8004e84 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c62:	2110      	movs	r1, #16
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f7ff f96b 	bl	8004f40 <USB_FlushTxFifo>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005c70:	2301      	movs	r3, #1
 8005c72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7ff f997 	bl	8004fa8 <USB_FlushRxFifo>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d001      	beq.n	8005c84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005c80:	2301      	movs	r3, #1
 8005c82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005c84:	2300      	movs	r3, #0
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e01f      	b.n	8005cca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	015a      	lsls	r2, r3, #5
 8005c8e:	697b      	ldr	r3, [r7, #20]
 8005c90:	4413      	add	r3, r2
 8005c92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ca0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ca8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	693b      	ldr	r3, [r7, #16]
 8005cc2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	3301      	adds	r3, #1
 8005cc8:	61bb      	str	r3, [r7, #24]
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	2b0f      	cmp	r3, #15
 8005cce:	d9dc      	bls.n	8005c8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	61bb      	str	r3, [r7, #24]
 8005cd4:	e034      	b.n	8005d40 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	015a      	lsls	r2, r3, #5
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	4413      	add	r3, r2
 8005cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005cec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cfc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	015a      	lsls	r2, r3, #5
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	4413      	add	r3, r2
 8005d06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0a:	461a      	mov	r2, r3
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3301      	adds	r3, #1
 8005d14:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d1c:	d80c      	bhi.n	8005d38 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	015a      	lsls	r2, r3, #5
 8005d22:	697b      	ldr	r3, [r7, #20]
 8005d24:	4413      	add	r3, r2
 8005d26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d34:	d0ec      	beq.n	8005d10 <USB_StopHost+0xc8>
 8005d36:	e000      	b.n	8005d3a <USB_StopHost+0xf2>
        break;
 8005d38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	3301      	adds	r3, #1
 8005d3e:	61bb      	str	r3, [r7, #24]
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	2b0f      	cmp	r3, #15
 8005d44:	d9c7      	bls.n	8005cd6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8005d52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f04f 32ff 	mov.w	r2, #4294967295
 8005d5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f7ff f880 	bl	8004e62 <USB_EnableGlobalInt>

  return ret;
 8005d62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3720      	adds	r7, #32
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005d6c:	b590      	push	{r4, r7, lr}
 8005d6e:	b089      	sub	sp, #36	; 0x24
 8005d70:	af04      	add	r7, sp, #16
 8005d72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005d74:	2301      	movs	r3, #1
 8005d76:	2202      	movs	r2, #2
 8005d78:	2102      	movs	r1, #2
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f000 fc66 	bl	800664c <USBH_FindInterface>
 8005d80:	4603      	mov	r3, r0
 8005d82:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	2bff      	cmp	r3, #255	; 0xff
 8005d88:	d002      	beq.n	8005d90 <USBH_CDC_InterfaceInit+0x24>
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	2b01      	cmp	r3, #1
 8005d8e:	d901      	bls.n	8005d94 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005d90:	2302      	movs	r3, #2
 8005d92:	e13d      	b.n	8006010 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005d94:	7bfb      	ldrb	r3, [r7, #15]
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fc3b 	bl	8006614 <USBH_SelectInterface>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005da2:	7bbb      	ldrb	r3, [r7, #14]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d001      	beq.n	8005dac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005da8:	2302      	movs	r3, #2
 8005daa:	e131      	b.n	8006010 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005db2:	2050      	movs	r0, #80	; 0x50
 8005db4:	f002 fafa 	bl	80083ac <malloc>
 8005db8:	4603      	mov	r3, r0
 8005dba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005dc2:	69db      	ldr	r3, [r3, #28]
 8005dc4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005dc6:	68bb      	ldr	r3, [r7, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d101      	bne.n	8005dd0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005dcc:	2302      	movs	r3, #2
 8005dce:	e11f      	b.n	8006010 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005dd0:	2250      	movs	r2, #80	; 0x50
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	68b8      	ldr	r0, [r7, #8]
 8005dd6:	f002 faf9 	bl	80083cc <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	687a      	ldr	r2, [r7, #4]
 8005dde:	211a      	movs	r1, #26
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	b25b      	sxtb	r3, r3
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	da15      	bge.n	8005e1e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	211a      	movs	r1, #26
 8005df8:	fb01 f303 	mul.w	r3, r1, r3
 8005dfc:	4413      	add	r3, r2
 8005dfe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e02:	781a      	ldrb	r2, [r3, #0]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	211a      	movs	r1, #26
 8005e0e:	fb01 f303 	mul.w	r3, r1, r3
 8005e12:	4413      	add	r3, r2
 8005e14:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005e18:	881a      	ldrh	r2, [r3, #0]
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	785b      	ldrb	r3, [r3, #1]
 8005e22:	4619      	mov	r1, r3
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f001 ff2c 	bl	8007c82 <USBH_AllocPipe>
 8005e2a:	4603      	mov	r3, r0
 8005e2c:	461a      	mov	r2, r3
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	7819      	ldrb	r1, [r3, #0]
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	7858      	ldrb	r0, [r3, #1]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	8952      	ldrh	r2, [r2, #10]
 8005e4a:	9202      	str	r2, [sp, #8]
 8005e4c:	2203      	movs	r2, #3
 8005e4e:	9201      	str	r2, [sp, #4]
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	4623      	mov	r3, r4
 8005e54:	4602      	mov	r2, r0
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f001 fee4 	bl	8007c24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	781b      	ldrb	r3, [r3, #0]
 8005e60:	2200      	movs	r2, #0
 8005e62:	4619      	mov	r1, r3
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f002 f9f3 	bl	8008250 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005e6a:	2300      	movs	r3, #0
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	210a      	movs	r1, #10
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 fbeb 	bl	800664c <USBH_FindInterface>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005e7a:	7bfb      	ldrb	r3, [r7, #15]
 8005e7c:	2bff      	cmp	r3, #255	; 0xff
 8005e7e:	d002      	beq.n	8005e86 <USBH_CDC_InterfaceInit+0x11a>
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b01      	cmp	r3, #1
 8005e84:	d901      	bls.n	8005e8a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005e86:	2302      	movs	r3, #2
 8005e88:	e0c2      	b.n	8006010 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005e8a:	7bfb      	ldrb	r3, [r7, #15]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	211a      	movs	r1, #26
 8005e90:	fb01 f303 	mul.w	r3, r1, r3
 8005e94:	4413      	add	r3, r2
 8005e96:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	b25b      	sxtb	r3, r3
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	da16      	bge.n	8005ed0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	211a      	movs	r1, #26
 8005ea8:	fb01 f303 	mul.w	r3, r1, r3
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005eb8:	7bfb      	ldrb	r3, [r7, #15]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	211a      	movs	r1, #26
 8005ebe:	fb01 f303 	mul.w	r3, r1, r3
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ec8:	881a      	ldrh	r2, [r3, #0]
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	835a      	strh	r2, [r3, #26]
 8005ece:	e015      	b.n	8005efc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	211a      	movs	r1, #26
 8005ed6:	fb01 f303 	mul.w	r3, r1, r3
 8005eda:	4413      	add	r3, r2
 8005edc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005ee0:	781a      	ldrb	r2, [r3, #0]
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005ee6:	7bfb      	ldrb	r3, [r7, #15]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	211a      	movs	r1, #26
 8005eec:	fb01 f303 	mul.w	r3, r1, r3
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005ef6:	881a      	ldrh	r2, [r3, #0]
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	211a      	movs	r1, #26
 8005f02:	fb01 f303 	mul.w	r3, r1, r3
 8005f06:	4413      	add	r3, r2
 8005f08:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b25b      	sxtb	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	da16      	bge.n	8005f42 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f14:	7bfb      	ldrb	r3, [r7, #15]
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	211a      	movs	r1, #26
 8005f1a:	fb01 f303 	mul.w	r3, r1, r3
 8005f1e:	4413      	add	r3, r2
 8005f20:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f24:	781a      	ldrb	r2, [r3, #0]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	687a      	ldr	r2, [r7, #4]
 8005f2e:	211a      	movs	r1, #26
 8005f30:	fb01 f303 	mul.w	r3, r1, r3
 8005f34:	4413      	add	r3, r2
 8005f36:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f3a:	881a      	ldrh	r2, [r3, #0]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	835a      	strh	r2, [r3, #26]
 8005f40:	e015      	b.n	8005f6e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005f42:	7bfb      	ldrb	r3, [r7, #15]
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	211a      	movs	r1, #26
 8005f48:	fb01 f303 	mul.w	r3, r1, r3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005f52:	781a      	ldrb	r2, [r3, #0]
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	687a      	ldr	r2, [r7, #4]
 8005f5c:	211a      	movs	r1, #26
 8005f5e:	fb01 f303 	mul.w	r3, r1, r3
 8005f62:	4413      	add	r3, r2
 8005f64:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	7b9b      	ldrb	r3, [r3, #14]
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f001 fe84 	bl	8007c82 <USBH_AllocPipe>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	7bdb      	ldrb	r3, [r3, #15]
 8005f86:	4619      	mov	r1, r3
 8005f88:	6878      	ldr	r0, [r7, #4]
 8005f8a:	f001 fe7a 	bl	8007c82 <USBH_AllocPipe>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	461a      	mov	r2, r3
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	7b59      	ldrb	r1, [r3, #13]
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	7b98      	ldrb	r0, [r3, #14]
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005faa:	68ba      	ldr	r2, [r7, #8]
 8005fac:	8b12      	ldrh	r2, [r2, #24]
 8005fae:	9202      	str	r2, [sp, #8]
 8005fb0:	2202      	movs	r2, #2
 8005fb2:	9201      	str	r2, [sp, #4]
 8005fb4:	9300      	str	r3, [sp, #0]
 8005fb6:	4623      	mov	r3, r4
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f001 fe32 	bl	8007c24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	7b19      	ldrb	r1, [r3, #12]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	7bd8      	ldrb	r0, [r3, #15]
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	8b52      	ldrh	r2, [r2, #26]
 8005fd8:	9202      	str	r2, [sp, #8]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	9201      	str	r2, [sp, #4]
 8005fde:	9300      	str	r3, [sp, #0]
 8005fe0:	4623      	mov	r3, r4
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	6878      	ldr	r0, [r7, #4]
 8005fe6:	f001 fe1d 	bl	8007c24 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	7b5b      	ldrb	r3, [r3, #13]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	4619      	mov	r1, r3
 8005ffa:	6878      	ldr	r0, [r7, #4]
 8005ffc:	f002 f928 	bl	8008250 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	7b1b      	ldrb	r3, [r3, #12]
 8006004:	2200      	movs	r2, #0
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f002 f921 	bl	8008250 <USBH_LL_SetToggle>

  return USBH_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	bd90      	pop	{r4, r7, pc}

08006018 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b084      	sub	sp, #16
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006026:	69db      	ldr	r3, [r3, #28]
 8006028:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d00e      	beq.n	8006050 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fe12 	bl	8007c62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 fe3d 	bl	8007cc4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	7b1b      	ldrb	r3, [r3, #12]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00e      	beq.n	8006076 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	7b1b      	ldrb	r3, [r3, #12]
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f001 fdff 	bl	8007c62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	7b1b      	ldrb	r3, [r3, #12]
 8006068:	4619      	mov	r1, r3
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f001 fe2a 	bl	8007cc4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	7b5b      	ldrb	r3, [r3, #13]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00e      	beq.n	800609c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	7b5b      	ldrb	r3, [r3, #13]
 8006082:	4619      	mov	r1, r3
 8006084:	6878      	ldr	r0, [r7, #4]
 8006086:	f001 fdec 	bl	8007c62 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	7b5b      	ldrb	r3, [r3, #13]
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 fe17 	bl	8007cc4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060a2:	69db      	ldr	r3, [r3, #28]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00b      	beq.n	80060c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060ae:	69db      	ldr	r3, [r3, #28]
 80060b0:	4618      	mov	r0, r3
 80060b2:	f002 f983 	bl	80083bc <free>
    phost->pActiveClass->pData = 0U;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060bc:	2200      	movs	r2, #0
 80060be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80060c0:	2300      	movs	r3, #0
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b084      	sub	sp, #16
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80060d8:	69db      	ldr	r3, [r3, #28]
 80060da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	3340      	adds	r3, #64	; 0x40
 80060e0:	4619      	mov	r1, r3
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f8b1 	bl	800624a <GetLineCoding>
 80060e8:	4603      	mov	r3, r0
 80060ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80060ec:	7afb      	ldrb	r3, [r7, #11]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d105      	bne.n	80060fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80060f8:	2102      	movs	r1, #2
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80060fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3710      	adds	r7, #16
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006110:	2301      	movs	r3, #1
 8006112:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006114:	2300      	movs	r3, #0
 8006116:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800611e:	69db      	ldr	r3, [r3, #28]
 8006120:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006128:	2b04      	cmp	r3, #4
 800612a:	d877      	bhi.n	800621c <USBH_CDC_Process+0x114>
 800612c:	a201      	add	r2, pc, #4	; (adr r2, 8006134 <USBH_CDC_Process+0x2c>)
 800612e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006132:	bf00      	nop
 8006134:	08006149 	.word	0x08006149
 8006138:	0800614f 	.word	0x0800614f
 800613c:	0800617f 	.word	0x0800617f
 8006140:	080061f3 	.word	0x080061f3
 8006144:	08006201 	.word	0x08006201
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006148:	2300      	movs	r3, #0
 800614a:	73fb      	strb	r3, [r7, #15]
      break;
 800614c:	e06d      	b.n	800622a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006152:	4619      	mov	r1, r3
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 f897 	bl	8006288 <SetLineCoding>
 800615a:	4603      	mov	r3, r0
 800615c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800615e:	7bbb      	ldrb	r3, [r7, #14]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d104      	bne.n	800616e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800616c:	e058      	b.n	8006220 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800616e:	7bbb      	ldrb	r3, [r7, #14]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d055      	beq.n	8006220 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2204      	movs	r2, #4
 8006178:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800617c:	e050      	b.n	8006220 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	3340      	adds	r3, #64	; 0x40
 8006182:	4619      	mov	r1, r3
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f860 	bl	800624a <GetLineCoding>
 800618a:	4603      	mov	r3, r0
 800618c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800618e:	7bbb      	ldrb	r3, [r7, #14]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d126      	bne.n	80061e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a6:	791b      	ldrb	r3, [r3, #4]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	d13b      	bne.n	8006224 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d133      	bne.n	8006224 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80061c8:	429a      	cmp	r2, r3
 80061ca:	d12b      	bne.n	8006224 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061d0:	68bb      	ldr	r3, [r7, #8]
 80061d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d124      	bne.n	8006224 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f958 	bl	8006490 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80061e0:	e020      	b.n	8006224 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d01d      	beq.n	8006224 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2204      	movs	r2, #4
 80061ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80061f0:	e018      	b.n	8006224 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f867 	bl	80062c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f8da 	bl	80063b2 <CDC_ProcessReception>
      break;
 80061fe:	e014      	b.n	800622a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006200:	2100      	movs	r1, #0
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 ffef 	bl	80071e6 <USBH_ClrFeature>
 8006208:	4603      	mov	r3, r0
 800620a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800620c:	7bbb      	ldrb	r3, [r7, #14]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10a      	bne.n	8006228 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800621a:	e005      	b.n	8006228 <USBH_CDC_Process+0x120>

    default:
      break;
 800621c:	bf00      	nop
 800621e:	e004      	b.n	800622a <USBH_CDC_Process+0x122>
      break;
 8006220:	bf00      	nop
 8006222:	e002      	b.n	800622a <USBH_CDC_Process+0x122>
      break;
 8006224:	bf00      	nop
 8006226:	e000      	b.n	800622a <USBH_CDC_Process+0x122>
      break;
 8006228:	bf00      	nop

  }

  return status;
 800622a:	7bfb      	ldrb	r3, [r7, #15]
}
 800622c:	4618      	mov	r0, r3
 800622e:	3710      	adds	r7, #16
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}

08006234 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	370c      	adds	r7, #12
 8006242:	46bd      	mov	sp, r7
 8006244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006248:	4770      	bx	lr

0800624a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800624a:	b580      	push	{r7, lr}
 800624c:	b082      	sub	sp, #8
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
 8006252:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	22a1      	movs	r2, #161	; 0xa1
 8006258:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2221      	movs	r2, #33	; 0x21
 800625e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2207      	movs	r2, #7
 8006270:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	2207      	movs	r2, #7
 8006276:	4619      	mov	r1, r3
 8006278:	6878      	ldr	r0, [r7, #4]
 800627a:	f001 fa81 	bl	8007780 <USBH_CtlReq>
 800627e:	4603      	mov	r3, r0
}
 8006280:	4618      	mov	r0, r3
 8006282:	3708      	adds	r7, #8
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
 8006290:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2221      	movs	r2, #33	; 0x21
 8006296:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2220      	movs	r2, #32
 800629c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2200      	movs	r2, #0
 80062a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2200      	movs	r2, #0
 80062a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2207      	movs	r2, #7
 80062ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2207      	movs	r2, #7
 80062b4:	4619      	mov	r1, r3
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f001 fa62 	bl	8007780 <USBH_CtlReq>
 80062bc:	4603      	mov	r3, r0
}
 80062be:	4618      	mov	r0, r3
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}

080062c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b086      	sub	sp, #24
 80062ca:	af02      	add	r7, sp, #8
 80062cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062d4:	69db      	ldr	r3, [r3, #28]
 80062d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80062d8:	2300      	movs	r3, #0
 80062da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d002      	beq.n	80062ec <CDC_ProcessTransmission+0x26>
 80062e6:	2b02      	cmp	r3, #2
 80062e8:	d023      	beq.n	8006332 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80062ea:	e05e      	b.n	80063aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	8b12      	ldrh	r2, [r2, #24]
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d90b      	bls.n	8006310 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	69d9      	ldr	r1, [r3, #28]
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	8b1a      	ldrh	r2, [r3, #24]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	7b5b      	ldrb	r3, [r3, #13]
 8006304:	2001      	movs	r0, #1
 8006306:	9000      	str	r0, [sp, #0]
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 fc48 	bl	8007b9e <USBH_BulkSendData>
 800630e:	e00b      	b.n	8006328 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006318:	b29a      	uxth	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	7b5b      	ldrb	r3, [r3, #13]
 800631e:	2001      	movs	r0, #1
 8006320:	9000      	str	r0, [sp, #0]
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fc3b 	bl	8007b9e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006330:	e03b      	b.n	80063aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	7b5b      	ldrb	r3, [r3, #13]
 8006336:	4619      	mov	r1, r3
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 ff5f 	bl	80081fc <USBH_LL_GetURBState>
 800633e:	4603      	mov	r3, r0
 8006340:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006342:	7afb      	ldrb	r3, [r7, #11]
 8006344:	2b01      	cmp	r3, #1
 8006346:	d128      	bne.n	800639a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634c:	68fa      	ldr	r2, [r7, #12]
 800634e:	8b12      	ldrh	r2, [r2, #24]
 8006350:	4293      	cmp	r3, r2
 8006352:	d90e      	bls.n	8006372 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	8b12      	ldrh	r2, [r2, #24]
 800635c:	1a9a      	subs	r2, r3, r2
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	69db      	ldr	r3, [r3, #28]
 8006366:	68fa      	ldr	r2, [r7, #12]
 8006368:	8b12      	ldrh	r2, [r2, #24]
 800636a:	441a      	add	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	61da      	str	r2, [r3, #28]
 8006370:	e002      	b.n	8006378 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	2200      	movs	r2, #0
 8006376:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006388:	e00e      	b.n	80063a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f868 	bl	8006468 <USBH_CDC_TransmitCallback>
      break;
 8006398:	e006      	b.n	80063a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	2b02      	cmp	r3, #2
 800639e:	d103      	bne.n	80063a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80063a8:	bf00      	nop
  }
}
 80063aa:	bf00      	nop
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c0:	69db      	ldr	r3, [r3, #28]
 80063c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80063c4:	2300      	movs	r3, #0
 80063c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	d002      	beq.n	80063d8 <CDC_ProcessReception+0x26>
 80063d2:	2b04      	cmp	r3, #4
 80063d4:	d00e      	beq.n	80063f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80063d6:	e043      	b.n	8006460 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	6a19      	ldr	r1, [r3, #32]
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	8b5a      	ldrh	r2, [r3, #26]
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	7b1b      	ldrb	r3, [r3, #12]
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f001 fbff 	bl	8007be8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	2204      	movs	r2, #4
 80063ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80063f2:	e035      	b.n	8006460 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	7b1b      	ldrb	r3, [r3, #12]
 80063f8:	4619      	mov	r1, r3
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f001 fefe 	bl	80081fc <USBH_LL_GetURBState>
 8006400:	4603      	mov	r3, r0
 8006402:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006404:	7cfb      	ldrb	r3, [r7, #19]
 8006406:	2b01      	cmp	r3, #1
 8006408:	d129      	bne.n	800645e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	7b1b      	ldrb	r3, [r3, #12]
 800640e:	4619      	mov	r1, r3
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f001 fe61 	bl	80080d8 <USBH_LL_GetLastXferSize>
 8006416:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	429a      	cmp	r2, r3
 8006420:	d016      	beq.n	8006450 <CDC_ProcessReception+0x9e>
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	8b5b      	ldrh	r3, [r3, #26]
 8006426:	461a      	mov	r2, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	4293      	cmp	r3, r2
 800642c:	d910      	bls.n	8006450 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1ad2      	subs	r2, r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	6a1a      	ldr	r2, [r3, #32]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	441a      	add	r2, r3
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	2203      	movs	r2, #3
 800644a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800644e:	e006      	b.n	800645e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	2200      	movs	r2, #0
 8006454:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f80f 	bl	800647c <USBH_CDC_ReceiveCallback>
      break;
 800645e:	bf00      	nop
  }
}
 8006460:	bf00      	nop
 8006462:	3718      	adds	r7, #24
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006468:	b480      	push	{r7}
 800646a:	b083      	sub	sp, #12
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006484:	bf00      	nop
 8006486:	370c      	adds	r7, #12
 8006488:	46bd      	mov	sp, r7
 800648a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648e:	4770      	bx	lr

08006490 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006490:	b480      	push	{r7}
 8006492:	b083      	sub	sp, #12
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006498:	bf00      	nop
 800649a:	370c      	adds	r7, #12
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80064b8:	2302      	movs	r3, #2
 80064ba:	e029      	b.n	8006510 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	79fa      	ldrb	r2, [r7, #7]
 80064c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	2200      	movs	r2, #0
 80064c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80064d4:	68f8      	ldr	r0, [r7, #12]
 80064d6:	f000 f81f 	bl	8006518 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f001 fd31 	bl	8007f70 <USBH_LL_Init>

  return USBH_OK;
 800650e:	2300      	movs	r3, #0
}
 8006510:	4618      	mov	r0, r3
 8006512:	3710      	adds	r7, #16
 8006514:	46bd      	mov	sp, r7
 8006516:	bd80      	pop	{r7, pc}

08006518 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006518:	b480      	push	{r7}
 800651a:	b085      	sub	sp, #20
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006520:	2300      	movs	r3, #0
 8006522:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006524:	2300      	movs	r3, #0
 8006526:	60fb      	str	r3, [r7, #12]
 8006528:	e009      	b.n	800653e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	33e0      	adds	r3, #224	; 0xe0
 8006530:	009b      	lsls	r3, r3, #2
 8006532:	4413      	add	r3, r2
 8006534:	2200      	movs	r2, #0
 8006536:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	3301      	adds	r3, #1
 800653c:	60fb      	str	r3, [r7, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2b0f      	cmp	r3, #15
 8006542:	d9f2      	bls.n	800652a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006544:	2300      	movs	r3, #0
 8006546:	60fb      	str	r3, [r7, #12]
 8006548:	e009      	b.n	800655e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3301      	adds	r3, #1
 800655c:	60fb      	str	r3, [r7, #12]
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006564:	d3f1      	bcc.n	800654a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2240      	movs	r2, #64	; 0x40
 800658a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2200      	movs	r2, #0
 8006596:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80065b2:	2300      	movs	r3, #0
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3714      	adds	r7, #20
 80065b8:	46bd      	mov	sp, r7
 80065ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065be:	4770      	bx	lr

080065c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80065ca:	2300      	movs	r3, #0
 80065cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d016      	beq.n	8006602 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d10e      	bne.n	80065fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80065e4:	1c59      	adds	r1, r3, #1
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	33de      	adds	r3, #222	; 0xde
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	73fb      	strb	r3, [r7, #15]
 80065fa:	e004      	b.n	8006606 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80065fc:	2302      	movs	r3, #2
 80065fe:	73fb      	strb	r3, [r7, #15]
 8006600:	e001      	b.n	8006606 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006602:	2302      	movs	r3, #2
 8006604:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006606:	7bfb      	ldrb	r3, [r7, #15]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
 800661c:	460b      	mov	r3, r1
 800661e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800662a:	78fa      	ldrb	r2, [r7, #3]
 800662c:	429a      	cmp	r2, r3
 800662e:	d204      	bcs.n	800663a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	78fa      	ldrb	r2, [r7, #3]
 8006634:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006638:	e001      	b.n	800663e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800663a:	2302      	movs	r3, #2
 800663c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800663e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006640:	4618      	mov	r0, r3
 8006642:	3714      	adds	r7, #20
 8006644:	46bd      	mov	sp, r7
 8006646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664a:	4770      	bx	lr

0800664c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800664c:	b480      	push	{r7}
 800664e:	b087      	sub	sp, #28
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	4608      	mov	r0, r1
 8006656:	4611      	mov	r1, r2
 8006658:	461a      	mov	r2, r3
 800665a:	4603      	mov	r3, r0
 800665c:	70fb      	strb	r3, [r7, #3]
 800665e:	460b      	mov	r3, r1
 8006660:	70bb      	strb	r3, [r7, #2]
 8006662:	4613      	mov	r3, r2
 8006664:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800666a:	2300      	movs	r3, #0
 800666c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006674:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006676:	e025      	b.n	80066c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006678:	7dfb      	ldrb	r3, [r7, #23]
 800667a:	221a      	movs	r2, #26
 800667c:	fb02 f303 	mul.w	r3, r2, r3
 8006680:	3308      	adds	r3, #8
 8006682:	68fa      	ldr	r2, [r7, #12]
 8006684:	4413      	add	r3, r2
 8006686:	3302      	adds	r3, #2
 8006688:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	795b      	ldrb	r3, [r3, #5]
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	429a      	cmp	r2, r3
 8006692:	d002      	beq.n	800669a <USBH_FindInterface+0x4e>
 8006694:	78fb      	ldrb	r3, [r7, #3]
 8006696:	2bff      	cmp	r3, #255	; 0xff
 8006698:	d111      	bne.n	80066be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800669e:	78ba      	ldrb	r2, [r7, #2]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d002      	beq.n	80066aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066a4:	78bb      	ldrb	r3, [r7, #2]
 80066a6:	2bff      	cmp	r3, #255	; 0xff
 80066a8:	d109      	bne.n	80066be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80066ae:	787a      	ldrb	r2, [r7, #1]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d002      	beq.n	80066ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80066b4:	787b      	ldrb	r3, [r7, #1]
 80066b6:	2bff      	cmp	r3, #255	; 0xff
 80066b8:	d101      	bne.n	80066be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80066ba:	7dfb      	ldrb	r3, [r7, #23]
 80066bc:	e006      	b.n	80066cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80066be:	7dfb      	ldrb	r3, [r7, #23]
 80066c0:	3301      	adds	r3, #1
 80066c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d9d6      	bls.n	8006678 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80066ca:	23ff      	movs	r3, #255	; 0xff
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
 80066de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f001 fc81 	bl	8007fe8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80066e6:	2101      	movs	r1, #1
 80066e8:	6878      	ldr	r0, [r7, #4]
 80066ea:	f001 fd9a 	bl	8008222 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3708      	adds	r7, #8
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b088      	sub	sp, #32
 80066fc:	af04      	add	r7, sp, #16
 80066fe:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8006700:	2302      	movs	r3, #2
 8006702:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8006704:	2300      	movs	r3, #0
 8006706:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800670e:	b2db      	uxtb	r3, r3
 8006710:	2b01      	cmp	r3, #1
 8006712:	d102      	bne.n	800671a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2203      	movs	r2, #3
 8006718:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b0b      	cmp	r3, #11
 8006722:	f200 81be 	bhi.w	8006aa2 <USBH_Process+0x3aa>
 8006726:	a201      	add	r2, pc, #4	; (adr r2, 800672c <USBH_Process+0x34>)
 8006728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800672c:	0800675d 	.word	0x0800675d
 8006730:	0800678f 	.word	0x0800678f
 8006734:	080067f7 	.word	0x080067f7
 8006738:	08006a3d 	.word	0x08006a3d
 800673c:	08006aa3 	.word	0x08006aa3
 8006740:	0800689b 	.word	0x0800689b
 8006744:	080069e3 	.word	0x080069e3
 8006748:	080068d1 	.word	0x080068d1
 800674c:	080068f1 	.word	0x080068f1
 8006750:	08006911 	.word	0x08006911
 8006754:	08006955 	.word	0x08006955
 8006758:	08006a25 	.word	0x08006a25
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b00      	cmp	r3, #0
 8006766:	f000 819e 	beq.w	8006aa6 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2201      	movs	r2, #1
 800676e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006770:	20c8      	movs	r0, #200	; 0xc8
 8006772:	f001 fd9d 	bl	80082b0 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f001 fc93 	bl	80080a2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2200      	movs	r2, #0
 8006788:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800678c:	e18b      	b.n	8006aa6 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006794:	2b01      	cmp	r3, #1
 8006796:	d107      	bne.n	80067a8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80067a6:	e18d      	b.n	8006ac4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80067b2:	d914      	bls.n	80067de <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067ba:	3301      	adds	r3, #1
 80067bc:	b2da      	uxtb	r2, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d903      	bls.n	80067d6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	220d      	movs	r2, #13
 80067d2:	701a      	strb	r2, [r3, #0]
      break;
 80067d4:	e176      	b.n	8006ac4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	2200      	movs	r2, #0
 80067da:	701a      	strb	r2, [r3, #0]
      break;
 80067dc:	e172      	b.n	8006ac4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80067e4:	f103 020a 	add.w	r2, r3, #10
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80067ee:	200a      	movs	r0, #10
 80067f0:	f001 fd5e 	bl	80082b0 <USBH_Delay>
      break;
 80067f4:	e166      	b.n	8006ac4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d005      	beq.n	800680c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006806:	2104      	movs	r1, #4
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800680c:	2064      	movs	r0, #100	; 0x64
 800680e:	f001 fd4f 	bl	80082b0 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fc1e 	bl	8008054 <USBH_LL_GetSpeed>
 8006818:	4603      	mov	r3, r0
 800681a:	461a      	mov	r2, r3
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2205      	movs	r2, #5
 8006826:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006828:	2100      	movs	r1, #0
 800682a:	6878      	ldr	r0, [r7, #4]
 800682c:	f001 fa29 	bl	8007c82 <USBH_AllocPipe>
 8006830:	4603      	mov	r3, r0
 8006832:	461a      	mov	r2, r3
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006838:	2180      	movs	r1, #128	; 0x80
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f001 fa21 	bl	8007c82 <USBH_AllocPipe>
 8006840:	4603      	mov	r3, r0
 8006842:	461a      	mov	r2, r3
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	7919      	ldrb	r1, [r3, #4]
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800685c:	b292      	uxth	r2, r2
 800685e:	9202      	str	r2, [sp, #8]
 8006860:	2200      	movs	r2, #0
 8006862:	9201      	str	r2, [sp, #4]
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	4603      	mov	r3, r0
 8006868:	2280      	movs	r2, #128	; 0x80
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f001 f9da 	bl	8007c24 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	7959      	ldrb	r1, [r3, #5]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006884:	b292      	uxth	r2, r2
 8006886:	9202      	str	r2, [sp, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	9201      	str	r2, [sp, #4]
 800688c:	9300      	str	r3, [sp, #0]
 800688e:	4603      	mov	r3, r0
 8006890:	2200      	movs	r2, #0
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f001 f9c6 	bl	8007c24 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006898:	e114      	b.n	8006ac4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 f918 	bl	8006ad0 <USBH_HandleEnum>
 80068a0:	4603      	mov	r3, r0
 80068a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80068a4:	7bbb      	ldrb	r3, [r7, #14]
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f040 80fe 	bne.w	8006aaa <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d103      	bne.n	80068c8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2208      	movs	r2, #8
 80068c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80068c6:	e0f0      	b.n	8006aaa <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2207      	movs	r2, #7
 80068cc:	701a      	strb	r2, [r3, #0]
      break;
 80068ce:	e0ec      	b.n	8006aaa <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	f000 80e9 	beq.w	8006aae <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80068e2:	2101      	movs	r1, #1
 80068e4:	6878      	ldr	r0, [r7, #4]
 80068e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2208      	movs	r2, #8
 80068ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80068ee:	e0de      	b.n	8006aae <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80068f6:	b29b      	uxth	r3, r3
 80068f8:	4619      	mov	r1, r3
 80068fa:	6878      	ldr	r0, [r7, #4]
 80068fc:	f000 fc2c 	bl	8007158 <USBH_SetCfg>
 8006900:	4603      	mov	r3, r0
 8006902:	2b00      	cmp	r3, #0
 8006904:	f040 80d5 	bne.w	8006ab2 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2209      	movs	r2, #9
 800690c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800690e:	e0d0      	b.n	8006ab2 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d016      	beq.n	800694c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800691e:	2101      	movs	r1, #1
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fc3c 	bl	800719e <USBH_SetFeature>
 8006926:	4603      	mov	r3, r0
 8006928:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800692a:	7bbb      	ldrb	r3, [r7, #14]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d103      	bne.n	800693a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	220a      	movs	r2, #10
 8006936:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006938:	e0bd      	b.n	8006ab6 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800693a:	7bbb      	ldrb	r3, [r7, #14]
 800693c:	b2db      	uxtb	r3, r3
 800693e:	2b03      	cmp	r3, #3
 8006940:	f040 80b9 	bne.w	8006ab6 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	220a      	movs	r2, #10
 8006948:	701a      	strb	r2, [r3, #0]
      break;
 800694a:	e0b4      	b.n	8006ab6 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	220a      	movs	r2, #10
 8006950:	701a      	strb	r2, [r3, #0]
      break;
 8006952:	e0b0      	b.n	8006ab6 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800695a:	2b00      	cmp	r3, #0
 800695c:	f000 80ad 	beq.w	8006aba <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	2200      	movs	r2, #0
 8006964:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006968:	2300      	movs	r3, #0
 800696a:	73fb      	strb	r3, [r7, #15]
 800696c:	e016      	b.n	800699c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800696e:	7bfa      	ldrb	r2, [r7, #15]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	32de      	adds	r2, #222	; 0xde
 8006974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006978:	791a      	ldrb	r2, [r3, #4]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006980:	429a      	cmp	r2, r3
 8006982:	d108      	bne.n	8006996 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006984:	7bfa      	ldrb	r2, [r7, #15]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	32de      	adds	r2, #222	; 0xde
 800698a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006994:	e005      	b.n	80069a2 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006996:	7bfb      	ldrb	r3, [r7, #15]
 8006998:	3301      	adds	r3, #1
 800699a:	73fb      	strb	r3, [r7, #15]
 800699c:	7bfb      	ldrb	r3, [r7, #15]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d0e5      	beq.n	800696e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d016      	beq.n	80069da <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	4798      	blx	r3
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d109      	bne.n	80069d2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2206      	movs	r2, #6
 80069c2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80069ca:	2103      	movs	r1, #3
 80069cc:	6878      	ldr	r0, [r7, #4]
 80069ce:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80069d0:	e073      	b.n	8006aba <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	220d      	movs	r2, #13
 80069d6:	701a      	strb	r2, [r3, #0]
      break;
 80069d8:	e06f      	b.n	8006aba <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	220d      	movs	r2, #13
 80069de:	701a      	strb	r2, [r3, #0]
      break;
 80069e0:	e06b      	b.n	8006aba <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d017      	beq.n	8006a1c <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069f2:	691b      	ldr	r3, [r3, #16]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	4798      	blx	r3
 80069f8:	4603      	mov	r3, r0
 80069fa:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80069fc:	7bbb      	ldrb	r3, [r7, #14]
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d103      	bne.n	8006a0c <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	220b      	movs	r2, #11
 8006a08:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a0a:	e058      	b.n	8006abe <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006a0c:	7bbb      	ldrb	r3, [r7, #14]
 8006a0e:	b2db      	uxtb	r3, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d154      	bne.n	8006abe <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	220d      	movs	r2, #13
 8006a18:	701a      	strb	r2, [r3, #0]
      break;
 8006a1a:	e050      	b.n	8006abe <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	220d      	movs	r2, #13
 8006a20:	701a      	strb	r2, [r3, #0]
      break;
 8006a22:	e04c      	b.n	8006abe <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d049      	beq.n	8006ac2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a34:	695b      	ldr	r3, [r3, #20]
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	4798      	blx	r3
      }
      break;
 8006a3a:	e042      	b.n	8006ac2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006a44:	6878      	ldr	r0, [r7, #4]
 8006a46:	f7ff fd67 	bl	8006518 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d009      	beq.n	8006a68 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d005      	beq.n	8006a7e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006a78:	2105      	movs	r1, #5
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d107      	bne.n	8006a9a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f7ff fe20 	bl	80066d8 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a98:	e014      	b.n	8006ac4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	f001 faa4 	bl	8007fe8 <USBH_LL_Start>
      break;
 8006aa0:	e010      	b.n	8006ac4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006aa2:	bf00      	nop
 8006aa4:	e00e      	b.n	8006ac4 <USBH_Process+0x3cc>
      break;
 8006aa6:	bf00      	nop
 8006aa8:	e00c      	b.n	8006ac4 <USBH_Process+0x3cc>
      break;
 8006aaa:	bf00      	nop
 8006aac:	e00a      	b.n	8006ac4 <USBH_Process+0x3cc>
    break;
 8006aae:	bf00      	nop
 8006ab0:	e008      	b.n	8006ac4 <USBH_Process+0x3cc>
      break;
 8006ab2:	bf00      	nop
 8006ab4:	e006      	b.n	8006ac4 <USBH_Process+0x3cc>
      break;
 8006ab6:	bf00      	nop
 8006ab8:	e004      	b.n	8006ac4 <USBH_Process+0x3cc>
      break;
 8006aba:	bf00      	nop
 8006abc:	e002      	b.n	8006ac4 <USBH_Process+0x3cc>
      break;
 8006abe:	bf00      	nop
 8006ac0:	e000      	b.n	8006ac4 <USBH_Process+0x3cc>
      break;
 8006ac2:	bf00      	nop
  }
  return USBH_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop

08006ad0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b088      	sub	sp, #32
 8006ad4:	af04      	add	r7, sp, #16
 8006ad6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006adc:	2301      	movs	r3, #1
 8006ade:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	785b      	ldrb	r3, [r3, #1]
 8006ae4:	2b07      	cmp	r3, #7
 8006ae6:	f200 81c1 	bhi.w	8006e6c <USBH_HandleEnum+0x39c>
 8006aea:	a201      	add	r2, pc, #4	; (adr r2, 8006af0 <USBH_HandleEnum+0x20>)
 8006aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af0:	08006b11 	.word	0x08006b11
 8006af4:	08006bcf 	.word	0x08006bcf
 8006af8:	08006c39 	.word	0x08006c39
 8006afc:	08006cc7 	.word	0x08006cc7
 8006b00:	08006d31 	.word	0x08006d31
 8006b04:	08006da1 	.word	0x08006da1
 8006b08:	08006de7 	.word	0x08006de7
 8006b0c:	08006e2d 	.word	0x08006e2d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006b10:	2108      	movs	r1, #8
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fa50 	bl	8006fb8 <USBH_Get_DevDesc>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006b1c:	7bbb      	ldrb	r3, [r7, #14]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d130      	bne.n	8006b84 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	7919      	ldrb	r1, [r3, #4]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006b46:	b292      	uxth	r2, r2
 8006b48:	9202      	str	r2, [sp, #8]
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	9201      	str	r2, [sp, #4]
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	4603      	mov	r3, r0
 8006b52:	2280      	movs	r2, #128	; 0x80
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 f865 	bl	8007c24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	7959      	ldrb	r1, [r3, #5]
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006b6a:	687a      	ldr	r2, [r7, #4]
 8006b6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006b6e:	b292      	uxth	r2, r2
 8006b70:	9202      	str	r2, [sp, #8]
 8006b72:	2200      	movs	r2, #0
 8006b74:	9201      	str	r2, [sp, #4]
 8006b76:	9300      	str	r3, [sp, #0]
 8006b78:	4603      	mov	r3, r0
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f001 f851 	bl	8007c24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006b82:	e175      	b.n	8006e70 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006b84:	7bbb      	ldrb	r3, [r7, #14]
 8006b86:	2b03      	cmp	r3, #3
 8006b88:	f040 8172 	bne.w	8006e70 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006b92:	3301      	adds	r3, #1
 8006b94:	b2da      	uxtb	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006ba2:	2b03      	cmp	r3, #3
 8006ba4:	d903      	bls.n	8006bae <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	220d      	movs	r2, #13
 8006baa:	701a      	strb	r2, [r3, #0]
      break;
 8006bac:	e160      	b.n	8006e70 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	795b      	ldrb	r3, [r3, #5]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f001 f885 	bl	8007cc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	791b      	ldrb	r3, [r3, #4]
 8006bbe:	4619      	mov	r1, r3
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f001 f87f 	bl	8007cc4 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	701a      	strb	r2, [r3, #0]
      break;
 8006bcc:	e150      	b.n	8006e70 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006bce:	2112      	movs	r1, #18
 8006bd0:	6878      	ldr	r0, [r7, #4]
 8006bd2:	f000 f9f1 	bl	8006fb8 <USBH_Get_DevDesc>
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006bda:	7bbb      	ldrb	r3, [r7, #14]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006be6:	e145      	b.n	8006e74 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006be8:	7bbb      	ldrb	r3, [r7, #14]
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	f040 8142 	bne.w	8006e74 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006c06:	2b03      	cmp	r3, #3
 8006c08:	d903      	bls.n	8006c12 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	220d      	movs	r2, #13
 8006c0e:	701a      	strb	r2, [r3, #0]
      break;
 8006c10:	e130      	b.n	8006e74 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	795b      	ldrb	r3, [r3, #5]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f001 f853 	bl	8007cc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	791b      	ldrb	r3, [r3, #4]
 8006c22:	4619      	mov	r1, r3
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f001 f84d 	bl	8007cc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	701a      	strb	r2, [r3, #0]
      break;
 8006c36:	e11d      	b.n	8006e74 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006c38:	2101      	movs	r1, #1
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fa68 	bl	8007110 <USBH_SetAddress>
 8006c40:	4603      	mov	r3, r0
 8006c42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006c44:	7bbb      	ldrb	r3, [r7, #14]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d132      	bne.n	8006cb0 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006c4a:	2002      	movs	r0, #2
 8006c4c:	f001 fb30 	bl	80082b0 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2203      	movs	r2, #3
 8006c5c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	7919      	ldrb	r1, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006c72:	b292      	uxth	r2, r2
 8006c74:	9202      	str	r2, [sp, #8]
 8006c76:	2200      	movs	r2, #0
 8006c78:	9201      	str	r2, [sp, #4]
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2280      	movs	r2, #128	; 0x80
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 ffcf 	bl	8007c24 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	7959      	ldrb	r1, [r3, #5]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006c96:	687a      	ldr	r2, [r7, #4]
 8006c98:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006c9a:	b292      	uxth	r2, r2
 8006c9c:	9202      	str	r2, [sp, #8]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	9201      	str	r2, [sp, #4]
 8006ca2:	9300      	str	r3, [sp, #0]
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 ffbb 	bl	8007c24 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006cae:	e0e3      	b.n	8006e78 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006cb0:	7bbb      	ldrb	r3, [r7, #14]
 8006cb2:	2b03      	cmp	r3, #3
 8006cb4:	f040 80e0 	bne.w	8006e78 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	220d      	movs	r2, #13
 8006cbc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	705a      	strb	r2, [r3, #1]
      break;
 8006cc4:	e0d8      	b.n	8006e78 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006cc6:	2109      	movs	r1, #9
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 f99d 	bl	8007008 <USBH_Get_CfgDesc>
 8006cce:	4603      	mov	r3, r0
 8006cd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006cd2:	7bbb      	ldrb	r3, [r7, #14]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d103      	bne.n	8006ce0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2204      	movs	r2, #4
 8006cdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006cde:	e0cd      	b.n	8006e7c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006ce0:	7bbb      	ldrb	r3, [r7, #14]
 8006ce2:	2b03      	cmp	r3, #3
 8006ce4:	f040 80ca 	bne.w	8006e7c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cee:	3301      	adds	r3, #1
 8006cf0:	b2da      	uxtb	r2, r3
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006cfe:	2b03      	cmp	r3, #3
 8006d00:	d903      	bls.n	8006d0a <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	220d      	movs	r2, #13
 8006d06:	701a      	strb	r2, [r3, #0]
      break;
 8006d08:	e0b8      	b.n	8006e7c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	795b      	ldrb	r3, [r3, #5]
 8006d0e:	4619      	mov	r1, r3
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 ffd7 	bl	8007cc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	791b      	ldrb	r3, [r3, #4]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 ffd1 	bl	8007cc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	701a      	strb	r2, [r3, #0]
      break;
 8006d2e:	e0a5      	b.n	8006e7c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f000 f965 	bl	8007008 <USBH_Get_CfgDesc>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006d42:	7bbb      	ldrb	r3, [r7, #14]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d103      	bne.n	8006d50 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2205      	movs	r2, #5
 8006d4c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006d4e:	e097      	b.n	8006e80 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006d50:	7bbb      	ldrb	r3, [r7, #14]
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	f040 8094 	bne.w	8006e80 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d5e:	3301      	adds	r3, #1
 8006d60:	b2da      	uxtb	r2, r3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006d6e:	2b03      	cmp	r3, #3
 8006d70:	d903      	bls.n	8006d7a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	220d      	movs	r2, #13
 8006d76:	701a      	strb	r2, [r3, #0]
      break;
 8006d78:	e082      	b.n	8006e80 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	795b      	ldrb	r3, [r3, #5]
 8006d7e:	4619      	mov	r1, r3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 ff9f 	bl	8007cc4 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	791b      	ldrb	r3, [r3, #4]
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 ff99 	bl	8007cc4 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2200      	movs	r2, #0
 8006d96:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
      break;
 8006d9e:	e06f      	b.n	8006e80 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d019      	beq.n	8006dde <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8006db6:	23ff      	movs	r3, #255	; 0xff
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f000 f949 	bl	8007050 <USBH_Get_StringDesc>
 8006dbe:	4603      	mov	r3, r0
 8006dc0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006dc2:	7bbb      	ldrb	r3, [r7, #14]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d103      	bne.n	8006dd0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2206      	movs	r2, #6
 8006dcc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006dce:	e059      	b.n	8006e84 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b03      	cmp	r3, #3
 8006dd4:	d156      	bne.n	8006e84 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2206      	movs	r2, #6
 8006dda:	705a      	strb	r2, [r3, #1]
      break;
 8006ddc:	e052      	b.n	8006e84 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2206      	movs	r2, #6
 8006de2:	705a      	strb	r2, [r3, #1]
      break;
 8006de4:	e04e      	b.n	8006e84 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d019      	beq.n	8006e24 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8006dfc:	23ff      	movs	r3, #255	; 0xff
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f926 	bl	8007050 <USBH_Get_StringDesc>
 8006e04:	4603      	mov	r3, r0
 8006e06:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e08:	7bbb      	ldrb	r3, [r7, #14]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d103      	bne.n	8006e16 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2207      	movs	r2, #7
 8006e12:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006e14:	e038      	b.n	8006e88 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
 8006e18:	2b03      	cmp	r3, #3
 8006e1a:	d135      	bne.n	8006e88 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2207      	movs	r2, #7
 8006e20:	705a      	strb	r2, [r3, #1]
      break;
 8006e22:	e031      	b.n	8006e88 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2207      	movs	r2, #7
 8006e28:	705a      	strb	r2, [r3, #1]
      break;
 8006e2a:	e02d      	b.n	8006e88 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d017      	beq.n	8006e66 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8006e42:	23ff      	movs	r3, #255	; 0xff
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f000 f903 	bl	8007050 <USBH_Get_StringDesc>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8006e4e:	7bbb      	ldrb	r3, [r7, #14]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d102      	bne.n	8006e5a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8006e58:	e018      	b.n	8006e8c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e5a:	7bbb      	ldrb	r3, [r7, #14]
 8006e5c:	2b03      	cmp	r3, #3
 8006e5e:	d115      	bne.n	8006e8c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
      break;
 8006e64:	e012      	b.n	8006e8c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	73fb      	strb	r3, [r7, #15]
      break;
 8006e6a:	e00f      	b.n	8006e8c <USBH_HandleEnum+0x3bc>

    default:
      break;
 8006e6c:	bf00      	nop
 8006e6e:	e00e      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e70:	bf00      	nop
 8006e72:	e00c      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e74:	bf00      	nop
 8006e76:	e00a      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e78:	bf00      	nop
 8006e7a:	e008      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e7c:	bf00      	nop
 8006e7e:	e006      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e80:	bf00      	nop
 8006e82:	e004      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e84:	bf00      	nop
 8006e86:	e002      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e88:	bf00      	nop
 8006e8a:	e000      	b.n	8006e8e <USBH_HandleEnum+0x3be>
      break;
 8006e8c:	bf00      	nop
  }
  return Status;
 8006e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3710      	adds	r7, #16
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	683a      	ldr	r2, [r7, #0]
 8006ea6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8006eaa:	bf00      	nop
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b082      	sub	sp, #8
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f804 	bl	8006eda <USBH_HandleSof>
}
 8006ed2:	bf00      	nop
 8006ed4:	3708      	adds	r7, #8
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}

08006eda <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8006eda:	b580      	push	{r7, lr}
 8006edc:	b082      	sub	sp, #8
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	781b      	ldrb	r3, [r3, #0]
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	2b0b      	cmp	r3, #11
 8006eea:	d10a      	bne.n	8006f02 <USBH_HandleSof+0x28>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d005      	beq.n	8006f02 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006efc:	699b      	ldr	r3, [r3, #24]
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	4798      	blx	r3
  }
}
 8006f02:	bf00      	nop
 8006f04:	3708      	adds	r7, #8
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}

08006f0a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b083      	sub	sp, #12
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	2201      	movs	r2, #1
 8006f16:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8006f1a:	bf00      	nop
}
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	2200      	movs	r2, #0
 8006f32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006f36:	bf00      	nop
}
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr

08006f42 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b083      	sub	sp, #12
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	2200      	movs	r2, #0
 8006f56:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006f62:	2300      	movs	r3, #0
}
 8006f64:	4618      	mov	r0, r3
 8006f66:	370c      	adds	r7, #12
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6e:	4770      	bx	lr

08006f70 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2200      	movs	r2, #0
 8006f84:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f001 f844 	bl	800801e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	791b      	ldrb	r3, [r3, #4]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fe91 	bl	8007cc4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	795b      	ldrb	r3, [r3, #5]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fe8b 	bl	8007cc4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3708      	adds	r7, #8
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8006fca:	78fb      	ldrb	r3, [r7, #3]
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	9300      	str	r3, [sp, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f000 f864 	bl	80070a6 <USBH_GetDescriptor>
 8006fde:	4603      	mov	r3, r0
 8006fe0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8006fe2:	7bfb      	ldrb	r3, [r7, #15]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d10a      	bne.n	8006ffe <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f203 3026 	addw	r0, r3, #806	; 0x326
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006ff4:	78fa      	ldrb	r2, [r7, #3]
 8006ff6:	b292      	uxth	r2, r2
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f000 f918 	bl	800722e <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af02      	add	r7, sp, #8
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	331c      	adds	r3, #28
 8007018:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800701a:	887b      	ldrh	r3, [r7, #2]
 800701c:	9300      	str	r3, [sp, #0]
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007024:	2100      	movs	r1, #0
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 f83d 	bl	80070a6 <USBH_GetDescriptor>
 800702c:	4603      	mov	r3, r0
 800702e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d107      	bne.n	8007046 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8007036:	887b      	ldrh	r3, [r7, #2]
 8007038:	461a      	mov	r2, r3
 800703a:	68b9      	ldr	r1, [r7, #8]
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f000 f987 	bl	8007350 <USBH_ParseCfgDesc>
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}

08007050 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b088      	sub	sp, #32
 8007054:	af02      	add	r7, sp, #8
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	607a      	str	r2, [r7, #4]
 800705a:	461a      	mov	r2, r3
 800705c:	460b      	mov	r3, r1
 800705e:	72fb      	strb	r3, [r7, #11]
 8007060:	4613      	mov	r3, r2
 8007062:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007064:	7afb      	ldrb	r3, [r7, #11]
 8007066:	b29b      	uxth	r3, r3
 8007068:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800706c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007074:	893b      	ldrh	r3, [r7, #8]
 8007076:	9300      	str	r3, [sp, #0]
 8007078:	460b      	mov	r3, r1
 800707a:	2100      	movs	r1, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 f812 	bl	80070a6 <USBH_GetDescriptor>
 8007082:	4603      	mov	r3, r0
 8007084:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8007086:	7dfb      	ldrb	r3, [r7, #23]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d107      	bne.n	800709c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007092:	893a      	ldrh	r2, [r7, #8]
 8007094:	6879      	ldr	r1, [r7, #4]
 8007096:	4618      	mov	r0, r3
 8007098:	f000 fb24 	bl	80076e4 <USBH_ParseStringDesc>
  }

  return status;
 800709c:	7dfb      	ldrb	r3, [r7, #23]
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3718      	adds	r7, #24
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}

080070a6 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80070a6:	b580      	push	{r7, lr}
 80070a8:	b084      	sub	sp, #16
 80070aa:	af00      	add	r7, sp, #0
 80070ac:	60f8      	str	r0, [r7, #12]
 80070ae:	607b      	str	r3, [r7, #4]
 80070b0:	460b      	mov	r3, r1
 80070b2:	72fb      	strb	r3, [r7, #11]
 80070b4:	4613      	mov	r3, r2
 80070b6:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	789b      	ldrb	r3, [r3, #2]
 80070bc:	2b01      	cmp	r3, #1
 80070be:	d11c      	bne.n	80070fa <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80070c0:	7afb      	ldrb	r3, [r7, #11]
 80070c2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80070c6:	b2da      	uxtb	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2206      	movs	r2, #6
 80070d0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	893a      	ldrh	r2, [r7, #8]
 80070d6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80070d8:	893b      	ldrh	r3, [r7, #8]
 80070da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80070de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070e2:	d104      	bne.n	80070ee <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f240 4209 	movw	r2, #1033	; 0x409
 80070ea:	829a      	strh	r2, [r3, #20]
 80070ec:	e002      	b.n	80070f4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	8b3a      	ldrh	r2, [r7, #24]
 80070f8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80070fa:	8b3b      	ldrh	r3, [r7, #24]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f000 fb3d 	bl	8007780 <USBH_CtlReq>
 8007106:	4603      	mov	r3, r0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3710      	adds	r7, #16
 800710c:	46bd      	mov	sp, r7
 800710e:	bd80      	pop	{r7, pc}

08007110 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	460b      	mov	r3, r1
 800711a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	789b      	ldrb	r3, [r3, #2]
 8007120:	2b01      	cmp	r3, #1
 8007122:	d10f      	bne.n	8007144 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2205      	movs	r2, #5
 800712e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007130:	78fb      	ldrb	r3, [r7, #3]
 8007132:	b29a      	uxth	r2, r3
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2200      	movs	r2, #0
 8007142:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007144:	2200      	movs	r2, #0
 8007146:	2100      	movs	r1, #0
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fb19 	bl	8007780 <USBH_CtlReq>
 800714e:	4603      	mov	r3, r0
}
 8007150:	4618      	mov	r0, r3
 8007152:	3708      	adds	r7, #8
 8007154:	46bd      	mov	sp, r7
 8007156:	bd80      	pop	{r7, pc}

08007158 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b082      	sub	sp, #8
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
 8007160:	460b      	mov	r3, r1
 8007162:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	789b      	ldrb	r3, [r3, #2]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d10e      	bne.n	800718a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2200      	movs	r2, #0
 8007170:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2209      	movs	r2, #9
 8007176:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	887a      	ldrh	r2, [r7, #2]
 800717c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800718a:	2200      	movs	r2, #0
 800718c:	2100      	movs	r1, #0
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 faf6 	bl	8007780 <USBH_CtlReq>
 8007194:	4603      	mov	r3, r0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	460b      	mov	r3, r1
 80071a8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	789b      	ldrb	r3, [r3, #2]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d10f      	bne.n	80071d2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2203      	movs	r2, #3
 80071bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80071d2:	2200      	movs	r2, #0
 80071d4:	2100      	movs	r1, #0
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 fad2 	bl	8007780 <USBH_CtlReq>
 80071dc:	4603      	mov	r3, r0
}
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	460b      	mov	r3, r1
 80071f0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	789b      	ldrb	r3, [r3, #2]
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d10f      	bne.n	800721a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2202      	movs	r2, #2
 80071fe:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2200      	movs	r2, #0
 800720a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800720c:	78fb      	ldrb	r3, [r7, #3]
 800720e:	b29a      	uxth	r2, r3
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2200      	movs	r2, #0
 8007218:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800721a:	2200      	movs	r2, #0
 800721c:	2100      	movs	r1, #0
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 faae 	bl	8007780 <USBH_CtlReq>
 8007224:	4603      	mov	r3, r0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800722e:	b480      	push	{r7}
 8007230:	b085      	sub	sp, #20
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	781a      	ldrb	r2, [r3, #0]
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	785a      	ldrb	r2, [r3, #1]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800724c:	68bb      	ldr	r3, [r7, #8]
 800724e:	3302      	adds	r3, #2
 8007250:	781b      	ldrb	r3, [r3, #0]
 8007252:	b29a      	uxth	r2, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	3303      	adds	r3, #3
 8007258:	781b      	ldrb	r3, [r3, #0]
 800725a:	b29b      	uxth	r3, r3
 800725c:	021b      	lsls	r3, r3, #8
 800725e:	b29b      	uxth	r3, r3
 8007260:	4313      	orrs	r3, r2
 8007262:	b29a      	uxth	r2, r3
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	791a      	ldrb	r2, [r3, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	795a      	ldrb	r2, [r3, #5]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	799a      	ldrb	r2, [r3, #6]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007280:	68bb      	ldr	r3, [r7, #8]
 8007282:	79da      	ldrb	r2, [r3, #7]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	79db      	ldrb	r3, [r3, #7]
 800728c:	2b20      	cmp	r3, #32
 800728e:	dc11      	bgt.n	80072b4 <USBH_ParseDevDesc+0x86>
 8007290:	2b08      	cmp	r3, #8
 8007292:	db16      	blt.n	80072c2 <USBH_ParseDevDesc+0x94>
 8007294:	3b08      	subs	r3, #8
 8007296:	2201      	movs	r2, #1
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 80072a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf14      	ite	ne
 80072a8:	2301      	movne	r3, #1
 80072aa:	2300      	moveq	r3, #0
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d102      	bne.n	80072b8 <USBH_ParseDevDesc+0x8a>
 80072b2:	e006      	b.n	80072c2 <USBH_ParseDevDesc+0x94>
 80072b4:	2b40      	cmp	r3, #64	; 0x40
 80072b6:	d104      	bne.n	80072c2 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	79da      	ldrb	r2, [r3, #7]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	71da      	strb	r2, [r3, #7]
      break;
 80072c0:	e003      	b.n	80072ca <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2240      	movs	r2, #64	; 0x40
 80072c6:	71da      	strb	r2, [r3, #7]
      break;
 80072c8:	bf00      	nop
  }

  if (length > 8U)
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d939      	bls.n	8007344 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	3308      	adds	r3, #8
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	b29a      	uxth	r2, r3
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	3309      	adds	r3, #9
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	b29b      	uxth	r3, r3
 80072e0:	021b      	lsls	r3, r3, #8
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	4313      	orrs	r3, r2
 80072e6:	b29a      	uxth	r2, r3
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	330a      	adds	r3, #10
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	330b      	adds	r3, #11
 80072f8:	781b      	ldrb	r3, [r3, #0]
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	021b      	lsls	r3, r3, #8
 80072fe:	b29b      	uxth	r3, r3
 8007300:	4313      	orrs	r3, r2
 8007302:	b29a      	uxth	r2, r3
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	330c      	adds	r3, #12
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	b29a      	uxth	r2, r3
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	330d      	adds	r3, #13
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	b29b      	uxth	r3, r3
 800731c:	4313      	orrs	r3, r2
 800731e:	b29a      	uxth	r2, r3
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	7b9a      	ldrb	r2, [r3, #14]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	7bda      	ldrb	r2, [r3, #15]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	7c1a      	ldrb	r2, [r3, #16]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	7c5a      	ldrb	r2, [r3, #17]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	745a      	strb	r2, [r3, #17]
  }
}
 8007344:	bf00      	nop
 8007346:	3714      	adds	r7, #20
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08c      	sub	sp, #48	; 0x30
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	4613      	mov	r3, r2
 800735c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007364:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8007366:	2300      	movs	r3, #0
 8007368:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007370:	2300      	movs	r3, #0
 8007372:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	781a      	ldrb	r2, [r3, #0]
 8007384:	6a3b      	ldr	r3, [r7, #32]
 8007386:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	785a      	ldrb	r2, [r3, #1]
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	3302      	adds	r3, #2
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	b29a      	uxth	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	3303      	adds	r3, #3
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	b29b      	uxth	r3, r3
 80073a0:	021b      	lsls	r3, r3, #8
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	4313      	orrs	r3, r2
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073ac:	bf28      	it	cs
 80073ae:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80073b2:	b29a      	uxth	r2, r3
 80073b4:	6a3b      	ldr	r3, [r7, #32]
 80073b6:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	791a      	ldrb	r2, [r3, #4]
 80073bc:	6a3b      	ldr	r3, [r7, #32]
 80073be:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	795a      	ldrb	r2, [r3, #5]
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	799a      	ldrb	r2, [r3, #6]
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80073d0:	68bb      	ldr	r3, [r7, #8]
 80073d2:	79da      	ldrb	r2, [r3, #7]
 80073d4:	6a3b      	ldr	r3, [r7, #32]
 80073d6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80073d8:	68bb      	ldr	r3, [r7, #8]
 80073da:	7a1a      	ldrb	r2, [r3, #8]
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	2b09      	cmp	r3, #9
 80073e6:	d002      	beq.n	80073ee <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80073e8:	6a3b      	ldr	r3, [r7, #32]
 80073ea:	2209      	movs	r2, #9
 80073ec:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80073ee:	88fb      	ldrh	r3, [r7, #6]
 80073f0:	2b09      	cmp	r3, #9
 80073f2:	f240 809d 	bls.w	8007530 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80073f6:	2309      	movs	r3, #9
 80073f8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80073fa:	2300      	movs	r3, #0
 80073fc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80073fe:	e081      	b.n	8007504 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007400:	f107 0316 	add.w	r3, r7, #22
 8007404:	4619      	mov	r1, r3
 8007406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007408:	f000 f99f 	bl	800774a <USBH_GetNextDesc>
 800740c:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800740e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007410:	785b      	ldrb	r3, [r3, #1]
 8007412:	2b04      	cmp	r3, #4
 8007414:	d176      	bne.n	8007504 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8007416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	2b09      	cmp	r3, #9
 800741c:	d002      	beq.n	8007424 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800741e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007420:	2209      	movs	r2, #9
 8007422:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8007424:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007428:	221a      	movs	r2, #26
 800742a:	fb02 f303 	mul.w	r3, r2, r3
 800742e:	3308      	adds	r3, #8
 8007430:	6a3a      	ldr	r2, [r7, #32]
 8007432:	4413      	add	r3, r2
 8007434:	3302      	adds	r3, #2
 8007436:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8007438:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800743a:	69f8      	ldr	r0, [r7, #28]
 800743c:	f000 f87e 	bl	800753c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007440:	2300      	movs	r3, #0
 8007442:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8007446:	2300      	movs	r3, #0
 8007448:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800744a:	e043      	b.n	80074d4 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800744c:	f107 0316 	add.w	r3, r7, #22
 8007450:	4619      	mov	r1, r3
 8007452:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007454:	f000 f979 	bl	800774a <USBH_GetNextDesc>
 8007458:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800745a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	2b05      	cmp	r3, #5
 8007460:	d138      	bne.n	80074d4 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	795b      	ldrb	r3, [r3, #5]
 8007466:	2b01      	cmp	r3, #1
 8007468:	d10f      	bne.n	800748a <USBH_ParseCfgDesc+0x13a>
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	799b      	ldrb	r3, [r3, #6]
 800746e:	2b02      	cmp	r3, #2
 8007470:	d10b      	bne.n	800748a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007472:	69fb      	ldr	r3, [r7, #28]
 8007474:	79db      	ldrb	r3, [r3, #7]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10f      	bne.n	800749a <USBH_ParseCfgDesc+0x14a>
 800747a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b09      	cmp	r3, #9
 8007480:	d00b      	beq.n	800749a <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007484:	2209      	movs	r2, #9
 8007486:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007488:	e007      	b.n	800749a <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b07      	cmp	r3, #7
 8007490:	d004      	beq.n	800749c <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007494:	2207      	movs	r2, #7
 8007496:	701a      	strb	r2, [r3, #0]
 8007498:	e000      	b.n	800749c <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800749a:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800749c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074a0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074a4:	3201      	adds	r2, #1
 80074a6:	00d2      	lsls	r2, r2, #3
 80074a8:	211a      	movs	r1, #26
 80074aa:	fb01 f303 	mul.w	r3, r1, r3
 80074ae:	4413      	add	r3, r2
 80074b0:	3308      	adds	r3, #8
 80074b2:	6a3a      	ldr	r2, [r7, #32]
 80074b4:	4413      	add	r3, r2
 80074b6:	3304      	adds	r3, #4
 80074b8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80074ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074bc:	69b9      	ldr	r1, [r7, #24]
 80074be:	68f8      	ldr	r0, [r7, #12]
 80074c0:	f000 f86b 	bl	800759a <USBH_ParseEPDesc>
 80074c4:	4603      	mov	r3, r0
 80074c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80074ca:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80074ce:	3301      	adds	r3, #1
 80074d0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	791b      	ldrb	r3, [r3, #4]
 80074d8:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074dc:	429a      	cmp	r2, r3
 80074de:	d204      	bcs.n	80074ea <USBH_ParseCfgDesc+0x19a>
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	885a      	ldrh	r2, [r3, #2]
 80074e4:	8afb      	ldrh	r3, [r7, #22]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d8b0      	bhi.n	800744c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80074ea:	69fb      	ldr	r3, [r7, #28]
 80074ec:	791b      	ldrb	r3, [r3, #4]
 80074ee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d201      	bcs.n	80074fa <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80074f6:	2303      	movs	r3, #3
 80074f8:	e01c      	b.n	8007534 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80074fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074fe:	3301      	adds	r3, #1
 8007500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8007504:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007508:	2b01      	cmp	r3, #1
 800750a:	d805      	bhi.n	8007518 <USBH_ParseCfgDesc+0x1c8>
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	885a      	ldrh	r2, [r3, #2]
 8007510:	8afb      	ldrh	r3, [r7, #22]
 8007512:	429a      	cmp	r2, r3
 8007514:	f63f af74 	bhi.w	8007400 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	791b      	ldrb	r3, [r3, #4]
 800751c:	2b02      	cmp	r3, #2
 800751e:	bf28      	it	cs
 8007520:	2302      	movcs	r3, #2
 8007522:	b2db      	uxtb	r3, r3
 8007524:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007528:	429a      	cmp	r2, r3
 800752a:	d201      	bcs.n	8007530 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800752c:	2303      	movs	r3, #3
 800752e:	e001      	b.n	8007534 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 8007530:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8007534:	4618      	mov	r0, r3
 8007536:	3730      	adds	r7, #48	; 0x30
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	781a      	ldrb	r2, [r3, #0]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	785a      	ldrb	r2, [r3, #1]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	789a      	ldrb	r2, [r3, #2]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	78da      	ldrb	r2, [r3, #3]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8007566:	683b      	ldr	r3, [r7, #0]
 8007568:	791a      	ldrb	r2, [r3, #4]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	795a      	ldrb	r2, [r3, #5]
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	799a      	ldrb	r2, [r3, #6]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800757e:	683b      	ldr	r3, [r7, #0]
 8007580:	79da      	ldrb	r2, [r3, #7]
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	7a1a      	ldrb	r2, [r3, #8]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	721a      	strb	r2, [r3, #8]
}
 800758e:	bf00      	nop
 8007590:	370c      	adds	r7, #12
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr

0800759a <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800759a:	b480      	push	{r7}
 800759c:	b087      	sub	sp, #28
 800759e:	af00      	add	r7, sp, #0
 80075a0:	60f8      	str	r0, [r7, #12]
 80075a2:	60b9      	str	r1, [r7, #8]
 80075a4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	785a      	ldrb	r2, [r3, #1]
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	789a      	ldrb	r2, [r3, #2]
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	78da      	ldrb	r2, [r3, #3]
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	3304      	adds	r3, #4
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3305      	adds	r3, #5
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	021b      	lsls	r3, r3, #8
 80075dc:	b29b      	uxth	r3, r3
 80075de:	4313      	orrs	r3, r2
 80075e0:	b29a      	uxth	r2, r3
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	799a      	ldrb	r2, [r3, #6]
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	889b      	ldrh	r3, [r3, #4]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d102      	bne.n	80075fc <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80075f6:	2303      	movs	r3, #3
 80075f8:	75fb      	strb	r3, [r7, #23]
 80075fa:	e033      	b.n	8007664 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	889b      	ldrh	r3, [r3, #4]
 8007600:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007604:	f023 0307 	bic.w	r3, r3, #7
 8007608:	b29a      	uxth	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800760e:	68bb      	ldr	r3, [r7, #8]
 8007610:	889b      	ldrh	r3, [r3, #4]
 8007612:	b21a      	sxth	r2, r3
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	3304      	adds	r3, #4
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	b299      	uxth	r1, r3
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	3305      	adds	r3, #5
 8007620:	781b      	ldrb	r3, [r3, #0]
 8007622:	b29b      	uxth	r3, r3
 8007624:	021b      	lsls	r3, r3, #8
 8007626:	b29b      	uxth	r3, r3
 8007628:	430b      	orrs	r3, r1
 800762a:	b29b      	uxth	r3, r3
 800762c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007630:	2b00      	cmp	r3, #0
 8007632:	d110      	bne.n	8007656 <USBH_ParseEPDesc+0xbc>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	3304      	adds	r3, #4
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	b299      	uxth	r1, r3
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	3305      	adds	r3, #5
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	b29b      	uxth	r3, r3
 8007644:	021b      	lsls	r3, r3, #8
 8007646:	b29b      	uxth	r3, r3
 8007648:	430b      	orrs	r3, r1
 800764a:	b29b      	uxth	r3, r3
 800764c:	b21b      	sxth	r3, r3
 800764e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007652:	b21b      	sxth	r3, r3
 8007654:	e001      	b.n	800765a <USBH_ParseEPDesc+0xc0>
 8007656:	f44f 7300 	mov.w	r3, #512	; 0x200
 800765a:	4313      	orrs	r3, r2
 800765c:	b21b      	sxth	r3, r3
 800765e:	b29a      	uxth	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800766a:	2b00      	cmp	r3, #0
 800766c:	d116      	bne.n	800769c <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	78db      	ldrb	r3, [r3, #3]
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	2b01      	cmp	r3, #1
 8007678:	d005      	beq.n	8007686 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	78db      	ldrb	r3, [r3, #3]
 800767e:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007682:	2b03      	cmp	r3, #3
 8007684:	d127      	bne.n	80076d6 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	799b      	ldrb	r3, [r3, #6]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <USBH_ParseEPDesc+0xfc>
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	799b      	ldrb	r3, [r3, #6]
 8007692:	2b10      	cmp	r3, #16
 8007694:	d91f      	bls.n	80076d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007696:	2303      	movs	r3, #3
 8007698:	75fb      	strb	r3, [r7, #23]
 800769a:	e01c      	b.n	80076d6 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	78db      	ldrb	r3, [r3, #3]
 80076a0:	f003 0303 	and.w	r3, r3, #3
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d10a      	bne.n	80076be <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	799b      	ldrb	r3, [r3, #6]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d003      	beq.n	80076b8 <USBH_ParseEPDesc+0x11e>
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	799b      	ldrb	r3, [r3, #6]
 80076b4:	2b10      	cmp	r3, #16
 80076b6:	d90e      	bls.n	80076d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076b8:	2303      	movs	r3, #3
 80076ba:	75fb      	strb	r3, [r7, #23]
 80076bc:	e00b      	b.n	80076d6 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	78db      	ldrb	r3, [r3, #3]
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d105      	bne.n	80076d6 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	799b      	ldrb	r3, [r3, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d101      	bne.n	80076d6 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 80076d2:	2303      	movs	r3, #3
 80076d4:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80076d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	371c      	adds	r7, #28
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	3301      	adds	r3, #1
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b03      	cmp	r3, #3
 80076fa:	d120      	bne.n	800773e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	781b      	ldrb	r3, [r3, #0]
 8007700:	1e9a      	subs	r2, r3, #2
 8007702:	88fb      	ldrh	r3, [r7, #6]
 8007704:	4293      	cmp	r3, r2
 8007706:	bf28      	it	cs
 8007708:	4613      	movcs	r3, r2
 800770a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	3302      	adds	r3, #2
 8007710:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8007712:	2300      	movs	r3, #0
 8007714:	82fb      	strh	r3, [r7, #22]
 8007716:	e00b      	b.n	8007730 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8007718:	8afb      	ldrh	r3, [r7, #22]
 800771a:	68fa      	ldr	r2, [r7, #12]
 800771c:	4413      	add	r3, r2
 800771e:	781a      	ldrb	r2, [r3, #0]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	701a      	strb	r2, [r3, #0]
      pdest++;
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	3301      	adds	r3, #1
 8007728:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800772a:	8afb      	ldrh	r3, [r7, #22]
 800772c:	3302      	adds	r3, #2
 800772e:	82fb      	strh	r3, [r7, #22]
 8007730:	8afa      	ldrh	r2, [r7, #22]
 8007732:	8abb      	ldrh	r3, [r7, #20]
 8007734:	429a      	cmp	r2, r3
 8007736:	d3ef      	bcc.n	8007718 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	2200      	movs	r2, #0
 800773c:	701a      	strb	r2, [r3, #0]
  }
}
 800773e:	bf00      	nop
 8007740:	371c      	adds	r7, #28
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800774a:	b480      	push	{r7}
 800774c:	b085      	sub	sp, #20
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	881a      	ldrh	r2, [r3, #0]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	781b      	ldrb	r3, [r3, #0]
 800775c:	b29b      	uxth	r3, r3
 800775e:	4413      	add	r3, r2
 8007760:	b29a      	uxth	r2, r3
 8007762:	683b      	ldr	r3, [r7, #0]
 8007764:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	781b      	ldrb	r3, [r3, #0]
 800776a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	4413      	add	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007772:	68fb      	ldr	r3, [r7, #12]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b086      	sub	sp, #24
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	60b9      	str	r1, [r7, #8]
 800778a:	4613      	mov	r3, r2
 800778c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800778e:	2301      	movs	r3, #1
 8007790:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	789b      	ldrb	r3, [r3, #2]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d002      	beq.n	80077a0 <USBH_CtlReq+0x20>
 800779a:	2b02      	cmp	r3, #2
 800779c:	d00f      	beq.n	80077be <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800779e:	e027      	b.n	80077f0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	68ba      	ldr	r2, [r7, #8]
 80077a4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	88fa      	ldrh	r2, [r7, #6]
 80077aa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2201      	movs	r2, #1
 80077b0:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	2202      	movs	r2, #2
 80077b6:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80077b8:	2301      	movs	r3, #1
 80077ba:	75fb      	strb	r3, [r7, #23]
      break;
 80077bc:	e018      	b.n	80077f0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80077be:	68f8      	ldr	r0, [r7, #12]
 80077c0:	f000 f81c 	bl	80077fc <USBH_HandleControl>
 80077c4:	4603      	mov	r3, r0
 80077c6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80077c8:	7dfb      	ldrb	r3, [r7, #23]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d002      	beq.n	80077d4 <USBH_CtlReq+0x54>
 80077ce:	7dfb      	ldrb	r3, [r7, #23]
 80077d0:	2b03      	cmp	r3, #3
 80077d2:	d106      	bne.n	80077e2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2201      	movs	r2, #1
 80077d8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2200      	movs	r2, #0
 80077de:	761a      	strb	r2, [r3, #24]
      break;
 80077e0:	e005      	b.n	80077ee <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80077e2:	7dfb      	ldrb	r3, [r7, #23]
 80077e4:	2b02      	cmp	r3, #2
 80077e6:	d102      	bne.n	80077ee <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2201      	movs	r2, #1
 80077ec:	709a      	strb	r2, [r3, #2]
      break;
 80077ee:	bf00      	nop
  }
  return status;
 80077f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3718      	adds	r7, #24
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}
	...

080077fc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af02      	add	r7, sp, #8
 8007802:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007804:	2301      	movs	r3, #1
 8007806:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007808:	2300      	movs	r3, #0
 800780a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	7e1b      	ldrb	r3, [r3, #24]
 8007810:	3b01      	subs	r3, #1
 8007812:	2b0a      	cmp	r3, #10
 8007814:	f200 8156 	bhi.w	8007ac4 <USBH_HandleControl+0x2c8>
 8007818:	a201      	add	r2, pc, #4	; (adr r2, 8007820 <USBH_HandleControl+0x24>)
 800781a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800781e:	bf00      	nop
 8007820:	0800784d 	.word	0x0800784d
 8007824:	08007867 	.word	0x08007867
 8007828:	080078d1 	.word	0x080078d1
 800782c:	080078f7 	.word	0x080078f7
 8007830:	0800792f 	.word	0x0800792f
 8007834:	08007959 	.word	0x08007959
 8007838:	080079ab 	.word	0x080079ab
 800783c:	080079cd 	.word	0x080079cd
 8007840:	08007a09 	.word	0x08007a09
 8007844:	08007a2f 	.word	0x08007a2f
 8007848:	08007a6d 	.word	0x08007a6d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f103 0110 	add.w	r1, r3, #16
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	795b      	ldrb	r3, [r3, #5]
 8007856:	461a      	mov	r2, r3
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 f943 	bl	8007ae4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2202      	movs	r2, #2
 8007862:	761a      	strb	r2, [r3, #24]
      break;
 8007864:	e139      	b.n	8007ada <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	795b      	ldrb	r3, [r3, #5]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 fcc5 	bl	80081fc <USBH_LL_GetURBState>
 8007872:	4603      	mov	r3, r0
 8007874:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007876:	7bbb      	ldrb	r3, [r7, #14]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d11e      	bne.n	80078ba <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	7c1b      	ldrb	r3, [r3, #16]
 8007880:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007884:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	8adb      	ldrh	r3, [r3, #22]
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800788e:	7b7b      	ldrb	r3, [r7, #13]
 8007890:	2b80      	cmp	r3, #128	; 0x80
 8007892:	d103      	bne.n	800789c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2203      	movs	r2, #3
 8007898:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800789a:	e115      	b.n	8007ac8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	2205      	movs	r2, #5
 80078a0:	761a      	strb	r2, [r3, #24]
      break;
 80078a2:	e111      	b.n	8007ac8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80078a4:	7b7b      	ldrb	r3, [r7, #13]
 80078a6:	2b80      	cmp	r3, #128	; 0x80
 80078a8:	d103      	bne.n	80078b2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2209      	movs	r2, #9
 80078ae:	761a      	strb	r2, [r3, #24]
      break;
 80078b0:	e10a      	b.n	8007ac8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2207      	movs	r2, #7
 80078b6:	761a      	strb	r2, [r3, #24]
      break;
 80078b8:	e106      	b.n	8007ac8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	2b04      	cmp	r3, #4
 80078be:	d003      	beq.n	80078c8 <USBH_HandleControl+0xcc>
 80078c0:	7bbb      	ldrb	r3, [r7, #14]
 80078c2:	2b02      	cmp	r3, #2
 80078c4:	f040 8100 	bne.w	8007ac8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	220b      	movs	r2, #11
 80078cc:	761a      	strb	r2, [r3, #24]
      break;
 80078ce:	e0fb      	b.n	8007ac8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6899      	ldr	r1, [r3, #8]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	899a      	ldrh	r2, [r3, #12]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	791b      	ldrb	r3, [r3, #4]
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f93a 	bl	8007b62 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2204      	movs	r2, #4
 80078f2:	761a      	strb	r2, [r3, #24]
      break;
 80078f4:	e0f1      	b.n	8007ada <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	791b      	ldrb	r3, [r3, #4]
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fc7d 	bl	80081fc <USBH_LL_GetURBState>
 8007902:	4603      	mov	r3, r0
 8007904:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007906:	7bbb      	ldrb	r3, [r7, #14]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d102      	bne.n	8007912 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2209      	movs	r2, #9
 8007910:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007912:	7bbb      	ldrb	r3, [r7, #14]
 8007914:	2b05      	cmp	r3, #5
 8007916:	d102      	bne.n	800791e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007918:	2303      	movs	r3, #3
 800791a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800791c:	e0d6      	b.n	8007acc <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800791e:	7bbb      	ldrb	r3, [r7, #14]
 8007920:	2b04      	cmp	r3, #4
 8007922:	f040 80d3 	bne.w	8007acc <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	220b      	movs	r2, #11
 800792a:	761a      	strb	r2, [r3, #24]
      break;
 800792c:	e0ce      	b.n	8007acc <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6899      	ldr	r1, [r3, #8]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	899a      	ldrh	r2, [r3, #12]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	2001      	movs	r0, #1
 800793c:	9000      	str	r0, [sp, #0]
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 f8ea 	bl	8007b18 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800794a:	b29a      	uxth	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2206      	movs	r2, #6
 8007954:	761a      	strb	r2, [r3, #24]
      break;
 8007956:	e0c0      	b.n	8007ada <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	795b      	ldrb	r3, [r3, #5]
 800795c:	4619      	mov	r1, r3
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	f000 fc4c 	bl	80081fc <USBH_LL_GetURBState>
 8007964:	4603      	mov	r3, r0
 8007966:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007968:	7bbb      	ldrb	r3, [r7, #14]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d103      	bne.n	8007976 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2207      	movs	r2, #7
 8007972:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007974:	e0ac      	b.n	8007ad0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b05      	cmp	r3, #5
 800797a:	d105      	bne.n	8007988 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	220c      	movs	r2, #12
 8007980:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007982:	2303      	movs	r3, #3
 8007984:	73fb      	strb	r3, [r7, #15]
      break;
 8007986:	e0a3      	b.n	8007ad0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b02      	cmp	r3, #2
 800798c:	d103      	bne.n	8007996 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2205      	movs	r2, #5
 8007992:	761a      	strb	r2, [r3, #24]
      break;
 8007994:	e09c      	b.n	8007ad0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007996:	7bbb      	ldrb	r3, [r7, #14]
 8007998:	2b04      	cmp	r3, #4
 800799a:	f040 8099 	bne.w	8007ad0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	220b      	movs	r2, #11
 80079a2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80079a4:	2302      	movs	r3, #2
 80079a6:	73fb      	strb	r3, [r7, #15]
      break;
 80079a8:	e092      	b.n	8007ad0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	791b      	ldrb	r3, [r3, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	2100      	movs	r1, #0
 80079b2:	6878      	ldr	r0, [r7, #4]
 80079b4:	f000 f8d5 	bl	8007b62 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80079be:	b29a      	uxth	r2, r3
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2208      	movs	r2, #8
 80079c8:	761a      	strb	r2, [r3, #24]

      break;
 80079ca:	e086      	b.n	8007ada <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	791b      	ldrb	r3, [r3, #4]
 80079d0:	4619      	mov	r1, r3
 80079d2:	6878      	ldr	r0, [r7, #4]
 80079d4:	f000 fc12 	bl	80081fc <USBH_LL_GetURBState>
 80079d8:	4603      	mov	r3, r0
 80079da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80079dc:	7bbb      	ldrb	r3, [r7, #14]
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d105      	bne.n	80079ee <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	220d      	movs	r2, #13
 80079e6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80079ec:	e072      	b.n	8007ad4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b04      	cmp	r3, #4
 80079f2:	d103      	bne.n	80079fc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	220b      	movs	r2, #11
 80079f8:	761a      	strb	r2, [r3, #24]
      break;
 80079fa:	e06b      	b.n	8007ad4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80079fc:	7bbb      	ldrb	r3, [r7, #14]
 80079fe:	2b05      	cmp	r3, #5
 8007a00:	d168      	bne.n	8007ad4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e065      	b.n	8007ad4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	795b      	ldrb	r3, [r3, #5]
 8007a0c:	2201      	movs	r2, #1
 8007a0e:	9200      	str	r2, [sp, #0]
 8007a10:	2200      	movs	r2, #0
 8007a12:	2100      	movs	r1, #0
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 f87f 	bl	8007b18 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007a20:	b29a      	uxth	r2, r3
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	220a      	movs	r2, #10
 8007a2a:	761a      	strb	r2, [r3, #24]
      break;
 8007a2c:	e055      	b.n	8007ada <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	795b      	ldrb	r3, [r3, #5]
 8007a32:	4619      	mov	r1, r3
 8007a34:	6878      	ldr	r0, [r7, #4]
 8007a36:	f000 fbe1 	bl	80081fc <USBH_LL_GetURBState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007a3e:	7bbb      	ldrb	r3, [r7, #14]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d105      	bne.n	8007a50 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007a44:	2300      	movs	r3, #0
 8007a46:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	220d      	movs	r2, #13
 8007a4c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007a4e:	e043      	b.n	8007ad8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007a50:	7bbb      	ldrb	r3, [r7, #14]
 8007a52:	2b02      	cmp	r3, #2
 8007a54:	d103      	bne.n	8007a5e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2209      	movs	r2, #9
 8007a5a:	761a      	strb	r2, [r3, #24]
      break;
 8007a5c:	e03c      	b.n	8007ad8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007a5e:	7bbb      	ldrb	r3, [r7, #14]
 8007a60:	2b04      	cmp	r3, #4
 8007a62:	d139      	bne.n	8007ad8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	220b      	movs	r2, #11
 8007a68:	761a      	strb	r2, [r3, #24]
      break;
 8007a6a:	e035      	b.n	8007ad8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	7e5b      	ldrb	r3, [r3, #25]
 8007a70:	3301      	adds	r3, #1
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	765a      	strb	r2, [r3, #25]
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	7e5b      	ldrb	r3, [r3, #25]
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d806      	bhi.n	8007a8e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2201      	movs	r2, #1
 8007a8a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007a8c:	e025      	b.n	8007ada <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007a94:	2106      	movs	r1, #6
 8007a96:	6878      	ldr	r0, [r7, #4]
 8007a98:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	795b      	ldrb	r3, [r3, #5]
 8007aa4:	4619      	mov	r1, r3
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 f90c 	bl	8007cc4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	791b      	ldrb	r3, [r3, #4]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	6878      	ldr	r0, [r7, #4]
 8007ab4:	f000 f906 	bl	8007cc4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2200      	movs	r2, #0
 8007abc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007abe:	2302      	movs	r3, #2
 8007ac0:	73fb      	strb	r3, [r7, #15]
      break;
 8007ac2:	e00a      	b.n	8007ada <USBH_HandleControl+0x2de>

    default:
      break;
 8007ac4:	bf00      	nop
 8007ac6:	e008      	b.n	8007ada <USBH_HandleControl+0x2de>
      break;
 8007ac8:	bf00      	nop
 8007aca:	e006      	b.n	8007ada <USBH_HandleControl+0x2de>
      break;
 8007acc:	bf00      	nop
 8007ace:	e004      	b.n	8007ada <USBH_HandleControl+0x2de>
      break;
 8007ad0:	bf00      	nop
 8007ad2:	e002      	b.n	8007ada <USBH_HandleControl+0x2de>
      break;
 8007ad4:	bf00      	nop
 8007ad6:	e000      	b.n	8007ada <USBH_HandleControl+0x2de>
      break;
 8007ad8:	bf00      	nop
  }

  return status;
 8007ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	3710      	adds	r7, #16
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b088      	sub	sp, #32
 8007ae8:	af04      	add	r7, sp, #16
 8007aea:	60f8      	str	r0, [r7, #12]
 8007aec:	60b9      	str	r1, [r7, #8]
 8007aee:	4613      	mov	r3, r2
 8007af0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007af2:	79f9      	ldrb	r1, [r7, #7]
 8007af4:	2300      	movs	r3, #0
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	2308      	movs	r3, #8
 8007afa:	9302      	str	r3, [sp, #8]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	9301      	str	r3, [sp, #4]
 8007b00:	2300      	movs	r3, #0
 8007b02:	9300      	str	r3, [sp, #0]
 8007b04:	2300      	movs	r3, #0
 8007b06:	2200      	movs	r2, #0
 8007b08:	68f8      	ldr	r0, [r7, #12]
 8007b0a:	f000 fb46 	bl	800819a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007b0e:	2300      	movs	r3, #0
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b088      	sub	sp, #32
 8007b1c:	af04      	add	r7, sp, #16
 8007b1e:	60f8      	str	r0, [r7, #12]
 8007b20:	60b9      	str	r1, [r7, #8]
 8007b22:	4611      	mov	r1, r2
 8007b24:	461a      	mov	r2, r3
 8007b26:	460b      	mov	r3, r1
 8007b28:	80fb      	strh	r3, [r7, #6]
 8007b2a:	4613      	mov	r3, r2
 8007b2c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d001      	beq.n	8007b3c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b3c:	7979      	ldrb	r1, [r7, #5]
 8007b3e:	7e3b      	ldrb	r3, [r7, #24]
 8007b40:	9303      	str	r3, [sp, #12]
 8007b42:	88fb      	ldrh	r3, [r7, #6]
 8007b44:	9302      	str	r3, [sp, #8]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	9301      	str	r3, [sp, #4]
 8007b4a:	2301      	movs	r3, #1
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	2300      	movs	r3, #0
 8007b50:	2200      	movs	r2, #0
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 fb21 	bl	800819a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007b62:	b580      	push	{r7, lr}
 8007b64:	b088      	sub	sp, #32
 8007b66:	af04      	add	r7, sp, #16
 8007b68:	60f8      	str	r0, [r7, #12]
 8007b6a:	60b9      	str	r1, [r7, #8]
 8007b6c:	4611      	mov	r1, r2
 8007b6e:	461a      	mov	r2, r3
 8007b70:	460b      	mov	r3, r1
 8007b72:	80fb      	strh	r3, [r7, #6]
 8007b74:	4613      	mov	r3, r2
 8007b76:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007b78:	7979      	ldrb	r1, [r7, #5]
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	9303      	str	r3, [sp, #12]
 8007b7e:	88fb      	ldrh	r3, [r7, #6]
 8007b80:	9302      	str	r3, [sp, #8]
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	9301      	str	r3, [sp, #4]
 8007b86:	2301      	movs	r3, #1
 8007b88:	9300      	str	r3, [sp, #0]
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	68f8      	ldr	r0, [r7, #12]
 8007b90:	f000 fb03 	bl	800819a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007b94:	2300      	movs	r3, #0

}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3710      	adds	r7, #16
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}

08007b9e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007b9e:	b580      	push	{r7, lr}
 8007ba0:	b088      	sub	sp, #32
 8007ba2:	af04      	add	r7, sp, #16
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	60b9      	str	r1, [r7, #8]
 8007ba8:	4611      	mov	r1, r2
 8007baa:	461a      	mov	r2, r3
 8007bac:	460b      	mov	r3, r1
 8007bae:	80fb      	strh	r3, [r7, #6]
 8007bb0:	4613      	mov	r3, r2
 8007bb2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bc2:	7979      	ldrb	r1, [r7, #5]
 8007bc4:	7e3b      	ldrb	r3, [r7, #24]
 8007bc6:	9303      	str	r3, [sp, #12]
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	9302      	str	r3, [sp, #8]
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	9301      	str	r3, [sp, #4]
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	9300      	str	r3, [sp, #0]
 8007bd4:	2302      	movs	r3, #2
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	68f8      	ldr	r0, [r7, #12]
 8007bda:	f000 fade 	bl	800819a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3710      	adds	r7, #16
 8007be4:	46bd      	mov	sp, r7
 8007be6:	bd80      	pop	{r7, pc}

08007be8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b088      	sub	sp, #32
 8007bec:	af04      	add	r7, sp, #16
 8007bee:	60f8      	str	r0, [r7, #12]
 8007bf0:	60b9      	str	r1, [r7, #8]
 8007bf2:	4611      	mov	r1, r2
 8007bf4:	461a      	mov	r2, r3
 8007bf6:	460b      	mov	r3, r1
 8007bf8:	80fb      	strh	r3, [r7, #6]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007bfe:	7979      	ldrb	r1, [r7, #5]
 8007c00:	2300      	movs	r3, #0
 8007c02:	9303      	str	r3, [sp, #12]
 8007c04:	88fb      	ldrh	r3, [r7, #6]
 8007c06:	9302      	str	r3, [sp, #8]
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	9301      	str	r3, [sp, #4]
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	9300      	str	r3, [sp, #0]
 8007c10:	2302      	movs	r3, #2
 8007c12:	2201      	movs	r2, #1
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 fac0 	bl	800819a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007c1a:	2300      	movs	r3, #0
}
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	3710      	adds	r7, #16
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}

08007c24 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af04      	add	r7, sp, #16
 8007c2a:	6078      	str	r0, [r7, #4]
 8007c2c:	4608      	mov	r0, r1
 8007c2e:	4611      	mov	r1, r2
 8007c30:	461a      	mov	r2, r3
 8007c32:	4603      	mov	r3, r0
 8007c34:	70fb      	strb	r3, [r7, #3]
 8007c36:	460b      	mov	r3, r1
 8007c38:	70bb      	strb	r3, [r7, #2]
 8007c3a:	4613      	mov	r3, r2
 8007c3c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007c3e:	7878      	ldrb	r0, [r7, #1]
 8007c40:	78ba      	ldrb	r2, [r7, #2]
 8007c42:	78f9      	ldrb	r1, [r7, #3]
 8007c44:	8b3b      	ldrh	r3, [r7, #24]
 8007c46:	9302      	str	r3, [sp, #8]
 8007c48:	7d3b      	ldrb	r3, [r7, #20]
 8007c4a:	9301      	str	r3, [sp, #4]
 8007c4c:	7c3b      	ldrb	r3, [r7, #16]
 8007c4e:	9300      	str	r3, [sp, #0]
 8007c50:	4603      	mov	r3, r0
 8007c52:	6878      	ldr	r0, [r7, #4]
 8007c54:	f000 fa53 	bl	80080fe <USBH_LL_OpenPipe>

  return USBH_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3708      	adds	r7, #8
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}

08007c62 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007c62:	b580      	push	{r7, lr}
 8007c64:	b082      	sub	sp, #8
 8007c66:	af00      	add	r7, sp, #0
 8007c68:	6078      	str	r0, [r7, #4]
 8007c6a:	460b      	mov	r3, r1
 8007c6c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	4619      	mov	r1, r3
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fa72 	bl	800815c <USBH_LL_ClosePipe>

  return USBH_OK;
 8007c78:	2300      	movs	r3, #0
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3708      	adds	r7, #8
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	bd80      	pop	{r7, pc}

08007c82 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007c82:	b580      	push	{r7, lr}
 8007c84:	b084      	sub	sp, #16
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
 8007c8a:	460b      	mov	r3, r1
 8007c8c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 f836 	bl	8007d00 <USBH_GetFreePipe>
 8007c94:	4603      	mov	r3, r0
 8007c96:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007c98:	89fb      	ldrh	r3, [r7, #14]
 8007c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007c9e:	4293      	cmp	r3, r2
 8007ca0:	d00a      	beq.n	8007cb8 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007ca2:	78fa      	ldrb	r2, [r7, #3]
 8007ca4:	89fb      	ldrh	r3, [r7, #14]
 8007ca6:	f003 030f 	and.w	r3, r3, #15
 8007caa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	33e0      	adds	r3, #224	; 0xe0
 8007cb2:	009b      	lsls	r3, r3, #2
 8007cb4:	440b      	add	r3, r1
 8007cb6:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007cb8:	89fb      	ldrh	r3, [r7, #14]
 8007cba:	b2db      	uxtb	r3, r3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	3710      	adds	r7, #16
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b083      	sub	sp, #12
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	460b      	mov	r3, r1
 8007cce:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	2b0f      	cmp	r3, #15
 8007cd4:	d80d      	bhi.n	8007cf2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007cd6:	78fb      	ldrb	r3, [r7, #3]
 8007cd8:	687a      	ldr	r2, [r7, #4]
 8007cda:	33e0      	adds	r3, #224	; 0xe0
 8007cdc:	009b      	lsls	r3, r3, #2
 8007cde:	4413      	add	r3, r2
 8007ce0:	685a      	ldr	r2, [r3, #4]
 8007ce2:	78fb      	ldrb	r3, [r7, #3]
 8007ce4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	33e0      	adds	r3, #224	; 0xe0
 8007cec:	009b      	lsls	r3, r3, #2
 8007cee:	440b      	add	r3, r1
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007cf2:	2300      	movs	r3, #0
}
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b085      	sub	sp, #20
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
 8007d10:	e00f      	b.n	8007d32 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007d12:	7bfb      	ldrb	r3, [r7, #15]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	33e0      	adds	r3, #224	; 0xe0
 8007d18:	009b      	lsls	r3, r3, #2
 8007d1a:	4413      	add	r3, r2
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d102      	bne.n	8007d2c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007d26:	7bfb      	ldrb	r3, [r7, #15]
 8007d28:	b29b      	uxth	r3, r3
 8007d2a:	e007      	b.n	8007d3c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007d2c:	7bfb      	ldrb	r3, [r7, #15]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	73fb      	strb	r3, [r7, #15]
 8007d32:	7bfb      	ldrb	r3, [r7, #15]
 8007d34:	2b0f      	cmp	r3, #15
 8007d36:	d9ec      	bls.n	8007d12 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3714      	adds	r7, #20
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr

08007d48 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	490e      	ldr	r1, [pc, #56]	; (8007d88 <MX_USB_HOST_Init+0x40>)
 8007d50:	480e      	ldr	r0, [pc, #56]	; (8007d8c <MX_USB_HOST_Init+0x44>)
 8007d52:	f7fe fba7 	bl	80064a4 <USBH_Init>
 8007d56:	4603      	mov	r3, r0
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d001      	beq.n	8007d60 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007d5c:	f7f8 fe80 	bl	8000a60 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007d60:	490b      	ldr	r1, [pc, #44]	; (8007d90 <MX_USB_HOST_Init+0x48>)
 8007d62:	480a      	ldr	r0, [pc, #40]	; (8007d8c <MX_USB_HOST_Init+0x44>)
 8007d64:	f7fe fc2c 	bl	80065c0 <USBH_RegisterClass>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007d6e:	f7f8 fe77 	bl	8000a60 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007d72:	4806      	ldr	r0, [pc, #24]	; (8007d8c <MX_USB_HOST_Init+0x44>)
 8007d74:	f7fe fcb0 	bl	80066d8 <USBH_Start>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007d7e:	f7f8 fe6f 	bl	8000a60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007d82:	bf00      	nop
 8007d84:	bd80      	pop	{r7, pc}
 8007d86:	bf00      	nop
 8007d88:	08007da9 	.word	0x08007da9
 8007d8c:	20000210 	.word	0x20000210
 8007d90:	20000014 	.word	0x20000014

08007d94 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8007d98:	4802      	ldr	r0, [pc, #8]	; (8007da4 <MX_USB_HOST_Process+0x10>)
 8007d9a:	f7fe fcad 	bl	80066f8 <USBH_Process>
}
 8007d9e:	bf00      	nop
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	20000210 	.word	0x20000210

08007da8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
 8007db0:	460b      	mov	r3, r1
 8007db2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007db4:	78fb      	ldrb	r3, [r7, #3]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	2b04      	cmp	r3, #4
 8007dba:	d819      	bhi.n	8007df0 <USBH_UserProcess+0x48>
 8007dbc:	a201      	add	r2, pc, #4	; (adr r2, 8007dc4 <USBH_UserProcess+0x1c>)
 8007dbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dc2:	bf00      	nop
 8007dc4:	08007df1 	.word	0x08007df1
 8007dc8:	08007de1 	.word	0x08007de1
 8007dcc:	08007df1 	.word	0x08007df1
 8007dd0:	08007de9 	.word	0x08007de9
 8007dd4:	08007dd9 	.word	0x08007dd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007dd8:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <USBH_UserProcess+0x58>)
 8007dda:	2203      	movs	r2, #3
 8007ddc:	701a      	strb	r2, [r3, #0]
  break;
 8007dde:	e008      	b.n	8007df2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007de0:	4b07      	ldr	r3, [pc, #28]	; (8007e00 <USBH_UserProcess+0x58>)
 8007de2:	2202      	movs	r2, #2
 8007de4:	701a      	strb	r2, [r3, #0]
  break;
 8007de6:	e004      	b.n	8007df2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007de8:	4b05      	ldr	r3, [pc, #20]	; (8007e00 <USBH_UserProcess+0x58>)
 8007dea:	2201      	movs	r2, #1
 8007dec:	701a      	strb	r2, [r3, #0]
  break;
 8007dee:	e000      	b.n	8007df2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007df0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007df2:	bf00      	nop
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	200005e8 	.word	0x200005e8

08007e04 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007e04:	b580      	push	{r7, lr}
 8007e06:	b08a      	sub	sp, #40	; 0x28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e0c:	f107 0314 	add.w	r3, r7, #20
 8007e10:	2200      	movs	r2, #0
 8007e12:	601a      	str	r2, [r3, #0]
 8007e14:	605a      	str	r2, [r3, #4]
 8007e16:	609a      	str	r2, [r3, #8]
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e24:	d147      	bne.n	8007eb6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007e26:	2300      	movs	r3, #0
 8007e28:	613b      	str	r3, [r7, #16]
 8007e2a:	4b25      	ldr	r3, [pc, #148]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e2e:	4a24      	ldr	r2, [pc, #144]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e30:	f043 0301 	orr.w	r3, r3, #1
 8007e34:	6313      	str	r3, [r2, #48]	; 0x30
 8007e36:	4b22      	ldr	r3, [pc, #136]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	613b      	str	r3, [r7, #16]
 8007e40:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007e42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007e50:	f107 0314 	add.w	r3, r7, #20
 8007e54:	4619      	mov	r1, r3
 8007e56:	481b      	ldr	r0, [pc, #108]	; (8007ec4 <HAL_HCD_MspInit+0xc0>)
 8007e58:	f7f9 fa18 	bl	800128c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007e5c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007e62:	2302      	movs	r3, #2
 8007e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007e66:	2300      	movs	r3, #0
 8007e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007e6e:	230a      	movs	r3, #10
 8007e70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007e72:	f107 0314 	add.w	r3, r7, #20
 8007e76:	4619      	mov	r1, r3
 8007e78:	4812      	ldr	r0, [pc, #72]	; (8007ec4 <HAL_HCD_MspInit+0xc0>)
 8007e7a:	f7f9 fa07 	bl	800128c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007e7e:	4b10      	ldr	r3, [pc, #64]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e82:	4a0f      	ldr	r2, [pc, #60]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e88:	6353      	str	r3, [r2, #52]	; 0x34
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
 8007e8e:	4b0c      	ldr	r3, [pc, #48]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e92:	4a0b      	ldr	r2, [pc, #44]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007e98:	6453      	str	r3, [r2, #68]	; 0x44
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <HAL_HCD_MspInit+0xbc>)
 8007e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	2043      	movs	r0, #67	; 0x43
 8007eac:	f7f9 f995 	bl	80011da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007eb0:	2043      	movs	r0, #67	; 0x43
 8007eb2:	f7f9 f9ae 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007eb6:	bf00      	nop
 8007eb8:	3728      	adds	r7, #40	; 0x28
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40023800 	.word	0x40023800
 8007ec4:	40020000 	.word	0x40020000

08007ec8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	b082      	sub	sp, #8
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe ffed 	bl	8006eb6 <USBH_LL_IncTimer>
}
 8007edc:	bf00      	nop
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}

08007ee4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	b082      	sub	sp, #8
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7ff f825 	bl	8006f42 <USBH_LL_Connect>
}
 8007ef8:	bf00      	nop
 8007efa:	3708      	adds	r7, #8
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}

08007f00 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f7ff f82e 	bl	8006f70 <USBH_LL_Disconnect>
}
 8007f14:	bf00      	nop
 8007f16:	3708      	adds	r7, #8
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	bd80      	pop	{r7, pc}

08007f1c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
 8007f24:	460b      	mov	r3, r1
 8007f26:	70fb      	strb	r3, [r7, #3]
 8007f28:	4613      	mov	r3, r2
 8007f2a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007f2c:	bf00      	nop
 8007f2e:	370c      	adds	r7, #12
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b082      	sub	sp, #8
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f46:	4618      	mov	r0, r3
 8007f48:	f7fe ffdf 	bl	8006f0a <USBH_LL_PortEnabled>
}
 8007f4c:	bf00      	nop
 8007f4e:	3708      	adds	r7, #8
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7fe ffdf 	bl	8006f26 <USBH_LL_PortDisabled>
}
 8007f68:	bf00      	nop
 8007f6a:	3708      	adds	r7, #8
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d12a      	bne.n	8007fd8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007f82:	4a18      	ldr	r2, [pc, #96]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a15      	ldr	r2, [pc, #84]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007f8e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007f92:	4b14      	ldr	r3, [pc, #80]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007f94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007f98:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007f9a:	4b12      	ldr	r3, [pc, #72]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007f9c:	2208      	movs	r2, #8
 8007f9e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007fa0:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007fa6:	4b0f      	ldr	r3, [pc, #60]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007fac:	4b0d      	ldr	r3, [pc, #52]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007fae:	2202      	movs	r2, #2
 8007fb0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007fb8:	480a      	ldr	r0, [pc, #40]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007fba:	f7f9 fb1c 	bl	80015f6 <HAL_HCD_Init>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d001      	beq.n	8007fc8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007fc4:	f7f8 fd4c 	bl	8000a60 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007fc8:	4806      	ldr	r0, [pc, #24]	; (8007fe4 <USBH_LL_Init+0x74>)
 8007fca:	f7f9 ff00 	bl	8001dce <HAL_HCD_GetCurrentFrame>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	6878      	ldr	r0, [r7, #4]
 8007fd4:	f7fe ff60 	bl	8006e98 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3708      	adds	r7, #8
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	200005ec 	.word	0x200005ec

08007fe8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ffe:	4618      	mov	r0, r3
 8008000:	f7f9 fe6f 	bl	8001ce2 <HAL_HCD_Start>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f95c 	bl	80082c8 <USBH_Get_USB_Status>
 8008010:	4603      	mov	r3, r0
 8008012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008014:	7bbb      	ldrb	r3, [r7, #14]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008026:	2300      	movs	r3, #0
 8008028:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008034:	4618      	mov	r0, r3
 8008036:	f7f9 fe77 	bl	8001d28 <HAL_HCD_Stop>
 800803a:	4603      	mov	r3, r0
 800803c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800803e:	7bfb      	ldrb	r3, [r7, #15]
 8008040:	4618      	mov	r0, r3
 8008042:	f000 f941 	bl	80082c8 <USBH_Get_USB_Status>
 8008046:	4603      	mov	r3, r0
 8008048:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800804a:	7bbb      	ldrb	r3, [r7, #14]
}
 800804c:	4618      	mov	r0, r3
 800804e:	3710      	adds	r7, #16
 8008050:	46bd      	mov	sp, r7
 8008052:	bd80      	pop	{r7, pc}

08008054 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b084      	sub	sp, #16
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008066:	4618      	mov	r0, r3
 8008068:	f7f9 febf 	bl	8001dea <HAL_HCD_GetCurrentSpeed>
 800806c:	4603      	mov	r3, r0
 800806e:	2b02      	cmp	r3, #2
 8008070:	d00c      	beq.n	800808c <USBH_LL_GetSpeed+0x38>
 8008072:	2b02      	cmp	r3, #2
 8008074:	d80d      	bhi.n	8008092 <USBH_LL_GetSpeed+0x3e>
 8008076:	2b00      	cmp	r3, #0
 8008078:	d002      	beq.n	8008080 <USBH_LL_GetSpeed+0x2c>
 800807a:	2b01      	cmp	r3, #1
 800807c:	d003      	beq.n	8008086 <USBH_LL_GetSpeed+0x32>
 800807e:	e008      	b.n	8008092 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008080:	2300      	movs	r3, #0
 8008082:	73fb      	strb	r3, [r7, #15]
    break;
 8008084:	e008      	b.n	8008098 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8008086:	2301      	movs	r3, #1
 8008088:	73fb      	strb	r3, [r7, #15]
    break;
 800808a:	e005      	b.n	8008098 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800808c:	2302      	movs	r3, #2
 800808e:	73fb      	strb	r3, [r7, #15]
    break;
 8008090:	e002      	b.n	8008098 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008092:	2301      	movs	r3, #1
 8008094:	73fb      	strb	r3, [r7, #15]
    break;
 8008096:	bf00      	nop
  }
  return  speed;
 8008098:	7bfb      	ldrb	r3, [r7, #15]
}
 800809a:	4618      	mov	r0, r3
 800809c:	3710      	adds	r7, #16
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b084      	sub	sp, #16
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80080ae:	2300      	movs	r3, #0
 80080b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f9 fe52 	bl	8001d62 <HAL_HCD_ResetPort>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f8ff 	bl	80082c8 <USBH_Get_USB_Status>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 fe59 	bl	8001da6 <HAL_HCD_HC_GetXferCount>
 80080f4:	4603      	mov	r3, r0
}
 80080f6:	4618      	mov	r0, r3
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}

080080fe <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80080fe:	b590      	push	{r4, r7, lr}
 8008100:	b089      	sub	sp, #36	; 0x24
 8008102:	af04      	add	r7, sp, #16
 8008104:	6078      	str	r0, [r7, #4]
 8008106:	4608      	mov	r0, r1
 8008108:	4611      	mov	r1, r2
 800810a:	461a      	mov	r2, r3
 800810c:	4603      	mov	r3, r0
 800810e:	70fb      	strb	r3, [r7, #3]
 8008110:	460b      	mov	r3, r1
 8008112:	70bb      	strb	r3, [r7, #2]
 8008114:	4613      	mov	r3, r2
 8008116:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008118:	2300      	movs	r3, #0
 800811a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800811c:	2300      	movs	r3, #0
 800811e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008126:	787c      	ldrb	r4, [r7, #1]
 8008128:	78ba      	ldrb	r2, [r7, #2]
 800812a:	78f9      	ldrb	r1, [r7, #3]
 800812c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800812e:	9302      	str	r3, [sp, #8]
 8008130:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008134:	9301      	str	r3, [sp, #4]
 8008136:	f897 3020 	ldrb.w	r3, [r7, #32]
 800813a:	9300      	str	r3, [sp, #0]
 800813c:	4623      	mov	r3, r4
 800813e:	f7f9 fabc 	bl	80016ba <HAL_HCD_HC_Init>
 8008142:	4603      	mov	r3, r0
 8008144:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008146:	7bfb      	ldrb	r3, [r7, #15]
 8008148:	4618      	mov	r0, r3
 800814a:	f000 f8bd 	bl	80082c8 <USBH_Get_USB_Status>
 800814e:	4603      	mov	r3, r0
 8008150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008152:	7bbb      	ldrb	r3, [r7, #14]
}
 8008154:	4618      	mov	r0, r3
 8008156:	3714      	adds	r7, #20
 8008158:	46bd      	mov	sp, r7
 800815a:	bd90      	pop	{r4, r7, pc}

0800815c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b084      	sub	sp, #16
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
 8008164:	460b      	mov	r3, r1
 8008166:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008168:	2300      	movs	r3, #0
 800816a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800816c:	2300      	movs	r3, #0
 800816e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008176:	78fa      	ldrb	r2, [r7, #3]
 8008178:	4611      	mov	r1, r2
 800817a:	4618      	mov	r0, r3
 800817c:	f7f9 fb2c 	bl	80017d8 <HAL_HCD_HC_Halt>
 8008180:	4603      	mov	r3, r0
 8008182:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008184:	7bfb      	ldrb	r3, [r7, #15]
 8008186:	4618      	mov	r0, r3
 8008188:	f000 f89e 	bl	80082c8 <USBH_Get_USB_Status>
 800818c:	4603      	mov	r3, r0
 800818e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008190:	7bbb      	ldrb	r3, [r7, #14]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800819a:	b590      	push	{r4, r7, lr}
 800819c:	b089      	sub	sp, #36	; 0x24
 800819e:	af04      	add	r7, sp, #16
 80081a0:	6078      	str	r0, [r7, #4]
 80081a2:	4608      	mov	r0, r1
 80081a4:	4611      	mov	r1, r2
 80081a6:	461a      	mov	r2, r3
 80081a8:	4603      	mov	r3, r0
 80081aa:	70fb      	strb	r3, [r7, #3]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70bb      	strb	r3, [r7, #2]
 80081b0:	4613      	mov	r3, r2
 80081b2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081b8:	2300      	movs	r3, #0
 80081ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80081c2:	787c      	ldrb	r4, [r7, #1]
 80081c4:	78ba      	ldrb	r2, [r7, #2]
 80081c6:	78f9      	ldrb	r1, [r7, #3]
 80081c8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80081cc:	9303      	str	r3, [sp, #12]
 80081ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80081d0:	9302      	str	r3, [sp, #8]
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80081da:	9300      	str	r3, [sp, #0]
 80081dc:	4623      	mov	r3, r4
 80081de:	f7f9 fb1f 	bl	8001820 <HAL_HCD_HC_SubmitRequest>
 80081e2:	4603      	mov	r3, r0
 80081e4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80081e6:	7bfb      	ldrb	r3, [r7, #15]
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 f86d 	bl	80082c8 <USBH_Get_USB_Status>
 80081ee:	4603      	mov	r3, r0
 80081f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd90      	pop	{r4, r7, pc}

080081fc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	460b      	mov	r3, r1
 8008206:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800820e:	78fa      	ldrb	r2, [r7, #3]
 8008210:	4611      	mov	r1, r2
 8008212:	4618      	mov	r0, r3
 8008214:	f7f9 fdb3 	bl	8001d7e <HAL_HCD_HC_GetURBState>
 8008218:	4603      	mov	r3, r0
}
 800821a:	4618      	mov	r0, r3
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
 800822a:	460b      	mov	r3, r1
 800822c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008234:	2b01      	cmp	r3, #1
 8008236:	d103      	bne.n	8008240 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	4618      	mov	r0, r3
 800823c:	f000 f870 	bl	8008320 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008240:	20c8      	movs	r0, #200	; 0xc8
 8008242:	f7f8 fecb 	bl	8000fdc <HAL_Delay>
  return USBH_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008250:	b480      	push	{r7}
 8008252:	b085      	sub	sp, #20
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
 8008258:	460b      	mov	r3, r1
 800825a:	70fb      	strb	r3, [r7, #3]
 800825c:	4613      	mov	r3, r2
 800825e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008266:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008268:	78fb      	ldrb	r3, [r7, #3]
 800826a:	68fa      	ldr	r2, [r7, #12]
 800826c:	212c      	movs	r1, #44	; 0x2c
 800826e:	fb01 f303 	mul.w	r3, r1, r3
 8008272:	4413      	add	r3, r2
 8008274:	333b      	adds	r3, #59	; 0x3b
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d009      	beq.n	8008290 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800827c:	78fb      	ldrb	r3, [r7, #3]
 800827e:	68fa      	ldr	r2, [r7, #12]
 8008280:	212c      	movs	r1, #44	; 0x2c
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	4413      	add	r3, r2
 8008288:	3354      	adds	r3, #84	; 0x54
 800828a:	78ba      	ldrb	r2, [r7, #2]
 800828c:	701a      	strb	r2, [r3, #0]
 800828e:	e008      	b.n	80082a2 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008290:	78fb      	ldrb	r3, [r7, #3]
 8008292:	68fa      	ldr	r2, [r7, #12]
 8008294:	212c      	movs	r1, #44	; 0x2c
 8008296:	fb01 f303 	mul.w	r3, r1, r3
 800829a:	4413      	add	r3, r2
 800829c:	3355      	adds	r3, #85	; 0x55
 800829e:	78ba      	ldrb	r2, [r7, #2]
 80082a0:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7f8 fe8f 	bl	8000fdc <HAL_Delay>
}
 80082be:	bf00      	nop
 80082c0:	3708      	adds	r7, #8
 80082c2:	46bd      	mov	sp, r7
 80082c4:	bd80      	pop	{r7, pc}
	...

080082c8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	4603      	mov	r3, r0
 80082d0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082d2:	2300      	movs	r3, #0
 80082d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082d6:	79fb      	ldrb	r3, [r7, #7]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	d817      	bhi.n	800830c <USBH_Get_USB_Status+0x44>
 80082dc:	a201      	add	r2, pc, #4	; (adr r2, 80082e4 <USBH_Get_USB_Status+0x1c>)
 80082de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e2:	bf00      	nop
 80082e4:	080082f5 	.word	0x080082f5
 80082e8:	080082fb 	.word	0x080082fb
 80082ec:	08008301 	.word	0x08008301
 80082f0:	08008307 	.word	0x08008307
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
    break;
 80082f8:	e00b      	b.n	8008312 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80082fa:	2302      	movs	r3, #2
 80082fc:	73fb      	strb	r3, [r7, #15]
    break;
 80082fe:	e008      	b.n	8008312 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008300:	2301      	movs	r3, #1
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	e005      	b.n	8008312 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008306:	2302      	movs	r3, #2
 8008308:	73fb      	strb	r3, [r7, #15]
    break;
 800830a:	e002      	b.n	8008312 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800830c:	2302      	movs	r3, #2
 800830e:	73fb      	strb	r3, [r7, #15]
    break;
 8008310:	bf00      	nop
  }
  return usb_status;
 8008312:	7bfb      	ldrb	r3, [r7, #15]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3714      	adds	r7, #20
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr

08008320 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b084      	sub	sp, #16
 8008324:	af00      	add	r7, sp, #0
 8008326:	4603      	mov	r3, r0
 8008328:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800832a:	79fb      	ldrb	r3, [r7, #7]
 800832c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800832e:	79fb      	ldrb	r3, [r7, #7]
 8008330:	2b00      	cmp	r3, #0
 8008332:	d102      	bne.n	800833a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
 8008338:	e001      	b.n	800833e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800833a:	2301      	movs	r3, #1
 800833c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800833e:	7bfb      	ldrb	r3, [r7, #15]
 8008340:	461a      	mov	r2, r3
 8008342:	2101      	movs	r1, #1
 8008344:	4803      	ldr	r0, [pc, #12]	; (8008354 <MX_DriverVbusFS+0x34>)
 8008346:	f7f9 f93d 	bl	80015c4 <HAL_GPIO_WritePin>
}
 800834a:	bf00      	nop
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40020800 	.word	0x40020800

08008358 <__errno>:
 8008358:	4b01      	ldr	r3, [pc, #4]	; (8008360 <__errno+0x8>)
 800835a:	6818      	ldr	r0, [r3, #0]
 800835c:	4770      	bx	lr
 800835e:	bf00      	nop
 8008360:	20000034 	.word	0x20000034

08008364 <__libc_init_array>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	4d0d      	ldr	r5, [pc, #52]	; (800839c <__libc_init_array+0x38>)
 8008368:	4c0d      	ldr	r4, [pc, #52]	; (80083a0 <__libc_init_array+0x3c>)
 800836a:	1b64      	subs	r4, r4, r5
 800836c:	10a4      	asrs	r4, r4, #2
 800836e:	2600      	movs	r6, #0
 8008370:	42a6      	cmp	r6, r4
 8008372:	d109      	bne.n	8008388 <__libc_init_array+0x24>
 8008374:	4d0b      	ldr	r5, [pc, #44]	; (80083a4 <__libc_init_array+0x40>)
 8008376:	4c0c      	ldr	r4, [pc, #48]	; (80083a8 <__libc_init_array+0x44>)
 8008378:	f000 f92e 	bl	80085d8 <_init>
 800837c:	1b64      	subs	r4, r4, r5
 800837e:	10a4      	asrs	r4, r4, #2
 8008380:	2600      	movs	r6, #0
 8008382:	42a6      	cmp	r6, r4
 8008384:	d105      	bne.n	8008392 <__libc_init_array+0x2e>
 8008386:	bd70      	pop	{r4, r5, r6, pc}
 8008388:	f855 3b04 	ldr.w	r3, [r5], #4
 800838c:	4798      	blx	r3
 800838e:	3601      	adds	r6, #1
 8008390:	e7ee      	b.n	8008370 <__libc_init_array+0xc>
 8008392:	f855 3b04 	ldr.w	r3, [r5], #4
 8008396:	4798      	blx	r3
 8008398:	3601      	adds	r6, #1
 800839a:	e7f2      	b.n	8008382 <__libc_init_array+0x1e>
 800839c:	08008614 	.word	0x08008614
 80083a0:	08008614 	.word	0x08008614
 80083a4:	08008614 	.word	0x08008614
 80083a8:	08008618 	.word	0x08008618

080083ac <malloc>:
 80083ac:	4b02      	ldr	r3, [pc, #8]	; (80083b8 <malloc+0xc>)
 80083ae:	4601      	mov	r1, r0
 80083b0:	6818      	ldr	r0, [r3, #0]
 80083b2:	f000 b87f 	b.w	80084b4 <_malloc_r>
 80083b6:	bf00      	nop
 80083b8:	20000034 	.word	0x20000034

080083bc <free>:
 80083bc:	4b02      	ldr	r3, [pc, #8]	; (80083c8 <free+0xc>)
 80083be:	4601      	mov	r1, r0
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	f000 b80b 	b.w	80083dc <_free_r>
 80083c6:	bf00      	nop
 80083c8:	20000034 	.word	0x20000034

080083cc <memset>:
 80083cc:	4402      	add	r2, r0
 80083ce:	4603      	mov	r3, r0
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d100      	bne.n	80083d6 <memset+0xa>
 80083d4:	4770      	bx	lr
 80083d6:	f803 1b01 	strb.w	r1, [r3], #1
 80083da:	e7f9      	b.n	80083d0 <memset+0x4>

080083dc <_free_r>:
 80083dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083de:	2900      	cmp	r1, #0
 80083e0:	d044      	beq.n	800846c <_free_r+0x90>
 80083e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083e6:	9001      	str	r0, [sp, #4]
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f1a1 0404 	sub.w	r4, r1, #4
 80083ee:	bfb8      	it	lt
 80083f0:	18e4      	addlt	r4, r4, r3
 80083f2:	f000 f8e3 	bl	80085bc <__malloc_lock>
 80083f6:	4a1e      	ldr	r2, [pc, #120]	; (8008470 <_free_r+0x94>)
 80083f8:	9801      	ldr	r0, [sp, #4]
 80083fa:	6813      	ldr	r3, [r2, #0]
 80083fc:	b933      	cbnz	r3, 800840c <_free_r+0x30>
 80083fe:	6063      	str	r3, [r4, #4]
 8008400:	6014      	str	r4, [r2, #0]
 8008402:	b003      	add	sp, #12
 8008404:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008408:	f000 b8de 	b.w	80085c8 <__malloc_unlock>
 800840c:	42a3      	cmp	r3, r4
 800840e:	d908      	bls.n	8008422 <_free_r+0x46>
 8008410:	6825      	ldr	r5, [r4, #0]
 8008412:	1961      	adds	r1, r4, r5
 8008414:	428b      	cmp	r3, r1
 8008416:	bf01      	itttt	eq
 8008418:	6819      	ldreq	r1, [r3, #0]
 800841a:	685b      	ldreq	r3, [r3, #4]
 800841c:	1949      	addeq	r1, r1, r5
 800841e:	6021      	streq	r1, [r4, #0]
 8008420:	e7ed      	b.n	80083fe <_free_r+0x22>
 8008422:	461a      	mov	r2, r3
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	b10b      	cbz	r3, 800842c <_free_r+0x50>
 8008428:	42a3      	cmp	r3, r4
 800842a:	d9fa      	bls.n	8008422 <_free_r+0x46>
 800842c:	6811      	ldr	r1, [r2, #0]
 800842e:	1855      	adds	r5, r2, r1
 8008430:	42a5      	cmp	r5, r4
 8008432:	d10b      	bne.n	800844c <_free_r+0x70>
 8008434:	6824      	ldr	r4, [r4, #0]
 8008436:	4421      	add	r1, r4
 8008438:	1854      	adds	r4, r2, r1
 800843a:	42a3      	cmp	r3, r4
 800843c:	6011      	str	r1, [r2, #0]
 800843e:	d1e0      	bne.n	8008402 <_free_r+0x26>
 8008440:	681c      	ldr	r4, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	6053      	str	r3, [r2, #4]
 8008446:	4421      	add	r1, r4
 8008448:	6011      	str	r1, [r2, #0]
 800844a:	e7da      	b.n	8008402 <_free_r+0x26>
 800844c:	d902      	bls.n	8008454 <_free_r+0x78>
 800844e:	230c      	movs	r3, #12
 8008450:	6003      	str	r3, [r0, #0]
 8008452:	e7d6      	b.n	8008402 <_free_r+0x26>
 8008454:	6825      	ldr	r5, [r4, #0]
 8008456:	1961      	adds	r1, r4, r5
 8008458:	428b      	cmp	r3, r1
 800845a:	bf04      	itt	eq
 800845c:	6819      	ldreq	r1, [r3, #0]
 800845e:	685b      	ldreq	r3, [r3, #4]
 8008460:	6063      	str	r3, [r4, #4]
 8008462:	bf04      	itt	eq
 8008464:	1949      	addeq	r1, r1, r5
 8008466:	6021      	streq	r1, [r4, #0]
 8008468:	6054      	str	r4, [r2, #4]
 800846a:	e7ca      	b.n	8008402 <_free_r+0x26>
 800846c:	b003      	add	sp, #12
 800846e:	bd30      	pop	{r4, r5, pc}
 8008470:	200008f0 	.word	0x200008f0

08008474 <sbrk_aligned>:
 8008474:	b570      	push	{r4, r5, r6, lr}
 8008476:	4e0e      	ldr	r6, [pc, #56]	; (80084b0 <sbrk_aligned+0x3c>)
 8008478:	460c      	mov	r4, r1
 800847a:	6831      	ldr	r1, [r6, #0]
 800847c:	4605      	mov	r5, r0
 800847e:	b911      	cbnz	r1, 8008486 <sbrk_aligned+0x12>
 8008480:	f000 f88c 	bl	800859c <_sbrk_r>
 8008484:	6030      	str	r0, [r6, #0]
 8008486:	4621      	mov	r1, r4
 8008488:	4628      	mov	r0, r5
 800848a:	f000 f887 	bl	800859c <_sbrk_r>
 800848e:	1c43      	adds	r3, r0, #1
 8008490:	d00a      	beq.n	80084a8 <sbrk_aligned+0x34>
 8008492:	1cc4      	adds	r4, r0, #3
 8008494:	f024 0403 	bic.w	r4, r4, #3
 8008498:	42a0      	cmp	r0, r4
 800849a:	d007      	beq.n	80084ac <sbrk_aligned+0x38>
 800849c:	1a21      	subs	r1, r4, r0
 800849e:	4628      	mov	r0, r5
 80084a0:	f000 f87c 	bl	800859c <_sbrk_r>
 80084a4:	3001      	adds	r0, #1
 80084a6:	d101      	bne.n	80084ac <sbrk_aligned+0x38>
 80084a8:	f04f 34ff 	mov.w	r4, #4294967295
 80084ac:	4620      	mov	r0, r4
 80084ae:	bd70      	pop	{r4, r5, r6, pc}
 80084b0:	200008f4 	.word	0x200008f4

080084b4 <_malloc_r>:
 80084b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084b8:	1ccd      	adds	r5, r1, #3
 80084ba:	f025 0503 	bic.w	r5, r5, #3
 80084be:	3508      	adds	r5, #8
 80084c0:	2d0c      	cmp	r5, #12
 80084c2:	bf38      	it	cc
 80084c4:	250c      	movcc	r5, #12
 80084c6:	2d00      	cmp	r5, #0
 80084c8:	4607      	mov	r7, r0
 80084ca:	db01      	blt.n	80084d0 <_malloc_r+0x1c>
 80084cc:	42a9      	cmp	r1, r5
 80084ce:	d905      	bls.n	80084dc <_malloc_r+0x28>
 80084d0:	230c      	movs	r3, #12
 80084d2:	603b      	str	r3, [r7, #0]
 80084d4:	2600      	movs	r6, #0
 80084d6:	4630      	mov	r0, r6
 80084d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80084dc:	4e2e      	ldr	r6, [pc, #184]	; (8008598 <_malloc_r+0xe4>)
 80084de:	f000 f86d 	bl	80085bc <__malloc_lock>
 80084e2:	6833      	ldr	r3, [r6, #0]
 80084e4:	461c      	mov	r4, r3
 80084e6:	bb34      	cbnz	r4, 8008536 <_malloc_r+0x82>
 80084e8:	4629      	mov	r1, r5
 80084ea:	4638      	mov	r0, r7
 80084ec:	f7ff ffc2 	bl	8008474 <sbrk_aligned>
 80084f0:	1c43      	adds	r3, r0, #1
 80084f2:	4604      	mov	r4, r0
 80084f4:	d14d      	bne.n	8008592 <_malloc_r+0xde>
 80084f6:	6834      	ldr	r4, [r6, #0]
 80084f8:	4626      	mov	r6, r4
 80084fa:	2e00      	cmp	r6, #0
 80084fc:	d140      	bne.n	8008580 <_malloc_r+0xcc>
 80084fe:	6823      	ldr	r3, [r4, #0]
 8008500:	4631      	mov	r1, r6
 8008502:	4638      	mov	r0, r7
 8008504:	eb04 0803 	add.w	r8, r4, r3
 8008508:	f000 f848 	bl	800859c <_sbrk_r>
 800850c:	4580      	cmp	r8, r0
 800850e:	d13a      	bne.n	8008586 <_malloc_r+0xd2>
 8008510:	6821      	ldr	r1, [r4, #0]
 8008512:	3503      	adds	r5, #3
 8008514:	1a6d      	subs	r5, r5, r1
 8008516:	f025 0503 	bic.w	r5, r5, #3
 800851a:	3508      	adds	r5, #8
 800851c:	2d0c      	cmp	r5, #12
 800851e:	bf38      	it	cc
 8008520:	250c      	movcc	r5, #12
 8008522:	4629      	mov	r1, r5
 8008524:	4638      	mov	r0, r7
 8008526:	f7ff ffa5 	bl	8008474 <sbrk_aligned>
 800852a:	3001      	adds	r0, #1
 800852c:	d02b      	beq.n	8008586 <_malloc_r+0xd2>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	442b      	add	r3, r5
 8008532:	6023      	str	r3, [r4, #0]
 8008534:	e00e      	b.n	8008554 <_malloc_r+0xa0>
 8008536:	6822      	ldr	r2, [r4, #0]
 8008538:	1b52      	subs	r2, r2, r5
 800853a:	d41e      	bmi.n	800857a <_malloc_r+0xc6>
 800853c:	2a0b      	cmp	r2, #11
 800853e:	d916      	bls.n	800856e <_malloc_r+0xba>
 8008540:	1961      	adds	r1, r4, r5
 8008542:	42a3      	cmp	r3, r4
 8008544:	6025      	str	r5, [r4, #0]
 8008546:	bf18      	it	ne
 8008548:	6059      	strne	r1, [r3, #4]
 800854a:	6863      	ldr	r3, [r4, #4]
 800854c:	bf08      	it	eq
 800854e:	6031      	streq	r1, [r6, #0]
 8008550:	5162      	str	r2, [r4, r5]
 8008552:	604b      	str	r3, [r1, #4]
 8008554:	4638      	mov	r0, r7
 8008556:	f104 060b 	add.w	r6, r4, #11
 800855a:	f000 f835 	bl	80085c8 <__malloc_unlock>
 800855e:	f026 0607 	bic.w	r6, r6, #7
 8008562:	1d23      	adds	r3, r4, #4
 8008564:	1af2      	subs	r2, r6, r3
 8008566:	d0b6      	beq.n	80084d6 <_malloc_r+0x22>
 8008568:	1b9b      	subs	r3, r3, r6
 800856a:	50a3      	str	r3, [r4, r2]
 800856c:	e7b3      	b.n	80084d6 <_malloc_r+0x22>
 800856e:	6862      	ldr	r2, [r4, #4]
 8008570:	42a3      	cmp	r3, r4
 8008572:	bf0c      	ite	eq
 8008574:	6032      	streq	r2, [r6, #0]
 8008576:	605a      	strne	r2, [r3, #4]
 8008578:	e7ec      	b.n	8008554 <_malloc_r+0xa0>
 800857a:	4623      	mov	r3, r4
 800857c:	6864      	ldr	r4, [r4, #4]
 800857e:	e7b2      	b.n	80084e6 <_malloc_r+0x32>
 8008580:	4634      	mov	r4, r6
 8008582:	6876      	ldr	r6, [r6, #4]
 8008584:	e7b9      	b.n	80084fa <_malloc_r+0x46>
 8008586:	230c      	movs	r3, #12
 8008588:	603b      	str	r3, [r7, #0]
 800858a:	4638      	mov	r0, r7
 800858c:	f000 f81c 	bl	80085c8 <__malloc_unlock>
 8008590:	e7a1      	b.n	80084d6 <_malloc_r+0x22>
 8008592:	6025      	str	r5, [r4, #0]
 8008594:	e7de      	b.n	8008554 <_malloc_r+0xa0>
 8008596:	bf00      	nop
 8008598:	200008f0 	.word	0x200008f0

0800859c <_sbrk_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d06      	ldr	r5, [pc, #24]	; (80085b8 <_sbrk_r+0x1c>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	602b      	str	r3, [r5, #0]
 80085a8:	f7f8 fc34 	bl	8000e14 <_sbrk>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d102      	bne.n	80085b6 <_sbrk_r+0x1a>
 80085b0:	682b      	ldr	r3, [r5, #0]
 80085b2:	b103      	cbz	r3, 80085b6 <_sbrk_r+0x1a>
 80085b4:	6023      	str	r3, [r4, #0]
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	200008f8 	.word	0x200008f8

080085bc <__malloc_lock>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__malloc_lock+0x8>)
 80085be:	f000 b809 	b.w	80085d4 <__retarget_lock_acquire_recursive>
 80085c2:	bf00      	nop
 80085c4:	200008fc 	.word	0x200008fc

080085c8 <__malloc_unlock>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__malloc_unlock+0x8>)
 80085ca:	f000 b804 	b.w	80085d6 <__retarget_lock_release_recursive>
 80085ce:	bf00      	nop
 80085d0:	200008fc 	.word	0x200008fc

080085d4 <__retarget_lock_acquire_recursive>:
 80085d4:	4770      	bx	lr

080085d6 <__retarget_lock_release_recursive>:
 80085d6:	4770      	bx	lr

080085d8 <_init>:
 80085d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085da:	bf00      	nop
 80085dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085de:	bc08      	pop	{r3}
 80085e0:	469e      	mov	lr, r3
 80085e2:	4770      	bx	lr

080085e4 <_fini>:
 80085e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085e6:	bf00      	nop
 80085e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ea:	bc08      	pop	{r3}
 80085ec:	469e      	mov	lr, r3
 80085ee:	4770      	bx	lr
